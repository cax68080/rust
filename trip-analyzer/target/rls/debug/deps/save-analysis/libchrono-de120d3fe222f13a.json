{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22","program":"C:\\Users\\cax68\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","chrono","--edition=2018","C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"clock\"","--cfg","feature=\"default\"","--cfg","feature=\"iana-time-zone\"","--cfg","feature=\"js-sys\"","--cfg","feature=\"oldtime\"","--cfg","feature=\"std\"","--cfg","feature=\"time\"","--cfg","feature=\"wasm-bindgen\"","--cfg","feature=\"wasmbind\"","--cfg","feature=\"winapi\"","-C","metadata=de120d3fe222f13a","-C","extra-filename=-de120d3fe222f13a","--out-dir","c:\\Users\\cax68\\Documents\\VSCODE\\Rust\\trip-analyzer\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\cax68\\Documents\\VSCODE\\Rust\\trip-analyzer\\target\\rls\\debug\\deps","--extern","iana_time_zone=c:\\Users\\cax68\\Documents\\VSCODE\\Rust\\trip-analyzer\\target\\rls\\debug\\deps\\libiana_time_zone-052de9d5c2a17a1b.rmeta","--extern","num_integer=c:\\Users\\cax68\\Documents\\VSCODE\\Rust\\trip-analyzer\\target\\rls\\debug\\deps\\libnum_integer-ee8d9841442a7710.rmeta","--extern","num_traits=c:\\Users\\cax68\\Documents\\VSCODE\\Rust\\trip-analyzer\\target\\rls\\debug\\deps\\libnum_traits-4ce3f2c607f84dfe.rmeta","--extern","time=c:\\Users\\cax68\\Documents\\VSCODE\\Rust\\trip-analyzer\\target\\rls\\debug\\deps\\libtime-13f0b00383577072.rmeta","--extern","winapi=c:\\Users\\cax68\\Documents\\VSCODE\\Rust\\trip-analyzer\\target\\rls\\debug\\deps\\libwinapi-05ac1e0876c488a0.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\cax68\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\cax68\\Documents\\VSCODE\\Rust\\trip-analyzer\\target\\rls\\debug\\deps\\libchrono-de120d3fe222f13a.rmeta"},"prelude":{"crate_id":{"name":"chrono","disambiguator":[9137111931177357975,0]},"crate_root":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src","external_crates":[{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[8220901491324417181,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","num":2,"id":{"name":"core","disambiguator":[17646335034858718245,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7543338740222325194,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4121655161238992384,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7221895495783829703,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[289704317308896518,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5672898907341438381,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4632090926257578515,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[1168759375612508108,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2527076414705739063,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":11,"id":{"name":"adler","disambiguator":[5451358767642273343,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14077134330987967860,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[16523041212766607157,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[2148051765216828524,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[3381654416152841193,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","num":16,"id":{"name":"time","disambiguator":[5008079805110183805,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\windows.rs","num":17,"id":{"name":"winapi","disambiguator":[8090407504606050457,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","num":18,"id":{"name":"num_integer","disambiguator":[2403863808955435438,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","num":19,"id":{"name":"num_traits","disambiguator":[12210629368417338578,0]}}],"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":76,"byte_end":22970,"line_start":4,"line_end":532,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":16,"index":404},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":20321,"byte_end":20329,"line_start":432,"line_end":432,"column_start":18,"column_end":26},"alias_span":null,"name":"Duration","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2303},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":20686,"byte_end":20690,"line_start":445,"line_end":445,"column_start":20,"column_end":24},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":7}},{"kind":"Use","ref_id":{"krate":0,"index":2829},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":20763,"byte_end":20768,"line_start":448,"line_end":448,"column_start":20,"column_end":25},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":7}},{"kind":"Use","ref_id":{"krate":0,"index":2830},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":20763,"byte_end":20768,"line_start":448,"line_end":448,"column_start":20,"column_end":25},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":7}},{"kind":"Use","ref_id":{"krate":0,"index":2163},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":20901,"byte_end":20912,"line_start":453,"line_end":453,"column_start":20,"column_end":31},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":7}},{"kind":"Use","ref_id":{"krate":0,"index":2334},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":20956,"byte_end":20964,"line_start":455,"line_end":455,"column_start":21,"column_end":29},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":7}},{"kind":"Use","ref_id":{"krate":0,"index":2310},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":20966,"byte_end":20979,"line_start":455,"line_end":455,"column_start":31,"column_end":44},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":7}},{"kind":"Use","ref_id":{"krate":0,"index":2266},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21024,"byte_end":21032,"line_start":457,"line_end":457,"column_start":21,"column_end":29},"alias_span":null,"name":"Datelike","value":"","parent":{"krate":0,"index":7}},{"kind":"Use","ref_id":{"krate":0,"index":2946},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21034,"byte_end":21039,"line_start":457,"line_end":457,"column_start":31,"column_end":36},"alias_span":null,"name":"Month","value":"","parent":{"krate":0,"index":7}},{"kind":"Use","ref_id":{"krate":0,"index":2285},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21041,"byte_end":21049,"line_start":457,"line_end":457,"column_start":38,"column_end":46},"alias_span":null,"name":"Timelike","value":"","parent":{"krate":0,"index":7}},{"kind":"Use","ref_id":{"krate":0,"index":2899},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21051,"byte_end":21058,"line_start":457,"line_end":457,"column_start":48,"column_end":55},"alias_span":null,"name":"Weekday","value":"","parent":{"krate":0,"index":7}},{"kind":"Use","ref_id":{"krate":0,"index":2814},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21103,"byte_end":21114,"line_start":459,"line_end":459,"column_start":21,"column_end":32},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":7}},{"kind":"Use","ref_id":{"krate":0,"index":2836},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21116,"byte_end":21119,"line_start":459,"line_end":459,"column_start":34,"column_end":37},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":7}},{"kind":"Use","ref_id":{"krate":0,"index":2837},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21116,"byte_end":21119,"line_start":459,"line_end":459,"column_start":34,"column_end":37},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":7}},{"kind":"Use","ref_id":{"krate":0,"index":2660},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21164,"byte_end":21173,"line_start":461,"line_end":461,"column_start":21,"column_end":30},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":7}},{"kind":"Use","ref_id":{"krate":0,"index":2721},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21175,"byte_end":21188,"line_start":461,"line_end":461,"column_start":32,"column_end":45},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":7}},{"kind":"Use","ref_id":{"krate":0,"index":2794},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21190,"byte_end":21199,"line_start":461,"line_end":461,"column_start":47,"column_end":56},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":7}},{"kind":"Use","ref_id":{"krate":0,"index":2085},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21244,"byte_end":21250,"line_start":463,"line_end":463,"column_start":21,"column_end":27},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":7}},{"kind":"Use","ref_id":{"krate":0,"index":2087},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21252,"byte_end":21260,"line_start":463,"line_end":463,"column_start":29,"column_end":37},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":7}},{"kind":"Use","ref_id":{"krate":0,"index":2303},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21312,"byte_end":21316,"line_start":468,"line_end":468,"column_start":16,"column_end":20},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21318,"byte_end":21326,"line_start":468,"line_end":468,"column_start":22,"column_end":30},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21328,"byte_end":21336,"line_start":468,"line_end":468,"column_start":32,"column_end":40},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2334},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21476,"byte_end":21484,"line_start":474,"line_end":474,"column_start":20,"column_end":28},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2310},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21486,"byte_end":21499,"line_start":474,"line_end":474,"column_start":30,"column_end":43},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":368},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21501,"byte_end":21513,"line_start":474,"line_end":474,"column_start":45,"column_end":57},"alias_span":null,"name":"MAX_DATETIME","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":367},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21515,"byte_end":21527,"line_start":474,"line_end":474,"column_start":59,"column_end":71},"alias_span":null,"name":"MIN_DATETIME","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":896},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":85524,"byte_end":85529,"line_start":58,"line_end":58,"column_start":16,"column_end":21},"alias_span":null,"name":"parse","value":"","parent":{"krate":0,"index":558}},{"kind":"Use","ref_id":{"krate":0,"index":2591},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":85547,"byte_end":85553,"line_start":59,"line_end":59,"column_start":17,"column_end":23},"alias_span":null,"name":"Parsed","value":"","parent":{"krate":0,"index":558}},{"kind":"Use","ref_id":{"krate":0,"index":2627},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":85663,"byte_end":85676,"line_start":63,"line_end":63,"column_start":19,"column_end":32},"alias_span":null,"name":"StrftimeItems","value":"","parent":{"krate":0,"index":558}},{"kind":"Use","ref_id":{"krate":0,"index":2548},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21643,"byte_end":21653,"line_start":480,"line_end":480,"column_start":18,"column_end":28},"alias_span":null,"name":"ParseError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":632},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21655,"byte_end":21666,"line_start":480,"line_end":480,"column_start":30,"column_end":41},"alias_span":null,"name":"ParseResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2660},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":263414,"byte_end":263423,"line_start":14,"line_end":14,"column_start":22,"column_end":31},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":1061}},{"kind":"Use","ref_id":{"krate":0,"index":2655},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":263425,"byte_end":263434,"line_start":14,"line_end":14,"column_start":33,"column_end":42},"alias_span":null,"name":"NaiveWeek","value":"","parent":{"krate":0,"index":1061}},{"kind":"Use","ref_id":{"krate":0,"index":1176},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":263436,"byte_end":263444,"line_start":14,"line_end":14,"column_start":44,"column_end":52},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":1061}},{"kind":"Use","ref_id":{"krate":0,"index":1175},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":263446,"byte_end":263454,"line_start":14,"line_end":14,"column_start":54,"column_end":62},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":1061}},{"kind":"Use","ref_id":{"krate":0,"index":2721},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":263612,"byte_end":263625,"line_start":19,"line_end":19,"column_start":26,"column_end":39},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":1061}},{"kind":"Use","ref_id":{"krate":0,"index":1387},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":263627,"byte_end":263639,"line_start":19,"line_end":19,"column_start":41,"column_end":53},"alias_span":null,"name":"MAX_DATETIME","value":"","parent":{"krate":0,"index":1061}},{"kind":"Use","ref_id":{"krate":0,"index":1386},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":263641,"byte_end":263653,"line_start":19,"line_end":19,"column_start":55,"column_end":67},"alias_span":null,"name":"MIN_DATETIME","value":"","parent":{"krate":0,"index":1061}},{"kind":"Use","ref_id":{"krate":0,"index":2778},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":263679,"byte_end":263686,"line_start":20,"line_end":20,"column_start":24,"column_end":31},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":1061}},{"kind":"Use","ref_id":{"krate":0,"index":2794},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":263708,"byte_end":263717,"line_start":21,"line_end":21,"column_start":21,"column_end":30},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":1061}},{"kind":"Use","ref_id":{"krate":0,"index":2778},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21719,"byte_end":21726,"line_start":484,"line_end":484,"column_start":17,"column_end":24},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2660},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21728,"byte_end":21737,"line_start":484,"line_end":484,"column_start":26,"column_end":35},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2721},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21739,"byte_end":21752,"line_start":484,"line_end":484,"column_start":37,"column_end":50},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2794},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21754,"byte_end":21763,"line_start":484,"line_end":484,"column_start":52,"column_end":61},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2655},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21765,"byte_end":21774,"line_start":484,"line_end":484,"column_start":63,"column_end":72},"alias_span":null,"name":"NaiveWeek","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2814},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":526409,"byte_end":526420,"line_start":29,"line_end":29,"column_start":22,"column_end":33},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":1758}},{"kind":"Use","ref_id":{"krate":0,"index":2829},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":526507,"byte_end":526512,"line_start":34,"line_end":34,"column_start":22,"column_end":27},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":1758}},{"kind":"Use","ref_id":{"krate":0,"index":2830},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":526507,"byte_end":526512,"line_start":34,"line_end":34,"column_start":22,"column_end":27},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":1758}},{"kind":"Use","ref_id":{"krate":0,"index":2836},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":526543,"byte_end":526546,"line_start":37,"line_end":37,"column_start":20,"column_end":23},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":1758}},{"kind":"Use","ref_id":{"krate":0,"index":2837},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":526543,"byte_end":526546,"line_start":37,"line_end":37,"column_start":20,"column_end":23},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":1758}},{"kind":"Use","ref_id":{"krate":0,"index":2829},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21854,"byte_end":21859,"line_start":489,"line_end":489,"column_start":17,"column_end":22},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2830},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21854,"byte_end":21859,"line_start":489,"line_end":489,"column_start":17,"column_end":22},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2814},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21896,"byte_end":21907,"line_start":491,"line_end":491,"column_start":18,"column_end":29},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2847},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21909,"byte_end":21920,"line_start":491,"line_end":491,"column_start":31,"column_end":42},"alias_span":null,"name":"LocalResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2085},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21922,"byte_end":21928,"line_start":491,"line_end":491,"column_start":44,"column_end":50},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2087},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21930,"byte_end":21938,"line_start":491,"line_end":491,"column_start":52,"column_end":60},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2836},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21940,"byte_end":21943,"line_start":491,"line_end":491,"column_start":62,"column_end":65},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2837},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21940,"byte_end":21943,"line_start":491,"line_end":491,"column_start":62,"column_end":65},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2171},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21974,"byte_end":21987,"line_start":494,"line_end":494,"column_start":17,"column_end":30},"alias_span":null,"name":"DurationRound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2881},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21989,"byte_end":22002,"line_start":494,"line_end":494,"column_start":32,"column_end":45},"alias_span":null,"name":"RoundingError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2163},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22004,"byte_end":22015,"line_start":494,"line_end":494,"column_start":47,"column_end":58},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2935},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22050,"byte_end":22067,"line_start":497,"line_end":497,"column_start":19,"column_end":36},"alias_span":null,"name":"ParseWeekdayError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2899},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22069,"byte_end":22076,"line_start":497,"line_end":497,"column_start":38,"column_end":45},"alias_span":null,"name":"Weekday","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2946},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22107,"byte_end":22112,"line_start":500,"line_end":500,"column_start":17,"column_end":22},"alias_span":null,"name":"Month","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2997},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22114,"byte_end":22120,"line_start":500,"line_end":500,"column_start":24,"column_end":30},"alias_span":null,"name":"Months","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2998},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22114,"byte_end":22120,"line_start":500,"line_end":500,"column_start":24,"column_end":30},"alias_span":null,"name":"Months","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3017},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22122,"byte_end":22137,"line_start":500,"line_end":500,"column_start":32,"column_end":47},"alias_span":null,"name":"ParseMonthError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2266},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22170,"byte_end":22178,"line_start":503,"line_end":503,"column_start":18,"column_end":26},"alias_span":null,"name":"Datelike","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2285},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":22180,"byte_end":22188,"line_start":503,"line_end":503,"column_start":28,"column_end":36},"alias_span":null,"name":"Timelike","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":76,"byte_end":22970,"line_start":4,"line_end":532,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":61},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":250},{"krate":0,"index":253},{"krate":0,"index":256},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":549},{"krate":0,"index":552},{"krate":0,"index":555},{"krate":0,"index":558},{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1058},{"krate":0,"index":1061},{"krate":0,"index":1742},{"krate":0,"index":1743},{"krate":0,"index":1746},{"krate":0,"index":1749},{"krate":0,"index":1752},{"krate":0,"index":1755},{"krate":0,"index":1758},{"krate":0,"index":2112},{"krate":0,"index":2113},{"krate":0,"index":2115},{"krate":0,"index":2116},{"krate":0,"index":2119},{"krate":0,"index":2122},{"krate":0,"index":2125},{"krate":0,"index":2128},{"krate":0,"index":2129},{"krate":0,"index":2131},{"krate":0,"index":2193},{"krate":0,"index":2194},{"krate":0,"index":2197},{"krate":0,"index":2200},{"krate":0,"index":2203},{"krate":0,"index":2224},{"krate":0,"index":2225},{"krate":0,"index":2228},{"krate":0,"index":2231},{"krate":0,"index":2248},{"krate":0,"index":2249},{"krate":0,"index":2252},{"krate":0,"index":2253},{"krate":0,"index":2255},{"krate":0,"index":2258},{"krate":0,"index":2296},{"krate":0,"index":2297},{"krate":0,"index":2300}],"decl_id":null,"docs":" # Chrono: Date and Time for Rust","sig":null,"attributes":[{"value":"/ # Chrono: Date and Time for Rust","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":76,"byte_end":112,"line_start":4,"line_end":4,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":113,"byte_end":116,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ It aims to be a feature-complete superset of","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":117,"byte_end":165,"line_start":6,"line_end":6,"column_start":1,"column_end":49}},{"value":"/ the [time](https://github.com/rust-lang-deprecated/time) library.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":166,"byte_end":235,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"/ In particular,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":236,"byte_end":254,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":255,"byte_end":258,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ * Chrono strictly adheres to ISO 8601.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":259,"byte_end":301,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"/ * Chrono is timezone-aware by default, with separate timezone-naive types.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":302,"byte_end":380,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ * Chrono is space-optimal and (while not being the primary goal) reasonably efficient.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":381,"byte_end":471,"line_start":12,"line_end":12,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":472,"byte_end":475,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ There were several previous attempts to bring a good date and time library to Rust,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":476,"byte_end":563,"line_start":14,"line_end":14,"column_start":1,"column_end":88}},{"value":"/ which Chrono builds upon and should acknowledge:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":564,"byte_end":616,"line_start":15,"line_end":15,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":617,"byte_end":620,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * [Initial research on","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":621,"byte_end":647,"line_start":17,"line_end":17,"column_start":1,"column_end":27}},{"value":"/    the wiki](https://github.com/rust-lang/rust-wiki-backup/blob/master/Lib-datetime.md)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":648,"byte_end":739,"line_start":18,"line_end":18,"column_start":1,"column_end":92}},{"value":"/ * Dietrich Epp's [datetime-rs](https://github.com/depp/datetime-rs)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":740,"byte_end":811,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"/ * Luis de Bethencourt's [rust-datetime](https://github.com/luisbg/rust-datetime)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":812,"byte_end":896,"line_start":20,"line_end":20,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":897,"byte_end":900,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Any significant changes to Chrono are documented in","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":901,"byte_end":956,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/ the [`CHANGELOG.md`](https://github.com/chronotope/chrono/blob/main/CHANGELOG.md) file.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":957,"byte_end":1048,"line_start":23,"line_end":23,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1049,"byte_end":1052,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1053,"byte_end":1065,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1066,"byte_end":1069,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Put this in your `Cargo.toml`:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1070,"byte_end":1104,"line_start":27,"line_end":27,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1105,"byte_end":1108,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1109,"byte_end":1120,"line_start":29,"line_end":29,"column_start":1,"column_end":12}},{"value":"/ [dependencies]","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1121,"byte_end":1139,"line_start":30,"line_end":30,"column_start":1,"column_end":19}},{"value":"/ chrono = \"0.4\"","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1140,"byte_end":1158,"line_start":31,"line_end":31,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1159,"byte_end":1166,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1167,"byte_end":1170,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ### Features","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1171,"byte_end":1187,"line_start":34,"line_end":34,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1188,"byte_end":1191,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Chrono supports various runtime environments and operating systems, and has","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1192,"byte_end":1271,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/ several features that may be enabled or disabled.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1272,"byte_end":1325,"line_start":37,"line_end":37,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1326,"byte_end":1329,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Default features:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1330,"byte_end":1351,"line_start":39,"line_end":39,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1352,"byte_end":1355,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ - `alloc`: Enable features that depend on allocation (primarily string formatting)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1356,"byte_end":1442,"line_start":41,"line_end":41,"column_start":1,"column_end":87}},{"value":"/ - `std`: Enables functionality that depends on the standard library. This","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1443,"byte_end":1520,"line_start":42,"line_end":42,"column_start":1,"column_end":78}},{"value":"/   is a superset of `alloc` and adds interoperation with standard library types","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1521,"byte_end":1603,"line_start":43,"line_end":43,"column_start":1,"column_end":83}},{"value":"/   and traits.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1604,"byte_end":1621,"line_start":44,"line_end":44,"column_start":1,"column_end":18}},{"value":"/ - `clock`: Enables reading the system time (`now`) that depends on the standard library for","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1622,"byte_end":1717,"line_start":45,"line_end":45,"column_start":1,"column_end":96}},{"value":"/ UNIX-like operating systems and the Windows API (`winapi`) for Windows.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1718,"byte_end":1793,"line_start":46,"line_end":46,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1794,"byte_end":1797,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Optional features:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1798,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1821,"byte_end":1824,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ - [`serde`][]: Enable serialization/deserialization via serde.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1825,"byte_end":1891,"line_start":50,"line_end":50,"column_start":1,"column_end":67}},{"value":"/ - `unstable-locales`: Enable localization. This adds various methods with a","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1892,"byte_end":1971,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/   `_localized` suffix. The implementation and API may change or even be","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":1972,"byte_end":2047,"line_start":52,"line_end":52,"column_start":1,"column_end":76}},{"value":"/   removed in a patch release. Feedback welcome.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2048,"byte_end":2099,"line_start":53,"line_end":53,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2100,"byte_end":2103,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ [`serde`]: https://github.com/serde-rs/serde","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2104,"byte_end":2152,"line_start":55,"line_end":55,"column_start":1,"column_end":49}},{"value":"/ [wasm-bindgen]: https://github.com/rustwasm/wasm-bindgen","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2153,"byte_end":2213,"line_start":56,"line_end":56,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2214,"byte_end":2217,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ See the [cargo docs][] for examples of specifying features.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2218,"byte_end":2281,"line_start":58,"line_end":58,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2282,"byte_end":2285,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ [cargo docs]: https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choosing-features","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2286,"byte_end":2392,"line_start":60,"line_end":60,"column_start":1,"column_end":107}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2393,"byte_end":2396,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ## Overview","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2397,"byte_end":2412,"line_start":62,"line_end":62,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2413,"byte_end":2416,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ ### Duration","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2417,"byte_end":2433,"line_start":64,"line_end":64,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2434,"byte_end":2437,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Chrono currently uses its own [`Duration`] type to represent the magnitude","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2438,"byte_end":2516,"line_start":66,"line_end":66,"column_start":1,"column_end":79}},{"value":"/ of a time span. Since this has the same name as the newer, standard type for","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2517,"byte_end":2597,"line_start":67,"line_end":67,"column_start":1,"column_end":81}},{"value":"/ duration, the reference will refer this type as `OldDuration`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2598,"byte_end":2664,"line_start":68,"line_end":68,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2665,"byte_end":2668,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ Note that this is an \"accurate\" duration represented as seconds and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2669,"byte_end":2740,"line_start":70,"line_end":70,"column_start":1,"column_end":72}},{"value":"/ nanoseconds and does not represent \"nominal\" components such as days or","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2741,"byte_end":2816,"line_start":71,"line_end":71,"column_start":1,"column_end":76}},{"value":"/ months.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2817,"byte_end":2828,"line_start":72,"line_end":72,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2829,"byte_end":2832,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ When the `oldtime` feature is enabled, [`Duration`] is an alias for the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2833,"byte_end":2908,"line_start":74,"line_end":74,"column_start":1,"column_end":76}},{"value":"/ [`time::Duration`](https://docs.rs/time/0.1.40/time/struct.Duration.html)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2909,"byte_end":2986,"line_start":75,"line_end":75,"column_start":1,"column_end":78}},{"value":"/ type from v0.1 of the time crate. time v0.1 is deprecated, so new code","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":2987,"byte_end":3061,"line_start":76,"line_end":76,"column_start":1,"column_end":75}},{"value":"/ should disable the `oldtime` feature and use the `chrono::Duration` type","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3062,"byte_end":3138,"line_start":77,"line_end":77,"column_start":1,"column_end":77}},{"value":"/ instead. The `oldtime` feature is enabled by default for backwards","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3139,"byte_end":3209,"line_start":78,"line_end":78,"column_start":1,"column_end":71}},{"value":"/ compatibility, but future versions of Chrono are likely to remove the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3210,"byte_end":3283,"line_start":79,"line_end":79,"column_start":1,"column_end":74}},{"value":"/ feature entirely.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3284,"byte_end":3305,"line_start":80,"line_end":80,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3306,"byte_end":3309,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ Chrono does not yet natively support","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3310,"byte_end":3350,"line_start":82,"line_end":82,"column_start":1,"column_end":41}},{"value":"/ the standard [`Duration`](https://doc.rust-lang.org/std/time/struct.Duration.html) type,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3351,"byte_end":3443,"line_start":83,"line_end":83,"column_start":1,"column_end":93}},{"value":"/ but it will be supported in the future.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3444,"byte_end":3487,"line_start":84,"line_end":84,"column_start":1,"column_end":44}},{"value":"/ Meanwhile you can convert between two types with","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3488,"byte_end":3540,"line_start":85,"line_end":85,"column_start":1,"column_end":53}},{"value":"/ [`Duration::from_std`](https://docs.rs/time/0.1.40/time/struct.Duration.html#method.from_std)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3541,"byte_end":3638,"line_start":86,"line_end":86,"column_start":1,"column_end":98}},{"value":"/ and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3639,"byte_end":3646,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/ [`Duration::to_std`](https://docs.rs/time/0.1.40/time/struct.Duration.html#method.to_std)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3647,"byte_end":3740,"line_start":88,"line_end":88,"column_start":1,"column_end":94}},{"value":"/ methods.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3741,"byte_end":3753,"line_start":89,"line_end":89,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3754,"byte_end":3757,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ ### Date and Time","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3758,"byte_end":3779,"line_start":91,"line_end":91,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3780,"byte_end":3783,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ Chrono provides a","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3784,"byte_end":3805,"line_start":93,"line_end":93,"column_start":1,"column_end":22}},{"value":"/ [**`DateTime`**](./struct.DateTime.html)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3806,"byte_end":3850,"line_start":94,"line_end":94,"column_start":1,"column_end":45}},{"value":"/ type to represent a date and a time in a timezone.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3851,"byte_end":3905,"line_start":95,"line_end":95,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3906,"byte_end":3909,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ For more abstract moment-in-time tracking such as internal timekeeping","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3910,"byte_end":3984,"line_start":97,"line_end":97,"column_start":1,"column_end":75}},{"value":"/ that is unconcerned with timezones, consider","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":3985,"byte_end":4033,"line_start":98,"line_end":98,"column_start":1,"column_end":49}},{"value":"/ [`time::SystemTime`](https://doc.rust-lang.org/std/time/struct.SystemTime.html),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4034,"byte_end":4118,"line_start":99,"line_end":99,"column_start":1,"column_end":85}},{"value":"/ which tracks your system clock, or","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4119,"byte_end":4157,"line_start":100,"line_end":100,"column_start":1,"column_end":39}},{"value":"/ [`time::Instant`](https://doc.rust-lang.org/std/time/struct.Instant.html), which","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4158,"byte_end":4242,"line_start":101,"line_end":101,"column_start":1,"column_end":85}},{"value":"/ is an opaque but monotonically-increasing representation of a moment in time.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4243,"byte_end":4324,"line_start":102,"line_end":102,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4325,"byte_end":4328,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ `DateTime` is timezone-aware and must be constructed from","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4329,"byte_end":4390,"line_start":104,"line_end":104,"column_start":1,"column_end":62}},{"value":"/ the [**`TimeZone`**](./offset/trait.TimeZone.html) object,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4391,"byte_end":4453,"line_start":105,"line_end":105,"column_start":1,"column_end":63}},{"value":"/ which defines how the local date is converted to and back from the UTC date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4454,"byte_end":4534,"line_start":106,"line_end":106,"column_start":1,"column_end":81}},{"value":"/ There are three well-known `TimeZone` implementations:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4535,"byte_end":4593,"line_start":107,"line_end":107,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4594,"byte_end":4597,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ * [**`Utc`**](./offset/struct.Utc.html) specifies the UTC time zone. It is most efficient.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4598,"byte_end":4692,"line_start":109,"line_end":109,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4693,"byte_end":4696,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ * [**`Local`**](./offset/struct.Local.html) specifies the system local time zone.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4697,"byte_end":4782,"line_start":111,"line_end":111,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4783,"byte_end":4786,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ * [**`FixedOffset`**](./offset/struct.FixedOffset.html) specifies","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4787,"byte_end":4856,"line_start":113,"line_end":113,"column_start":1,"column_end":70}},{"value":"/   an arbitrary, fixed time zone such as UTC+09:00 or UTC-10:30.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4857,"byte_end":4924,"line_start":114,"line_end":114,"column_start":1,"column_end":68}},{"value":"/   This often results from the parsed textual date and time.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4925,"byte_end":4988,"line_start":115,"line_end":115,"column_start":1,"column_end":64}},{"value":"/   Since it stores the most information and does not depend on the system environment,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":4989,"byte_end":5078,"line_start":116,"line_end":116,"column_start":1,"column_end":90}},{"value":"/   you would want to normalize other `TimeZone`s into this type.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5079,"byte_end":5146,"line_start":117,"line_end":117,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5147,"byte_end":5150,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ `DateTime`s with different `TimeZone` types are distinct and do not mix,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5151,"byte_end":5227,"line_start":119,"line_end":119,"column_start":1,"column_end":77}},{"value":"/ but can be converted to each other using","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5228,"byte_end":5272,"line_start":120,"line_end":120,"column_start":1,"column_end":45}},{"value":"/ the [`DateTime::with_timezone`](./struct.DateTime.html#method.with_timezone) method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5273,"byte_end":5361,"line_start":121,"line_end":121,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5362,"byte_end":5365,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ You can get the current date and time in the UTC time zone","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5366,"byte_end":5428,"line_start":123,"line_end":123,"column_start":1,"column_end":63}},{"value":"/ ([`Utc::now()`](./offset/struct.Utc.html#method.now))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5429,"byte_end":5486,"line_start":124,"line_end":124,"column_start":1,"column_end":58}},{"value":"/ or in the local time zone","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5487,"byte_end":5516,"line_start":125,"line_end":125,"column_start":1,"column_end":30}},{"value":"/ ([`Local::now()`](./offset/struct.Local.html#method.now)).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5517,"byte_end":5579,"line_start":126,"line_end":126,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5580,"byte_end":5583,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5584,"byte_end":5595,"line_start":128,"line_end":128,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5596,"byte_end":5623,"line_start":129,"line_end":129,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5624,"byte_end":5627,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ let utc: DateTime<Utc> = Utc::now();       // e.g. `2014-11-28T12:45:59.324310806Z`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5628,"byte_end":5715,"line_start":131,"line_end":131,"column_start":1,"column_end":88}},{"value":"/ let local: DateTime<Local> = Local::now(); // e.g. `2014-11-28T21:45:59.324310806+09:00`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5716,"byte_end":5808,"line_start":132,"line_end":132,"column_start":1,"column_end":93}},{"value":"/ # let _ = utc; let _ = local;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5809,"byte_end":5842,"line_start":133,"line_end":133,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5843,"byte_end":5850,"line_start":134,"line_end":134,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5851,"byte_end":5854,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ Alternatively, you can create your own date and time.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5855,"byte_end":5912,"line_start":136,"line_end":136,"column_start":1,"column_end":58}},{"value":"/ This is a bit verbose due to Rust's lack of function and method overloading,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5913,"byte_end":5993,"line_start":137,"line_end":137,"column_start":1,"column_end":81}},{"value":"/ but in turn we get a rich combination of initialization methods.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":5994,"byte_end":6062,"line_start":138,"line_end":138,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6063,"byte_end":6066,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6067,"byte_end":6078,"line_start":140,"line_end":140,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6079,"byte_end":6106,"line_start":141,"line_end":141,"column_start":1,"column_end":28}},{"value":"/ use chrono::offset::LocalResult;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6107,"byte_end":6143,"line_start":142,"line_end":142,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6144,"byte_end":6147,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 7, 8).and_hms(9, 10, 11); // `2014-07-08T09:10:11Z`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6148,"byte_end":6226,"line_start":144,"line_end":144,"column_start":1,"column_end":79}},{"value":"/ // July 8 is 188th day of the year 2014 (`o` for \"ordinal\")","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6227,"byte_end":6290,"line_start":145,"line_end":145,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(dt, Utc.yo(2014, 189).and_hms(9, 10, 11));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6291,"byte_end":6348,"line_start":146,"line_end":146,"column_start":1,"column_end":58}},{"value":"/ // July 8 is Tuesday in ISO week 28 of the year 2014.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6349,"byte_end":6406,"line_start":147,"line_end":147,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(dt, Utc.isoywd(2014, 28, Weekday::Tue).and_hms(9, 10, 11));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6407,"byte_end":6481,"line_start":148,"line_end":148,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6482,"byte_end":6485,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12); // `2014-07-08T09:10:11.012Z`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6486,"byte_end":6578,"line_start":150,"line_end":150,"column_start":1,"column_end":93}},{"value":"/ assert_eq!(dt, Utc.ymd(2014, 7, 8).and_hms_micro(9, 10, 11, 12_000));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6579,"byte_end":6652,"line_start":151,"line_end":151,"column_start":1,"column_end":74}},{"value":"/ assert_eq!(dt, Utc.ymd(2014, 7, 8).and_hms_nano(9, 10, 11, 12_000_000));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6653,"byte_end":6729,"line_start":152,"line_end":152,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6730,"byte_end":6733,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ // dynamic verification","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6734,"byte_end":6761,"line_start":154,"line_end":154,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 7, 8).and_hms_opt(21, 15, 33),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6762,"byte_end":6825,"line_start":155,"line_end":155,"column_start":1,"column_end":64}},{"value":"/            LocalResult::Single(Utc.ymd(2014, 7, 8).and_hms(21, 15, 33)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6826,"byte_end":6903,"line_start":156,"line_end":156,"column_start":1,"column_end":78}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 7, 8).and_hms_opt(80, 15, 33), LocalResult::None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6904,"byte_end":6987,"line_start":157,"line_end":157,"column_start":1,"column_end":84}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 7, 38).and_hms_opt(21, 15, 33), LocalResult::None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":6988,"byte_end":7072,"line_start":158,"line_end":158,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7073,"byte_end":7076,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ // other time zone objects can be used to construct a local datetime.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7077,"byte_end":7150,"line_start":160,"line_end":160,"column_start":1,"column_end":74}},{"value":"/ // obviously, `local_dt` is normally different from `dt`, but `fixed_dt` should be identical.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7151,"byte_end":7248,"line_start":161,"line_end":161,"column_start":1,"column_end":98}},{"value":"/ let local_dt = Local.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7249,"byte_end":7319,"line_start":162,"line_end":162,"column_start":1,"column_end":71}},{"value":"/ let fixed_dt = FixedOffset::east(9 * 3600).ymd(2014, 7, 8).and_hms_milli(18, 10, 11, 12);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7320,"byte_end":7413,"line_start":163,"line_end":163,"column_start":1,"column_end":94}},{"value":"/ assert_eq!(dt, fixed_dt);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7414,"byte_end":7443,"line_start":164,"line_end":164,"column_start":1,"column_end":30}},{"value":"/ # let _ = local_dt;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7444,"byte_end":7467,"line_start":165,"line_end":165,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7468,"byte_end":7475,"line_start":166,"line_end":166,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7476,"byte_end":7479,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ Various properties are available to the date and time, and can be altered individually.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7480,"byte_end":7571,"line_start":168,"line_end":168,"column_start":1,"column_end":92}},{"value":"/ Most of them are defined in the traits [`Datelike`](./trait.Datelike.html) and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7572,"byte_end":7654,"line_start":169,"line_end":169,"column_start":1,"column_end":83}},{"value":"/ [`Timelike`](./trait.Timelike.html) which you should `use` before.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7655,"byte_end":7725,"line_start":170,"line_end":170,"column_start":1,"column_end":71}},{"value":"/ Addition and subtraction is also supported.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7726,"byte_end":7773,"line_start":171,"line_end":171,"column_start":1,"column_end":48}},{"value":"/ The following illustrates most supported operations to the date and time:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7774,"byte_end":7851,"line_start":172,"line_end":172,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7852,"byte_end":7855,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7856,"byte_end":7867,"line_start":174,"line_end":174,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7868,"byte_end":7895,"line_start":175,"line_end":175,"column_start":1,"column_end":28}},{"value":"/ use chrono::Duration;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7896,"byte_end":7921,"line_start":176,"line_end":176,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7922,"byte_end":7925,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ // assume this returned `2014-11-28T21:45:59.324310806+09:00`:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7926,"byte_end":7992,"line_start":178,"line_end":178,"column_start":1,"column_end":67}},{"value":"/ let dt = FixedOffset::east(9*3600).ymd(2014, 11, 28).and_hms_nano(21, 45, 59, 324310806);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":7993,"byte_end":8086,"line_start":179,"line_end":179,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8087,"byte_end":8090,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ // property accessors","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8091,"byte_end":8116,"line_start":181,"line_end":181,"column_start":1,"column_end":26}},{"value":"/ assert_eq!((dt.year(), dt.month(), dt.day()), (2014, 11, 28));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8117,"byte_end":8183,"line_start":182,"line_end":182,"column_start":1,"column_end":67}},{"value":"/ assert_eq!((dt.month0(), dt.day0()), (10, 27)); // for unfortunate souls","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8184,"byte_end":8260,"line_start":183,"line_end":183,"column_start":1,"column_end":77}},{"value":"/ assert_eq!((dt.hour(), dt.minute(), dt.second()), (21, 45, 59));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8261,"byte_end":8329,"line_start":184,"line_end":184,"column_start":1,"column_end":69}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8330,"byte_end":8373,"line_start":185,"line_end":185,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(dt.weekday().number_from_monday(), 5); // Mon=1, ..., Sun=7","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8374,"byte_end":8448,"line_start":186,"line_end":186,"column_start":1,"column_end":75}},{"value":"/ assert_eq!(dt.ordinal(), 332); // the day of year","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8449,"byte_end":8502,"line_start":187,"line_end":187,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(dt.num_days_from_ce(), 735565); // the number of days from and including Jan 1, 1","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8503,"byte_end":8599,"line_start":188,"line_end":188,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8600,"byte_end":8603,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ // time zone accessor and manipulation","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8604,"byte_end":8646,"line_start":190,"line_end":190,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(dt.offset().fix().local_minus_utc(), 9 * 3600);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8647,"byte_end":8709,"line_start":191,"line_end":191,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(dt.timezone(), FixedOffset::east(9 * 3600));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8710,"byte_end":8769,"line_start":192,"line_end":192,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(dt.with_timezone(&Utc), Utc.ymd(2014, 11, 28).and_hms_nano(12, 45, 59, 324310806));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8770,"byte_end":8868,"line_start":193,"line_end":193,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8869,"byte_end":8872,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ // a sample of property manipulations (validates dynamically)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8873,"byte_end":8938,"line_start":195,"line_end":195,"column_start":1,"column_end":66}},{"value":"/ assert_eq!(dt.with_day(29).unwrap().weekday(), Weekday::Sat); // 2014-11-29 is Saturday","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":8939,"byte_end":9030,"line_start":196,"line_end":196,"column_start":1,"column_end":92}},{"value":"/ assert_eq!(dt.with_day(32), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9031,"byte_end":9069,"line_start":197,"line_end":197,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(dt.with_year(-300).unwrap().num_days_from_ce(), -109606); // November 29, 301 BCE","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9070,"byte_end":9166,"line_start":198,"line_end":198,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9167,"byte_end":9170,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ // arithmetic operations","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9171,"byte_end":9199,"line_start":200,"line_end":200,"column_start":1,"column_end":29}},{"value":"/ let dt1 = Utc.ymd(2014, 11, 14).and_hms(8, 9, 10);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9200,"byte_end":9254,"line_start":201,"line_end":201,"column_start":1,"column_end":55}},{"value":"/ let dt2 = Utc.ymd(2014, 11, 14).and_hms(10, 9, 8);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9255,"byte_end":9309,"line_start":202,"line_end":202,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(dt1.signed_duration_since(dt2), Duration::seconds(-2 * 3600 + 2));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9310,"byte_end":9391,"line_start":203,"line_end":203,"column_start":1,"column_end":82}},{"value":"/ assert_eq!(dt2.signed_duration_since(dt1), Duration::seconds(2 * 3600 - 2));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9392,"byte_end":9472,"line_start":204,"line_end":204,"column_start":1,"column_end":81}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 0, 0) + Duration::seconds(1_000_000_000),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9473,"byte_end":9560,"line_start":205,"line_end":205,"column_start":1,"column_end":88}},{"value":"/            Utc.ymd(2001, 9, 9).and_hms(1, 46, 40));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9561,"byte_end":9616,"line_start":206,"line_end":206,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 0, 0) - Duration::seconds(1_000_000_000),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9617,"byte_end":9704,"line_start":207,"line_end":207,"column_start":1,"column_end":88}},{"value":"/            Utc.ymd(1938, 4, 24).and_hms(22, 13, 20));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9705,"byte_end":9762,"line_start":208,"line_end":208,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9763,"byte_end":9770,"line_start":209,"line_end":209,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9771,"byte_end":9774,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ ### Formatting and Parsing","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9775,"byte_end":9805,"line_start":211,"line_end":211,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9806,"byte_end":9809,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ Formatting is done via the [`format`](./struct.DateTime.html#method.format) method,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9810,"byte_end":9897,"line_start":213,"line_end":213,"column_start":1,"column_end":88}},{"value":"/ which format is equivalent to the familiar `strftime` format.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9898,"byte_end":9963,"line_start":214,"line_end":214,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9964,"byte_end":9967,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ See [`format::strftime`](./format/strftime/index.html#specifiers)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":9968,"byte_end":10037,"line_start":216,"line_end":216,"column_start":1,"column_end":70}},{"value":"/ documentation for full syntax and list of specifiers.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10038,"byte_end":10095,"line_start":217,"line_end":217,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10096,"byte_end":10099,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ The default `to_string` method and `{:?}` specifier also give a reasonable representation.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10100,"byte_end":10194,"line_start":219,"line_end":219,"column_start":1,"column_end":95}},{"value":"/ Chrono also provides [`to_rfc2822`](./struct.DateTime.html#method.to_rfc2822) and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10195,"byte_end":10280,"line_start":220,"line_end":220,"column_start":1,"column_end":86}},{"value":"/ [`to_rfc3339`](./struct.DateTime.html#method.to_rfc3339) methods","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10281,"byte_end":10349,"line_start":221,"line_end":221,"column_start":1,"column_end":69}},{"value":"/ for well-known formats.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10350,"byte_end":10377,"line_start":222,"line_end":222,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10378,"byte_end":10381,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ Chrono now also provides date formatting in almost any language without the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10382,"byte_end":10461,"line_start":224,"line_end":224,"column_start":1,"column_end":80}},{"value":"/ help of an additional C library. This functionality is under the feature","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10462,"byte_end":10538,"line_start":225,"line_end":225,"column_start":1,"column_end":77}},{"value":"/ `unstable-locales`:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10539,"byte_end":10562,"line_start":226,"line_end":226,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10563,"byte_end":10566,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10567,"byte_end":10578,"line_start":228,"line_end":228,"column_start":1,"column_end":12}},{"value":"/ chrono = { version = \"0.4\", features = [\"unstable-locales\"] }","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10579,"byte_end":10644,"line_start":229,"line_end":229,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10645,"byte_end":10652,"line_start":230,"line_end":230,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10653,"byte_end":10656,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/ The `unstable-locales` feature requires and implies at least the `alloc` feature.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10657,"byte_end":10742,"line_start":232,"line_end":232,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10743,"byte_end":10746,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10747,"byte_end":10758,"line_start":234,"line_end":234,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10759,"byte_end":10786,"line_start":235,"line_end":235,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10787,"byte_end":10790,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ # #[cfg(feature = \"unstable-locales\")]","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10791,"byte_end":10833,"line_start":237,"line_end":237,"column_start":1,"column_end":43}},{"value":"/ # fn test() {","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10834,"byte_end":10851,"line_start":238,"line_end":238,"column_start":1,"column_end":18}},{"value":"/ let dt = Utc.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10852,"byte_end":10905,"line_start":239,"line_end":239,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2014-11-28 12:00:09\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10906,"byte_end":10988,"line_start":240,"line_end":240,"column_start":1,"column_end":83}},{"value":"/ assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), \"Fri Nov 28 12:00:09 2014\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":10989,"byte_end":11073,"line_start":241,"line_end":241,"column_start":1,"column_end":85}},{"value":"/ assert_eq!(dt.format_localized(\"%A %e %B %Y, %T\", Locale::fr_BE).to_string(), \"vendredi 28 novembre 2014, 12:00:09\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11074,"byte_end":11195,"line_start":242,"line_end":242,"column_start":1,"column_end":122}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11196,"byte_end":11199,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), dt.format(\"%c\").to_string());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11200,"byte_end":11285,"line_start":244,"line_end":244,"column_start":1,"column_end":86}},{"value":"/ assert_eq!(dt.to_string(), \"2014-11-28 12:00:09 UTC\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11286,"byte_end":11344,"line_start":245,"line_end":245,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(dt.to_rfc2822(), \"Fri, 28 Nov 2014 12:00:09 +0000\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11345,"byte_end":11412,"line_start":246,"line_end":246,"column_start":1,"column_end":68}},{"value":"/ assert_eq!(dt.to_rfc3339(), \"2014-11-28T12:00:09+00:00\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11413,"byte_end":11474,"line_start":247,"line_end":247,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2014-11-28T12:00:09Z\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11475,"byte_end":11535,"line_start":248,"line_end":248,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11536,"byte_end":11539,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ // Note that milli/nanoseconds are only printed if they are non-zero","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11540,"byte_end":11612,"line_start":250,"line_end":250,"column_start":1,"column_end":73}},{"value":"/ let dt_nano = Utc.ymd(2014, 11, 28).and_hms_nano(12, 0, 9, 1);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11613,"byte_end":11679,"line_start":251,"line_end":251,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(format!(\"{:?}\", dt_nano), \"2014-11-28T12:00:09.000000001Z\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11680,"byte_end":11755,"line_start":252,"line_end":252,"column_start":1,"column_end":76}},{"value":"/ # }","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11756,"byte_end":11763,"line_start":253,"line_end":253,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(not(feature = \"unstable-locales\"))]","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11764,"byte_end":11811,"line_start":254,"line_end":254,"column_start":1,"column_end":48}},{"value":"/ # fn test() {}","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11812,"byte_end":11830,"line_start":255,"line_end":255,"column_start":1,"column_end":19}},{"value":"/ # if cfg!(feature = \"unstable-locales\") {","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11831,"byte_end":11876,"line_start":256,"line_end":256,"column_start":1,"column_end":46}},{"value":"/ #    test();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11877,"byte_end":11893,"line_start":257,"line_end":257,"column_start":1,"column_end":17}},{"value":"/ # }","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11894,"byte_end":11901,"line_start":258,"line_end":258,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11902,"byte_end":11909,"line_start":259,"line_end":259,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11910,"byte_end":11913,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ Parsing can be done with three methods:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11914,"byte_end":11957,"line_start":261,"line_end":261,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11958,"byte_end":11961,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ 1. The standard [`FromStr`](https://doc.rust-lang.org/std/str/trait.FromStr.html) trait","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":11962,"byte_end":12053,"line_start":263,"line_end":263,"column_start":1,"column_end":92}},{"value":"/    (and [`parse`](https://doc.rust-lang.org/std/primitive.str.html#method.parse) method","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12054,"byte_end":12145,"line_start":264,"line_end":264,"column_start":1,"column_end":92}},{"value":"/    on a string) can be used for parsing `DateTime<FixedOffset>`, `DateTime<Utc>` and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12146,"byte_end":12234,"line_start":265,"line_end":265,"column_start":1,"column_end":89}},{"value":"/    `DateTime<Local>` values. This parses what the `{:?}`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12235,"byte_end":12295,"line_start":266,"line_end":266,"column_start":1,"column_end":61}},{"value":"/    ([`std::fmt::Debug`](https://doc.rust-lang.org/std/fmt/trait.Debug.html))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12296,"byte_end":12376,"line_start":267,"line_end":267,"column_start":1,"column_end":81}},{"value":"/    format specifier prints, and requires the offset to be present.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12377,"byte_end":12447,"line_start":268,"line_end":268,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12448,"byte_end":12451,"line_start":269,"line_end":269,"column_start":1,"column_end":4}},{"value":"/ 2. [`DateTime::parse_from_str`](./struct.DateTime.html#method.parse_from_str) parses","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12452,"byte_end":12540,"line_start":270,"line_end":270,"column_start":1,"column_end":89}},{"value":"/    a date and time with offsets and returns `DateTime<FixedOffset>`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12541,"byte_end":12613,"line_start":271,"line_end":271,"column_start":1,"column_end":73}},{"value":"/    This should be used when the offset is a part of input and the caller cannot guess that.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12614,"byte_end":12709,"line_start":272,"line_end":272,"column_start":1,"column_end":96}},{"value":"/    It *cannot* be used when the offset can be missing.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12710,"byte_end":12768,"line_start":273,"line_end":273,"column_start":1,"column_end":59}},{"value":"/    [`DateTime::parse_from_rfc2822`](./struct.DateTime.html#method.parse_from_rfc2822)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12769,"byte_end":12858,"line_start":274,"line_end":274,"column_start":1,"column_end":90}},{"value":"/    and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12859,"byte_end":12869,"line_start":275,"line_end":275,"column_start":1,"column_end":11}},{"value":"/    [`DateTime::parse_from_rfc3339`](./struct.DateTime.html#method.parse_from_rfc3339)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12870,"byte_end":12959,"line_start":276,"line_end":276,"column_start":1,"column_end":90}},{"value":"/    are similar but for well-known formats.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":12960,"byte_end":13006,"line_start":277,"line_end":277,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13007,"byte_end":13010,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ 3. [`Offset::datetime_from_str`](./offset/trait.TimeZone.html#method.datetime_from_str) is","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13011,"byte_end":13105,"line_start":279,"line_end":279,"column_start":1,"column_end":95}},{"value":"/    similar but returns `DateTime` of given offset.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13106,"byte_end":13160,"line_start":280,"line_end":280,"column_start":1,"column_end":55}},{"value":"/    When the explicit offset is missing from the input, it simply uses given offset.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13161,"byte_end":13248,"line_start":281,"line_end":281,"column_start":1,"column_end":88}},{"value":"/    It issues an error when the input contains an explicit offset different","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13249,"byte_end":13327,"line_start":282,"line_end":282,"column_start":1,"column_end":79}},{"value":"/    from the current offset.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13328,"byte_end":13359,"line_start":283,"line_end":283,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13360,"byte_end":13363,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ More detailed control over the parsing process is available via","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13364,"byte_end":13431,"line_start":285,"line_end":285,"column_start":1,"column_end":68}},{"value":"/ [`format`](./format/index.html) module.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13432,"byte_end":13475,"line_start":286,"line_end":286,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13476,"byte_end":13479,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13480,"byte_end":13491,"line_start":288,"line_end":288,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13492,"byte_end":13519,"line_start":289,"line_end":289,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13520,"byte_end":13523,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13524,"byte_end":13577,"line_start":291,"line_end":291,"column_start":1,"column_end":54}},{"value":"/ let fixed_dt = dt.with_timezone(&FixedOffset::east(9*3600));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13578,"byte_end":13642,"line_start":292,"line_end":292,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13643,"byte_end":13646,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ // method 1","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13647,"byte_end":13662,"line_start":294,"line_end":294,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(\"2014-11-28T12:00:09Z\".parse::<DateTime<Utc>>(), Ok(dt.clone()));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13663,"byte_end":13743,"line_start":295,"line_end":295,"column_start":1,"column_end":81}},{"value":"/ assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<Utc>>(), Ok(dt.clone()));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13744,"byte_end":13829,"line_start":296,"line_end":296,"column_start":1,"column_end":86}},{"value":"/ assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<FixedOffset>>(), Ok(fixed_dt.clone()));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13830,"byte_end":13929,"line_start":297,"line_end":297,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13930,"byte_end":13933,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"/ // method 2","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13934,"byte_end":13949,"line_start":299,"line_end":299,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(DateTime::parse_from_str(\"2014-11-28 21:00:09 +09:00\", \"%Y-%m-%d %H:%M:%S %z\"),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":13950,"byte_end":14044,"line_start":300,"line_end":300,"column_start":1,"column_end":95}},{"value":"/            Ok(fixed_dt.clone()));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14045,"byte_end":14082,"line_start":301,"line_end":301,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(DateTime::parse_from_rfc2822(\"Fri, 28 Nov 2014 21:00:09 +0900\"),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14083,"byte_end":14162,"line_start":302,"line_end":302,"column_start":1,"column_end":80}},{"value":"/            Ok(fixed_dt.clone()));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14163,"byte_end":14200,"line_start":303,"line_end":303,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(DateTime::parse_from_rfc3339(\"2014-11-28T21:00:09+09:00\"), Ok(fixed_dt.clone()));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14201,"byte_end":14297,"line_start":304,"line_end":304,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14298,"byte_end":14301,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ // method 3","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14302,"byte_end":14317,"line_start":306,"line_end":306,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(Utc.datetime_from_str(\"2014-11-28 12:00:09\", \"%Y-%m-%d %H:%M:%S\"), Ok(dt.clone()));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14318,"byte_end":14416,"line_start":307,"line_end":307,"column_start":1,"column_end":99}},{"value":"/ assert_eq!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\"), Ok(dt.clone()));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14417,"byte_end":14517,"line_start":308,"line_end":308,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14518,"byte_end":14521,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ // oops, the year is missing!","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14522,"byte_end":14555,"line_start":310,"line_end":310,"column_start":1,"column_end":34}},{"value":"/ assert!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14556,"byte_end":14641,"line_start":311,"line_end":311,"column_start":1,"column_end":86}},{"value":"/ // oops, the format string does not include the year at all!","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14642,"byte_end":14706,"line_start":312,"line_end":312,"column_start":1,"column_end":65}},{"value":"/ assert!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T\").is_err());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14707,"byte_end":14789,"line_start":313,"line_end":313,"column_start":1,"column_end":83}},{"value":"/ // oops, the weekday is incorrect!","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14790,"byte_end":14828,"line_start":314,"line_end":314,"column_start":1,"column_end":39}},{"value":"/ assert!(Utc.datetime_from_str(\"Sat Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14829,"byte_end":14919,"line_start":315,"line_end":315,"column_start":1,"column_end":91}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14920,"byte_end":14927,"line_start":316,"line_end":316,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14928,"byte_end":14931,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ Again : See [`format::strftime`](./format/strftime/index.html#specifiers)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":14932,"byte_end":15009,"line_start":318,"line_end":318,"column_start":1,"column_end":78}},{"value":"/ documentation for full syntax and list of specifiers.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15010,"byte_end":15067,"line_start":319,"line_end":319,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15068,"byte_end":15071,"line_start":320,"line_end":320,"column_start":1,"column_end":4}},{"value":"/ ### Conversion from and to EPOCH timestamps","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15072,"byte_end":15119,"line_start":321,"line_end":321,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15120,"byte_end":15123,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/ Use [`Utc.timestamp(seconds, nanoseconds)`](./offset/trait.TimeZone.html#method.timestamp)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15124,"byte_end":15218,"line_start":323,"line_end":323,"column_start":1,"column_end":95}},{"value":"/ to construct a [`DateTime<Utc>`](./struct.DateTime.html) from a UNIX timestamp","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15219,"byte_end":15301,"line_start":324,"line_end":324,"column_start":1,"column_end":83}},{"value":"/ (seconds, nanoseconds that passed since January 1st 1970).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15302,"byte_end":15364,"line_start":325,"line_end":325,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15365,"byte_end":15368,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ Use [`DateTime.timestamp`](./struct.DateTime.html#method.timestamp) to get the timestamp (in seconds)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15369,"byte_end":15474,"line_start":327,"line_end":327,"column_start":1,"column_end":106}},{"value":"/ from a [`DateTime`](./struct.DateTime.html). Additionally, you can use","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15475,"byte_end":15549,"line_start":328,"line_end":328,"column_start":1,"column_end":75}},{"value":"/ [`DateTime.timestamp_subsec_nanos`](./struct.DateTime.html#method.timestamp_subsec_nanos)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15550,"byte_end":15643,"line_start":329,"line_end":329,"column_start":1,"column_end":94}},{"value":"/ to get the number of additional number of nanoseconds.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15644,"byte_end":15702,"line_start":330,"line_end":330,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15703,"byte_end":15706,"line_start":331,"line_end":331,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15707,"byte_end":15718,"line_start":332,"line_end":332,"column_start":1,"column_end":12}},{"value":"/ // We need the trait in scope to use Utc::timestamp().","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15719,"byte_end":15777,"line_start":333,"line_end":333,"column_start":1,"column_end":59}},{"value":"/ use chrono::{DateTime, TimeZone, Utc};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15778,"byte_end":15820,"line_start":334,"line_end":334,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15821,"byte_end":15824,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ // Construct a datetime from epoch:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15825,"byte_end":15864,"line_start":336,"line_end":336,"column_start":1,"column_end":40}},{"value":"/ let dt = Utc.timestamp(1_500_000_000, 0);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15865,"byte_end":15910,"line_start":337,"line_end":337,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(dt.to_rfc2822(), \"Fri, 14 Jul 2017 02:40:00 +0000\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15911,"byte_end":15978,"line_start":338,"line_end":338,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15979,"byte_end":15982,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ // Get epoch value from a datetime:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":15983,"byte_end":16022,"line_start":340,"line_end":340,"column_start":1,"column_end":40}},{"value":"/ let dt = DateTime::parse_from_rfc2822(\"Fri, 14 Jul 2017 02:40:00 +0000\").unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16023,"byte_end":16109,"line_start":341,"line_end":341,"column_start":1,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp(), 1_500_000_000);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16110,"byte_end":16156,"line_start":342,"line_end":342,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16157,"byte_end":16164,"line_start":343,"line_end":343,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16165,"byte_end":16168,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ ### Individual date","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16169,"byte_end":16192,"line_start":345,"line_end":345,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16193,"byte_end":16196,"line_start":346,"line_end":346,"column_start":1,"column_end":4}},{"value":"/ Chrono also provides an individual date type ([**`Date`**](./struct.Date.html)).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16197,"byte_end":16281,"line_start":347,"line_end":347,"column_start":1,"column_end":85}},{"value":"/ It also has time zones attached, and have to be constructed via time zones.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16282,"byte_end":16361,"line_start":348,"line_end":348,"column_start":1,"column_end":80}},{"value":"/ Most operations available to `DateTime` are also available to `Date` whenever appropriate.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16362,"byte_end":16456,"line_start":349,"line_end":349,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16457,"byte_end":16460,"line_start":350,"line_end":350,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16461,"byte_end":16472,"line_start":351,"line_end":351,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16473,"byte_end":16500,"line_start":352,"line_end":352,"column_start":1,"column_end":28}},{"value":"/ use chrono::offset::LocalResult;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16501,"byte_end":16537,"line_start":353,"line_end":353,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16538,"byte_end":16541,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"/ # // these *may* fail, but only very rarely. just rerun the test if you were that unfortunate ;)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16542,"byte_end":16642,"line_start":355,"line_end":355,"column_start":1,"column_end":101}},{"value":"/ assert_eq!(Utc::today(), Utc::now().date());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16643,"byte_end":16691,"line_start":356,"line_end":356,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(Local::today(), Local::now().date());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16692,"byte_end":16744,"line_start":357,"line_end":357,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16745,"byte_end":16748,"line_start":358,"line_end":358,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(Utc.ymd(2014, 11, 28).weekday(), Weekday::Fri);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16749,"byte_end":16811,"line_start":359,"line_end":359,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 11, 31), LocalResult::None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16812,"byte_end":16873,"line_start":360,"line_end":360,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(Utc.ymd(2014, 11, 28).and_hms_milli(7, 8, 9, 10).format(\"%H%M%S\").to_string(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16874,"byte_end":16967,"line_start":361,"line_end":361,"column_start":1,"column_end":94}},{"value":"/            \"070809\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16968,"byte_end":16993,"line_start":362,"line_end":362,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":16994,"byte_end":17001,"line_start":363,"line_end":363,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17002,"byte_end":17005,"line_start":364,"line_end":364,"column_start":1,"column_end":4}},{"value":"/ There is no timezone-aware `Time` due to the lack of usefulness and also the complexity.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17006,"byte_end":17098,"line_start":365,"line_end":365,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17099,"byte_end":17102,"line_start":366,"line_end":366,"column_start":1,"column_end":4}},{"value":"/ `DateTime` has [`date`](./struct.DateTime.html#method.date) method","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17103,"byte_end":17173,"line_start":367,"line_end":367,"column_start":1,"column_end":71}},{"value":"/ which returns a `Date` which represents its date component.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17174,"byte_end":17237,"line_start":368,"line_end":368,"column_start":1,"column_end":64}},{"value":"/ There is also a [`time`](./struct.DateTime.html#method.time) method,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17238,"byte_end":17310,"line_start":369,"line_end":369,"column_start":1,"column_end":73}},{"value":"/ which simply returns a naive local time described below.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17311,"byte_end":17371,"line_start":370,"line_end":370,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17372,"byte_end":17375,"line_start":371,"line_end":371,"column_start":1,"column_end":4}},{"value":"/ ### Naive date and time","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17376,"byte_end":17403,"line_start":372,"line_end":372,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17404,"byte_end":17407,"line_start":373,"line_end":373,"column_start":1,"column_end":4}},{"value":"/ Chrono provides naive counterparts to `Date`, (non-existent) `Time` and `DateTime`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17408,"byte_end":17494,"line_start":374,"line_end":374,"column_start":1,"column_end":87}},{"value":"/ as [**`NaiveDate`**](./naive/struct.NaiveDate.html),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17495,"byte_end":17551,"line_start":375,"line_end":375,"column_start":1,"column_end":57}},{"value":"/ [**`NaiveTime`**](./naive/struct.NaiveTime.html) and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17552,"byte_end":17608,"line_start":376,"line_end":376,"column_start":1,"column_end":57}},{"value":"/ [**`NaiveDateTime`**](./naive/struct.NaiveDateTime.html) respectively.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17609,"byte_end":17683,"line_start":377,"line_end":377,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17684,"byte_end":17687,"line_start":378,"line_end":378,"column_start":1,"column_end":4}},{"value":"/ They have almost equivalent interfaces as their timezone-aware twins,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17688,"byte_end":17761,"line_start":379,"line_end":379,"column_start":1,"column_end":74}},{"value":"/ but are not associated to time zones obviously and can be quite low-level.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17762,"byte_end":17840,"line_start":380,"line_end":380,"column_start":1,"column_end":79}},{"value":"/ They are mostly useful for building blocks for higher-level types.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17841,"byte_end":17911,"line_start":381,"line_end":381,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17912,"byte_end":17915,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ Timezone-aware `DateTime` and `Date` types have two methods returning naive versions:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":17916,"byte_end":18005,"line_start":383,"line_end":383,"column_start":1,"column_end":90}},{"value":"/ [`naive_local`](./struct.DateTime.html#method.naive_local) returns","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18006,"byte_end":18076,"line_start":384,"line_end":384,"column_start":1,"column_end":71}},{"value":"/ a view to the naive local time,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18077,"byte_end":18112,"line_start":385,"line_end":385,"column_start":1,"column_end":36}},{"value":"/ and [`naive_utc`](./struct.DateTime.html#method.naive_utc) returns","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18113,"byte_end":18183,"line_start":386,"line_end":386,"column_start":1,"column_end":71}},{"value":"/ a view to the naive UTC time.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18184,"byte_end":18217,"line_start":387,"line_end":387,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18218,"byte_end":18221,"line_start":388,"line_end":388,"column_start":1,"column_end":4}},{"value":"/ ## Limitations","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18222,"byte_end":18240,"line_start":389,"line_end":389,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18241,"byte_end":18244,"line_start":390,"line_end":390,"column_start":1,"column_end":4}},{"value":"/ Only proleptic Gregorian calendar (i.e. extended to support older dates) is supported.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18245,"byte_end":18335,"line_start":391,"line_end":391,"column_start":1,"column_end":91}},{"value":"/ Be very careful if you really have to deal with pre-20C dates, they can be in Julian or others.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18336,"byte_end":18435,"line_start":392,"line_end":392,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18436,"byte_end":18439,"line_start":393,"line_end":393,"column_start":1,"column_end":4}},{"value":"/ Date types are limited in about +/- 262,000 years from the common epoch.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18440,"byte_end":18516,"line_start":394,"line_end":394,"column_start":1,"column_end":77}},{"value":"/ Time types are limited in the nanosecond accuracy.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18517,"byte_end":18571,"line_start":395,"line_end":395,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18572,"byte_end":18575,"line_start":396,"line_end":396,"column_start":1,"column_end":4}},{"value":"/ [Leap seconds are supported in the representation but","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18576,"byte_end":18633,"line_start":397,"line_end":397,"column_start":1,"column_end":58}},{"value":"/ Chrono doesn't try to make use of them](./naive/struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18634,"byte_end":18730,"line_start":398,"line_end":398,"column_start":1,"column_end":97}},{"value":"/ (The main reason is that leap seconds are not really predictable.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18731,"byte_end":18801,"line_start":399,"line_end":399,"column_start":1,"column_end":71}},{"value":"/ Almost *every* operation over the possible leap seconds will ignore them.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18802,"byte_end":18879,"line_start":400,"line_end":400,"column_start":1,"column_end":78}},{"value":"/ Consider using `NaiveDateTime` with the implicit TAI (International Atomic Time) scale","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18880,"byte_end":18970,"line_start":401,"line_end":401,"column_start":1,"column_end":91}},{"value":"/ if you want.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18971,"byte_end":18987,"line_start":402,"line_end":402,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18988,"byte_end":18991,"line_start":403,"line_end":403,"column_start":1,"column_end":4}},{"value":"/ Chrono inherently does not support an inaccurate or partial date and time representation.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":18992,"byte_end":19085,"line_start":404,"line_end":404,"column_start":1,"column_end":94}},{"value":"/ Any operation that can be ambiguous will return `None` in such cases.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19086,"byte_end":19159,"line_start":405,"line_end":405,"column_start":1,"column_end":74}},{"value":"/ For example, \"a month later\" of 2014-01-30 is not well-defined","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19160,"byte_end":19226,"line_start":406,"line_end":406,"column_start":1,"column_end":67}},{"value":"/ and consequently `Utc.ymd(2014, 1, 30).with_month(2)` returns `None`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19227,"byte_end":19300,"line_start":407,"line_end":407,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19301,"byte_end":19304,"line_start":408,"line_end":408,"column_start":1,"column_end":4}},{"value":"/ Non ISO week handling is not yet supported.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19305,"byte_end":19352,"line_start":409,"line_end":409,"column_start":1,"column_end":48}},{"value":"/ For now you can use the [chrono_ext](https://crates.io/crates/chrono_ext)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19353,"byte_end":19430,"line_start":410,"line_end":410,"column_start":1,"column_end":78}},{"value":"/ crate ([sources](https://github.com/bcourtine/chrono-ext/)).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19431,"byte_end":19495,"line_start":411,"line_end":411,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19496,"byte_end":19499,"line_start":412,"line_end":412,"column_start":1,"column_end":4}},{"value":"/ Advanced time zone handling is not yet supported.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19500,"byte_end":19553,"line_start":413,"line_end":413,"column_start":1,"column_end":54}},{"value":"/ For now you can try the [Chrono-tz](https://github.com/chronotope/chrono-tz/) crate instead.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19554,"byte_end":19650,"line_start":414,"line_end":414,"column_start":1,"column_end":97}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19799,"byte_end":19821,"line_start":418,"line_end":418,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19822,"byte_end":19861,"line_start":419,"line_end":419,"column_start":1,"column_end":40}},{"value":"warn(unreachable_pub)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19862,"byte_end":19887,"line_start":420,"line_end":420,"column_start":1,"column_end":26}},{"value":"deny(dead_code)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":19888,"byte_end":19907,"line_start":421,"line_end":421,"column_start":1,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":7},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":20635,"byte_end":20642,"line_start":443,"line_end":443,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":58}],"decl_id":null,"docs":" A convenience module appropriate for glob imports (`use chrono::prelude::*;`).\n","sig":null,"attributes":[{"value":"/ A convenience module appropriate for glob imports (`use chrono::prelude::*;`).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":20544,"byte_end":20626,"line_start":442,"line_end":442,"column_start":1,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":2303},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":25359,"byte_end":25363,"line_start":58,"line_end":58,"column_start":12,"column_end":16},"name":"Date","qualname":"::date::Date","value":"Date {  }","parent":null,"children":[{"krate":0,"index":2305},{"krate":0,"index":2306}],"decl_id":null,"docs":" ISO 8601 calendar date with time zone.","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date with time zone.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":23702,"byte_end":23744,"line_start":25,"line_end":25,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":23745,"byte_end":23748,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ You almost certainly want to be using a [`NaiveDate`] instead of this type.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":23749,"byte_end":23828,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":23829,"byte_end":23832,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ This type primarily exists to aid in the construction of DateTimes that","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":23833,"byte_end":23908,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ have a timezone by way of the [`TimeZone`] datelike constructors (e.g.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":23909,"byte_end":23983,"line_start":30,"line_end":30,"column_start":1,"column_end":75}},{"value":"/ [`TimeZone::ymd`]).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":23984,"byte_end":24007,"line_start":31,"line_end":31,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":24008,"byte_end":24011,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ This type should be considered ambiguous at best, due to the inherent lack","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":24012,"byte_end":24090,"line_start":33,"line_end":33,"column_start":1,"column_end":79}},{"value":"/ of precision required for the time zone resolution.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":24091,"byte_end":24146,"line_start":34,"line_end":34,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":24147,"byte_end":24150,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ There are some guarantees on the usage of `Date<Tz>`:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":24151,"byte_end":24208,"line_start":36,"line_end":36,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":24209,"byte_end":24212,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ - If properly constructed via [`TimeZone::ymd`] and others without an error,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":24213,"byte_end":24293,"line_start":38,"line_end":38,"column_start":1,"column_end":81}},{"value":"/   the corresponding local date should exist for at least a moment.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":24294,"byte_end":24364,"line_start":39,"line_end":39,"column_start":1,"column_end":71}},{"value":"/   (It may still have a gap from the offset changes.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":24365,"byte_end":24421,"line_start":40,"line_end":40,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":24422,"byte_end":24425,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ - The `TimeZone` is free to assign *any* [`Offset`](crate::offset::Offset) to the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":24426,"byte_end":24511,"line_start":42,"line_end":42,"column_start":1,"column_end":86}},{"value":"/   local date, as long as that offset did occur in given day.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":24512,"byte_end":24576,"line_start":43,"line_end":43,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":24577,"byte_end":24580,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/   For example, if `2015-03-08T01:59-08:00` is followed by `2015-03-08T03:00-07:00`,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":24581,"byte_end":24668,"line_start":45,"line_end":45,"column_start":1,"column_end":88}},{"value":"/   it may produce either `2015-03-08-08:00` or `2015-03-08-07:00`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":24669,"byte_end":24737,"line_start":46,"line_end":46,"column_start":1,"column_end":69}},{"value":"/   but *not* `2015-03-08+00:00` and others.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":24738,"byte_end":24784,"line_start":47,"line_end":47,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":24785,"byte_end":24788,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ - Once constructed as a full `DateTime`, [`DateTime::date`] and other associated","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":24789,"byte_end":24873,"line_start":49,"line_end":49,"column_start":1,"column_end":85}},{"value":"/   methods should return those for the original `Date`. For example, if `dt =","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":24874,"byte_end":24954,"line_start":50,"line_end":50,"column_start":1,"column_end":81}},{"value":"/   tz.ymd(y,m,d).hms(h,n,s)` were valid, `dt.date() == tz.ymd(y,m,d)`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":24955,"byte_end":25028,"line_start":51,"line_end":51,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":25029,"byte_end":25032,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ - The date is timezone-agnostic up to one day (i.e. practically always),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":25033,"byte_end":25109,"line_start":53,"line_end":53,"column_start":1,"column_end":77}},{"value":"/   so the local date and UTC date should be equal for most cases","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":25110,"byte_end":25177,"line_start":54,"line_end":54,"column_start":1,"column_end":68}},{"value":"/   even though the raw calculation between `NaiveDate` and `Duration` may not.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":25178,"byte_end":25259,"line_start":55,"line_end":55,"column_start":1,"column_end":82}}]},{"kind":"Const","id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":25560,"byte_end":25568,"line_start":66,"line_end":66,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::date::MIN_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `Date`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":25428,"byte_end":25460,"line_start":63,"line_end":63,"column_start":1,"column_end":33}},{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":25461,"byte_end":25481,"line_start":64,"line_end":64,"column_start":1,"column_end":21}},{"value":"deprecated(since = \"0.4.20\", note = \"Use Date::MIN_UTC instead\")","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":25482,"byte_end":25549,"line_start":65,"line_end":65,"column_start":1,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":25736,"byte_end":25744,"line_start":70,"line_end":70,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::date::MAX_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `Date`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":25604,"byte_end":25636,"line_start":67,"line_end":67,"column_start":1,"column_end":33}},{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":25637,"byte_end":25657,"line_start":68,"line_end":68,"column_start":1,"column_end":21}},{"value":"deprecated(since = \"0.4.20\", note = \"Use Date::MAX_UTC instead\")","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":25658,"byte_end":25725,"line_start":69,"line_end":69,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":26069,"byte_end":26077,"line_start":78,"line_end":78,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<Date<Tz>>::from_utc","value":"fn from_utc(NaiveDate, Tz::Offset) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` with given *UTC* date and offset.\n The local date should be constructed via the `TimeZone` trait.\n","sig":null,"attributes":[{"value":"/ Makes a new `Date` with given *UTC* date and offset.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":25815,"byte_end":25871,"line_start":73,"line_end":73,"column_start":5,"column_end":61}},{"value":"/ The local date should be constructed via the `TimeZone` trait.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":25876,"byte_end":25942,"line_start":74,"line_end":74,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":26048,"byte_end":26057,"line_start":77,"line_end":77,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":26364,"byte_end":26372,"line_start":87,"line_end":87,"column_start":12,"column_end":20},"name":"and_time","qualname":"<Date<Tz>>::and_time","value":"fn and_time<'_>(&'_ Self, NaiveTime) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":26170,"byte_end":26241,"line_start":82,"line_end":82,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":26246,"byte_end":26294,"line_start":83,"line_end":83,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":26299,"byte_end":26302,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid datetime.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":26307,"byte_end":26338,"line_start":85,"line_end":85,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":26343,"byte_end":26352,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":26769,"byte_end":26776,"line_start":97,"line_end":97,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<Date<Tz>>::and_hms","value":"fn and_hms<'_>(&'_ Self, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":26554,"byte_end":26628,"line_start":92,"line_end":92,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":26633,"byte_end":26681,"line_start":93,"line_end":93,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":26686,"byte_end":26689,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":26694,"byte_end":26743,"line_start":95,"line_end":95,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":26748,"byte_end":26757,"line_start":96,"line_end":96,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":27131,"byte_end":27142,"line_start":106,"line_end":106,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<Date<Tz>>::and_hms_opt","value":"fn and_hms_opt<'_>(&'_ Self, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":26908,"byte_end":26982,"line_start":101,"line_end":101,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":26987,"byte_end":27035,"line_start":102,"line_end":102,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":27040,"byte_end":27043,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":27048,"byte_end":27105,"line_start":104,"line_end":104,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":27110,"byte_end":27119,"line_start":105,"line_end":105,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":27629,"byte_end":27642,"line_start":116,"line_end":116,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<Date<Tz>>::and_hms_milli","value":"fn and_hms_milli<'_>(&'_ Self, u32, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":27303,"byte_end":27390,"line_start":110,"line_end":110,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":27395,"byte_end":27475,"line_start":111,"line_end":111,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":27480,"byte_end":27528,"line_start":112,"line_end":112,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":27533,"byte_end":27536,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":27541,"byte_end":27603,"line_start":114,"line_end":114,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":27608,"byte_end":27617,"line_start":115,"line_end":115,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":28133,"byte_end":28150,"line_start":126,"line_end":126,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<Date<Tz>>::and_hms_milli_opt","value":"fn and_hms_milli_opt<'_>(&'_ Self, u32, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":27799,"byte_end":27886,"line_start":120,"line_end":120,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":27891,"byte_end":27971,"line_start":121,"line_end":121,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":27976,"byte_end":28024,"line_start":122,"line_end":122,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":28029,"byte_end":28032,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":28037,"byte_end":28107,"line_start":124,"line_end":124,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":28112,"byte_end":28121,"line_start":125,"line_end":125,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":28713,"byte_end":28726,"line_start":142,"line_end":142,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<Date<Tz>>::and_hms_micro","value":"fn and_hms_micro<'_>(&'_ Self, u32, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":28383,"byte_end":28470,"line_start":136,"line_end":136,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":28475,"byte_end":28559,"line_start":137,"line_end":137,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":28564,"byte_end":28612,"line_start":138,"line_end":138,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":28617,"byte_end":28620,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":28625,"byte_end":28687,"line_start":140,"line_end":140,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":28692,"byte_end":28701,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":29221,"byte_end":29238,"line_start":152,"line_end":152,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<Date<Tz>>::and_hms_micro_opt","value":"fn and_hms_micro_opt<'_>(&'_ Self, u32, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":28883,"byte_end":28970,"line_start":146,"line_end":146,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":28975,"byte_end":29059,"line_start":147,"line_end":147,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":29064,"byte_end":29112,"line_start":148,"line_end":148,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":29117,"byte_end":29120,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":29125,"byte_end":29195,"line_start":150,"line_end":150,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":29200,"byte_end":29209,"line_start":151,"line_end":151,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":29802,"byte_end":29814,"line_start":168,"line_end":168,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<Date<Tz>>::and_hms_nano","value":"fn and_hms_nano<'_>(&'_ Self, u32, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":29471,"byte_end":29557,"line_start":162,"line_end":162,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":29562,"byte_end":29649,"line_start":163,"line_end":163,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":29654,"byte_end":29702,"line_start":164,"line_end":164,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":29707,"byte_end":29710,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":29715,"byte_end":29776,"line_start":166,"line_end":166,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":29781,"byte_end":29790,"line_start":167,"line_end":167,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":30307,"byte_end":30323,"line_start":178,"line_end":178,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<Date<Tz>>::and_hms_nano_opt","value":"fn and_hms_nano_opt<'_>(&'_ Self, u32, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":29968,"byte_end":30054,"line_start":172,"line_end":172,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":30059,"byte_end":30146,"line_start":173,"line_end":173,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":30151,"byte_end":30199,"line_start":174,"line_end":174,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":30204,"byte_end":30207,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":30212,"byte_end":30281,"line_start":176,"line_end":176,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":30286,"byte_end":30295,"line_start":177,"line_end":177,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":30687,"byte_end":30691,"line_start":192,"line_end":192,"column_start":12,"column_end":16},"name":"succ","qualname":"<Date<Tz>>::succ","value":"fn succ<'_>(&'_ Self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":30553,"byte_end":30594,"line_start":188,"line_end":188,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":30599,"byte_end":30602,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":30607,"byte_end":30661,"line_start":190,"line_end":190,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":30666,"byte_end":30675,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":30913,"byte_end":30921,"line_start":200,"line_end":200,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<Date<Tz>>::succ_opt","value":"fn succ_opt<'_>(&'_ Self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":30771,"byte_end":30812,"line_start":196,"line_end":196,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":30817,"byte_end":30820,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":30825,"byte_end":30887,"line_start":198,"line_end":198,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":30892,"byte_end":30901,"line_start":199,"line_end":199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":31181,"byte_end":31185,"line_start":208,"line_end":208,"column_start":12,"column_end":16},"name":"pred","qualname":"<Date<Tz>>::pred","value":"fn pred<'_>(&'_ Self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":31045,"byte_end":31087,"line_start":204,"line_end":204,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":31092,"byte_end":31095,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":31100,"byte_end":31155,"line_start":206,"line_end":206,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":31160,"byte_end":31169,"line_start":207,"line_end":207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":31409,"byte_end":31417,"line_start":216,"line_end":216,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<Date<Tz>>::pred_opt","value":"fn pred_opt<'_>(&'_ Self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":31265,"byte_end":31307,"line_start":212,"line_end":212,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":31312,"byte_end":31315,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":31320,"byte_end":31383,"line_start":214,"line_end":214,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":31388,"byte_end":31397,"line_start":215,"line_end":215,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":31611,"byte_end":31617,"line_start":222,"line_end":222,"column_start":12,"column_end":18},"name":"offset","qualname":"<Date<Tz>>::offset","value":"fn offset<'_>(&'_ Self) -> &'_ Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":31541,"byte_end":31585,"line_start":220,"line_end":220,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":31590,"byte_end":31599,"line_start":221,"line_end":221,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":31738,"byte_end":31746,"line_start":228,"line_end":228,"column_start":12,"column_end":20},"name":"timezone","qualname":"<Date<Tz>>::timezone","value":"fn timezone<'_>(&'_ Self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":31674,"byte_end":31712,"line_start":226,"line_end":226,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":31717,"byte_end":31726,"line_start":227,"line_end":227,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":31972,"byte_end":31985,"line_start":235,"line_end":235,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<Date<Tz>>::with_timezone","value":"fn with_timezone<Tz2, '_, '_>(&'_ Self, &'_ Tz2) -> Date<Tz2> where\nTz2: TimeZone","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `Date` (but will change the string representation).\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":31817,"byte_end":31854,"line_start":232,"line_end":232,"column_start":5,"column_end":42}},{"value":"/ This does not change the actual `Date` (but will change the string representation).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":31859,"byte_end":31946,"line_start":233,"line_end":233,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":31951,"byte_end":31960,"line_start":234,"line_end":234,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":32217,"byte_end":32235,"line_start":243,"line_end":243,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<Date<Tz>>::checked_add_signed","value":"fn checked_add_signed(Self, OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":32081,"byte_end":32127,"line_start":239,"line_end":239,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":32132,"byte_end":32135,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":32140,"byte_end":32191,"line_start":241,"line_end":241,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":32196,"byte_end":32205,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":32540,"byte_end":32558,"line_start":252,"line_end":252,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<Date<Tz>>::checked_sub_signed","value":"fn checked_sub_signed(Self, OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":32397,"byte_end":32450,"line_start":248,"line_end":248,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":32455,"byte_end":32458,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":32463,"byte_end":32514,"line_start":250,"line_end":250,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":32519,"byte_end":32528,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":32971,"byte_end":32992,"line_start":263,"line_end":263,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<Date<Tz>>::signed_duration_since","value":"fn signed_duration_since<Tz2>(Self, Date<Tz2>) -> OldDuration where\nTz2: TimeZone","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `Date` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"/ Subtracts another `Date` from the current date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":32720,"byte_end":32771,"line_start":257,"line_end":257,"column_start":5,"column_end":56}},{"value":"/ Returns a `Duration` of integral numbers.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":32776,"byte_end":32821,"line_start":258,"line_end":258,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":32826,"byte_end":32829,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ This does not overflow or underflow at all,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":32834,"byte_end":32881,"line_start":260,"line_end":260,"column_start":5,"column_end":52}},{"value":"/ as all possible output fits in the range of `Duration`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":32886,"byte_end":32945,"line_start":261,"line_end":261,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":32950,"byte_end":32959,"line_start":262,"line_end":262,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":33175,"byte_end":33184,"line_start":269,"line_end":269,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<Date<Tz>>::naive_utc","value":"fn naive_utc<'_>(&'_ Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC date.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":33108,"byte_end":33149,"line_start":267,"line_end":267,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":33154,"byte_end":33163,"line_start":268,"line_end":268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":33494,"byte_end":33505,"line_start":279,"line_end":279,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<Date<Tz>>::naive_local","value":"fn naive_local<'_>(&'_ Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local date.","sig":null,"attributes":[{"value":"/ Returns a view to the naive local date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":33236,"byte_end":33279,"line_start":273,"line_end":273,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":33284,"byte_end":33287,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ This is technically the same as [`naive_utc`](#method.naive_utc)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":33292,"byte_end":33360,"line_start":275,"line_end":275,"column_start":5,"column_end":73}},{"value":"/ because the offset is restricted to never exceed one day,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":33365,"byte_end":33426,"line_start":276,"line_end":276,"column_start":5,"column_end":66}},{"value":"/ but provided for the consistency.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":33431,"byte_end":33468,"line_start":277,"line_end":277,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":33473,"byte_end":33482,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":33642,"byte_end":33653,"line_start":284,"line_end":284,"column_start":12,"column_end":23},"name":"years_since","qualname":"<Date<Tz>>::years_since","value":"fn years_since<'_>(&'_ Self, Self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of whole years from the given `base` until `self`.\n","sig":null,"attributes":[{"value":"/ Returns the number of whole years from the given `base` until `self`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":33557,"byte_end":33630,"line_start":283,"line_end":283,"column_start":5,"column_end":78}}]},{"kind":"Const","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":34007,"byte_end":34014,"line_start":297,"line_end":297,"column_start":15,"column_end":22},"name":"MIN_UTC","qualname":"::date::Date::<Tz>::MIN_UTC","value":"Date<Utc>","parent":{"krate":0,"index":130},"children":[],"decl_id":null,"docs":" The minimum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `Date`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":33960,"byte_end":33992,"line_start":296,"line_end":296,"column_start":5,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":164},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":34123,"byte_end":34130,"line_start":299,"line_end":299,"column_start":15,"column_end":22},"name":"MAX_UTC","qualname":"::date::Date::<Tz>::MAX_UTC","value":"Date<Utc>","parent":{"krate":0,"index":130},"children":[],"decl_id":null,"docs":" The maximum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `Date`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":34076,"byte_end":34108,"line_start":298,"line_end":298,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":34688,"byte_end":34705,"line_start":317,"line_end":317,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<Date<Tz>>::format_with_items","value":"fn format_with_items<'a, I, B, '_>(&'_ Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n","sig":null,"attributes":[{"value":"/ Formats the date with the specified formatting items.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":34547,"byte_end":34604,"line_start":314,"line_end":314,"column_start":5,"column_end":62}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":34609,"byte_end":34662,"line_start":315,"line_end":315,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":34667,"byte_end":34676,"line_start":316,"line_end":316,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":35438,"byte_end":35444,"line_start":339,"line_end":339,"column_start":12,"column_end":18},"name":"format","qualname":"<Date<Tz>>::format","value":"fn format<'a, '_>(&'_ Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`crate::format::strftime`] module\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the date with the specified format string.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":34940,"byte_end":34994,"line_start":325,"line_end":325,"column_start":5,"column_end":59}},{"value":"/ See the [`crate::format::strftime`] module","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":34999,"byte_end":35045,"line_start":326,"line_end":326,"column_start":5,"column_end":51}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":35050,"byte_end":35088,"line_start":327,"line_end":327,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":35093,"byte_end":35096,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":35101,"byte_end":35114,"line_start":329,"line_end":329,"column_start":5,"column_end":18}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":35119,"byte_end":35130,"line_start":330,"line_end":330,"column_start":5,"column_end":16}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":35135,"byte_end":35162,"line_start":331,"line_end":331,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":35167,"byte_end":35170,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ let date_time: Date<Utc> = Utc.ymd(2017, 04, 02);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":35175,"byte_end":35228,"line_start":333,"line_end":333,"column_start":5,"column_end":58}},{"value":"/ let formatted = format!(\"{}\", date_time.format(\"%d/%m/%Y\"));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":35233,"byte_end":35297,"line_start":334,"line_end":334,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(formatted, \"02/04/2017\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":35302,"byte_end":35342,"line_start":335,"line_end":335,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":35347,"byte_end":35354,"line_start":336,"line_end":336,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":35359,"byte_end":35412,"line_start":337,"line_end":337,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":35417,"byte_end":35426,"line_start":338,"line_end":338,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":36624,"byte_end":36628,"line_start":380,"line_end":380,"column_start":8,"column_end":12},"name":"year","qualname":"<Date<Tz> as traits::Datelike>::year","value":"fn year<'_>(&'_ Self) -> i32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2267},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":36607,"byte_end":36616,"line_start":379,"line_end":379,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":36706,"byte_end":36711,"line_start":384,"line_end":384,"column_start":8,"column_end":13},"name":"month","qualname":"<Date<Tz> as traits::Datelike>::month","value":"fn month<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2269},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":36689,"byte_end":36698,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":36790,"byte_end":36796,"line_start":388,"line_end":388,"column_start":8,"column_end":14},"name":"month0","qualname":"<Date<Tz> as traits::Datelike>::month0","value":"fn month0<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2270},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":36773,"byte_end":36782,"line_start":387,"line_end":387,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":36876,"byte_end":36879,"line_start":392,"line_end":392,"column_start":8,"column_end":11},"name":"day","qualname":"<Date<Tz> as traits::Datelike>::day","value":"fn day<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2271},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":36859,"byte_end":36868,"line_start":391,"line_end":391,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":36956,"byte_end":36960,"line_start":396,"line_end":396,"column_start":8,"column_end":12},"name":"day0","qualname":"<Date<Tz> as traits::Datelike>::day0","value":"fn day0<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2272},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":36939,"byte_end":36948,"line_start":395,"line_end":395,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":37038,"byte_end":37045,"line_start":400,"line_end":400,"column_start":8,"column_end":15},"name":"ordinal","qualname":"<Date<Tz> as traits::Datelike>::ordinal","value":"fn ordinal<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2273},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":37021,"byte_end":37030,"line_start":399,"line_end":399,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":37126,"byte_end":37134,"line_start":404,"line_end":404,"column_start":8,"column_end":16},"name":"ordinal0","qualname":"<Date<Tz> as traits::Datelike>::ordinal0","value":"fn ordinal0<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2274},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":37109,"byte_end":37118,"line_start":403,"line_end":403,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":37216,"byte_end":37223,"line_start":408,"line_end":408,"column_start":8,"column_end":15},"name":"weekday","qualname":"<Date<Tz> as traits::Datelike>::weekday","value":"fn weekday<'_>(&'_ Self) -> Weekday","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2275},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":37199,"byte_end":37208,"line_start":407,"line_end":407,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":37308,"byte_end":37316,"line_start":412,"line_end":412,"column_start":8,"column_end":16},"name":"iso_week","qualname":"<Date<Tz> as traits::Datelike>::iso_week","value":"fn iso_week<'_>(&'_ Self) -> IsoWeek","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2276},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":37291,"byte_end":37300,"line_start":411,"line_end":411,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":37403,"byte_end":37412,"line_start":417,"line_end":417,"column_start":8,"column_end":17},"name":"with_year","qualname":"<Date<Tz> as traits::Datelike>::with_year","value":"fn with_year<'_>(&'_ Self, i32) -> Option<Date<Tz>>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2277},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":37386,"byte_end":37395,"line_start":416,"line_end":416,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":37534,"byte_end":37544,"line_start":422,"line_end":422,"column_start":8,"column_end":18},"name":"with_month","qualname":"<Date<Tz> as traits::Datelike>::with_month","value":"fn with_month<'_>(&'_ Self, u32) -> Option<Date<Tz>>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2278},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":37517,"byte_end":37526,"line_start":421,"line_end":421,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":37669,"byte_end":37680,"line_start":427,"line_end":427,"column_start":8,"column_end":19},"name":"with_month0","qualname":"<Date<Tz> as traits::Datelike>::with_month0","value":"fn with_month0<'_>(&'_ Self, u32) -> Option<Date<Tz>>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2279},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":37652,"byte_end":37661,"line_start":426,"line_end":426,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":37808,"byte_end":37816,"line_start":432,"line_end":432,"column_start":8,"column_end":16},"name":"with_day","qualname":"<Date<Tz> as traits::Datelike>::with_day","value":"fn with_day<'_>(&'_ Self, u32) -> Option<Date<Tz>>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2280},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":37791,"byte_end":37800,"line_start":431,"line_end":431,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":37935,"byte_end":37944,"line_start":437,"line_end":437,"column_start":8,"column_end":17},"name":"with_day0","qualname":"<Date<Tz> as traits::Datelike>::with_day0","value":"fn with_day0<'_>(&'_ Self, u32) -> Option<Date<Tz>>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2281},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":37918,"byte_end":37927,"line_start":436,"line_end":436,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":38066,"byte_end":38078,"line_start":442,"line_end":442,"column_start":8,"column_end":20},"name":"with_ordinal","qualname":"<Date<Tz> as traits::Datelike>::with_ordinal","value":"fn with_ordinal<'_>(&'_ Self, u32) -> Option<Date<Tz>>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2282},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":38049,"byte_end":38058,"line_start":441,"line_end":441,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":38209,"byte_end":38222,"line_start":447,"line_end":447,"column_start":8,"column_end":21},"name":"with_ordinal0","qualname":"<Date<Tz> as traits::Datelike>::with_ordinal0","value":"fn with_ordinal0<'_>(&'_ Self, u32) -> Option<Date<Tz>>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2283},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":38192,"byte_end":38201,"line_start":446,"line_end":446,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":38642,"byte_end":38644,"line_start":457,"line_end":457,"column_start":8,"column_end":10},"name":"eq","qualname":"<Date<Tz> as std::cmp::PartialEq>::eq","value":"fn eq<'_, '_>(&'_ Self, &'_ Date<Tz2>) -> bool","parent":{"krate":2,"index":2915},"children":[],"decl_id":{"krate":2,"index":2917},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":38813,"byte_end":38824,"line_start":465,"line_end":465,"column_start":8,"column_end":19},"name":"partial_cmp","qualname":"<Date<Tz> as std::cmp::PartialOrd>::partial_cmp","value":"fn partial_cmp<'_, '_>(&'_ Self, &'_ Date<Tz>) -> Option<Ordering>","parent":{"krate":2,"index":2961},"children":[],"decl_id":{"krate":2,"index":2963},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":38969,"byte_end":38972,"line_start":471,"line_end":471,"column_start":8,"column_end":11},"name":"cmp","qualname":"<Date<Tz> as std::cmp::Ord>::cmp","value":"fn cmp<'_, '_>(&'_ Self, &'_ Date<Tz>) -> Ordering","parent":{"krate":2,"index":2951},"children":[],"decl_id":{"krate":2,"index":2952},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":39108,"byte_end":39112,"line_start":477,"line_end":477,"column_start":8,"column_end":12},"name":"hash","qualname":"<Date<Tz> as std::hash::Hash>::hash","value":"fn hash<H, '_, '_>(&'_ Self, &'_ mut H) where H: hash::Hasher","parent":{"krate":2,"index":10531},"children":[],"decl_id":{"krate":2,"index":10532},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":39294,"byte_end":39297,"line_start":486,"line_end":486,"column_start":8,"column_end":11},"name":"add","qualname":"<Date<Tz> as std::ops::Add>::add","value":"fn add(Self, OldDuration) -> Date<Tz>","parent":{"krate":2,"index":3331},"children":[],"decl_id":{"krate":2,"index":3334},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":39277,"byte_end":39286,"line_start":485,"line_end":485,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":39499,"byte_end":39509,"line_start":493,"line_end":493,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<Date<Tz> as std::ops::AddAssign>::add_assign","value":"fn add_assign<'_>(&'_ mut Self, OldDuration)","parent":{"krate":2,"index":3362},"children":[],"decl_id":{"krate":2,"index":3364},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":39482,"byte_end":39491,"line_start":492,"line_end":492,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":39745,"byte_end":39748,"line_start":502,"line_end":502,"column_start":8,"column_end":11},"name":"sub","qualname":"<Date<Tz> as std::ops::Sub>::sub","value":"fn sub(Self, OldDuration) -> Date<Tz>","parent":{"krate":2,"index":3336},"children":[],"decl_id":{"krate":2,"index":3339},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":39728,"byte_end":39737,"line_start":501,"line_end":501,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":39950,"byte_end":39960,"line_start":509,"line_end":509,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<Date<Tz> as std::ops::SubAssign>::sub_assign","value":"fn sub_assign<'_>(&'_ mut Self, OldDuration)","parent":{"krate":2,"index":3366},"children":[],"decl_id":{"krate":2,"index":3368},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":39933,"byte_end":39942,"line_start":508,"line_end":508,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":40196,"byte_end":40199,"line_start":518,"line_end":518,"column_start":8,"column_end":11},"name":"sub","qualname":"<Date<Tz> as std::ops::Sub>::sub","value":"fn sub(Self, Date<Tz>) -> OldDuration","parent":{"krate":2,"index":3336},"children":[],"decl_id":{"krate":2,"index":3339},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":40179,"byte_end":40188,"line_start":517,"line_end":517,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":40339,"byte_end":40342,"line_start":524,"line_end":524,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Date<Tz> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10293},"children":[],"decl_id":{"krate":2,"index":10294},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":40553,"byte_end":40556,"line_start":533,"line_end":533,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Date<Tz> as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10300},"children":[],"decl_id":{"krate":2,"index":10301},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2311},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":45483,"byte_end":45487,"line_start":55,"line_end":55,"column_start":5,"column_end":9},"name":"Secs","qualname":"::datetime::SecondsFormat::Secs","value":"SecondsFormat::Secs","parent":{"krate":0,"index":2310},"children":[],"decl_id":null,"docs":" Format whole seconds only, with no decimal point nor subseconds.\n","sig":null,"attributes":[{"value":"/ Format whole seconds only, with no decimal point nor subseconds.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":45410,"byte_end":45478,"line_start":54,"line_end":54,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2313},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":45626,"byte_end":45632,"line_start":59,"line_end":59,"column_start":5,"column_end":11},"name":"Millis","qualname":"::datetime::SecondsFormat::Millis","value":"SecondsFormat::Millis","parent":{"krate":0,"index":2310},"children":[],"decl_id":null,"docs":" Use fixed 3 subsecond digits. This corresponds to\n [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).\n","sig":null,"attributes":[{"value":"/ Use fixed 3 subsecond digits. This corresponds to","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":45494,"byte_end":45547,"line_start":57,"line_end":57,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":45552,"byte_end":45621,"line_start":58,"line_end":58,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2315},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":45771,"byte_end":45777,"line_start":63,"line_end":63,"column_start":5,"column_end":11},"name":"Micros","qualname":"::datetime::SecondsFormat::Micros","value":"SecondsFormat::Micros","parent":{"krate":0,"index":2310},"children":[],"decl_id":null,"docs":" Use fixed 6 subsecond digits. This corresponds to\n [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).\n","sig":null,"attributes":[{"value":"/ Use fixed 6 subsecond digits. This corresponds to","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":45639,"byte_end":45692,"line_start":61,"line_end":61,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":45697,"byte_end":45766,"line_start":62,"line_end":62,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2317},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":45916,"byte_end":45921,"line_start":67,"line_end":67,"column_start":5,"column_end":10},"name":"Nanos","qualname":"::datetime::SecondsFormat::Nanos","value":"SecondsFormat::Nanos","parent":{"krate":0,"index":2310},"children":[],"decl_id":null,"docs":" Use fixed 9 subsecond digits. This corresponds to\n [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).\n","sig":null,"attributes":[{"value":"/ Use fixed 9 subsecond digits. This corresponds to","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":45784,"byte_end":45837,"line_start":65,"line_end":65,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":45842,"byte_end":45911,"line_start":66,"line_end":66,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2319},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":46157,"byte_end":46163,"line_start":72,"line_end":72,"column_start":5,"column_end":11},"name":"AutoSi","qualname":"::datetime::SecondsFormat::AutoSi","value":"SecondsFormat::AutoSi","parent":{"krate":0,"index":2310},"children":[],"decl_id":null,"docs":" Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to\n display all available non-zero sub-second digits.  This corresponds to\n [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":45928,"byte_end":46001,"line_start":69,"line_end":69,"column_start":5,"column_end":78}},{"value":"/ display all available non-zero sub-second digits.  This corresponds to","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":46006,"byte_end":46080,"line_start":70,"line_end":70,"column_start":5,"column_end":79}},{"value":"/ [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":46085,"byte_end":46152,"line_start":71,"line_end":71,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2321},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":46223,"byte_end":46238,"line_start":76,"line_end":76,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::datetime::SecondsFormat::__NonExhaustive","value":"SecondsFormat::__NonExhaustive","parent":{"krate":0,"index":2310},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2310},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":45390,"byte_end":45403,"line_start":53,"line_end":53,"column_start":10,"column_end":23},"name":"SecondsFormat","qualname":"::datetime::SecondsFormat","value":"enum SecondsFormat { Secs, Millis, Micros, Nanos, AutoSi, __NonExhaustive, }","parent":null,"children":[{"krate":0,"index":2311},{"krate":0,"index":2313},{"krate":0,"index":2315},{"krate":0,"index":2317},{"krate":0,"index":2319},{"krate":0,"index":2321}],"decl_id":null,"docs":" Specific formatting options for seconds. This may be extended in the\n future, so exhaustive matching in external code is not recommended.","sig":null,"attributes":[{"value":"/ Specific formatting options for seconds. This may be extended in the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":45127,"byte_end":45199,"line_start":48,"line_end":48,"column_start":1,"column_end":73}},{"value":"/ future, so exhaustive matching in external code is not recommended.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":45200,"byte_end":45271,"line_start":49,"line_end":49,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":45272,"byte_end":45275,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ See the `TimeZone::to_rfc3339_opts` function for usage.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":45276,"byte_end":45335,"line_start":51,"line_end":51,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":2334},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":46607,"byte_end":46615,"line_start":86,"line_end":86,"column_start":12,"column_end":20},"name":"DateTime","qualname":"::datetime::DateTime","value":"DateTime {  }","parent":null,"children":[{"krate":0,"index":2336},{"krate":0,"index":2337}],"decl_id":null,"docs":" ISO 8601 combined date and time with time zone.","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time with time zone.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":46243,"byte_end":46294,"line_start":79,"line_end":79,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":46295,"byte_end":46298,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ There are some constructors implemented here (the `from_*` methods), but","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":46299,"byte_end":46375,"line_start":81,"line_end":81,"column_start":1,"column_end":77}},{"value":"/ the general-purpose constructors are all via the methods on the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":46376,"byte_end":46443,"line_start":82,"line_end":82,"column_start":1,"column_end":68}},{"value":"/ [`TimeZone`](./offset/trait.TimeZone.html) implementations.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":46444,"byte_end":46507,"line_start":83,"line_end":83,"column_start":1,"column_end":64}}]},{"kind":"Const","id":{"krate":0,"index":367},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":46812,"byte_end":46824,"line_start":93,"line_end":93,"column_start":11,"column_end":23},"name":"MIN_DATETIME","qualname":"::datetime::MIN_DATETIME","value":"DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `DateTime<Utc>`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `DateTime<Utc>`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":46688,"byte_end":46729,"line_start":91,"line_end":91,"column_start":1,"column_end":42}},{"value":"deprecated(since = \"0.4.20\", note = \"Use DateTime::MIN_UTC instead\")","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":46730,"byte_end":46801,"line_start":92,"line_end":92,"column_start":1,"column_end":72}}]},{"kind":"Const","id":{"krate":0,"index":368},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":46992,"byte_end":47004,"line_start":96,"line_end":96,"column_start":11,"column_end":23},"name":"MAX_DATETIME","qualname":"::datetime::MAX_DATETIME","value":"DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `DateTime<Utc>`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `DateTime<Utc>`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":46868,"byte_end":46909,"line_start":94,"line_end":94,"column_start":1,"column_end":42}},{"value":"deprecated(since = \"0.4.20\", note = \"Use DateTime::MAX_UTC instead\")","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":46910,"byte_end":46981,"line_start":95,"line_end":95,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":47614,"byte_end":47622,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<DateTime<Tz>>::from_utc","value":"fn from_utc(NaiveDateTime, Tz::Offset) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` with given *UTC* datetime and offset.\n The local datetime should be constructed via the `TimeZone` trait.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` with given *UTC* datetime and offset.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":47087,"byte_end":47151,"line_start":99,"line_end":99,"column_start":5,"column_end":69}},{"value":"/ The local datetime should be constructed via the `TimeZone` trait.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":47156,"byte_end":47226,"line_start":100,"line_end":100,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":47231,"byte_end":47234,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":47239,"byte_end":47252,"line_start":102,"line_end":102,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":47257,"byte_end":47260,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":47265,"byte_end":47272,"line_start":104,"line_end":104,"column_start":5,"column_end":12}},{"value":"/ use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":47277,"byte_end":47334,"line_start":105,"line_end":105,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":47339,"byte_end":47342,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ let dt = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(61, 0), Utc);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":47347,"byte_end":47429,"line_start":107,"line_end":107,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(Utc.timestamp(61, 0), dt);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":47434,"byte_end":47475,"line_start":108,"line_end":108,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":47480,"byte_end":47487,"line_start":109,"line_end":109,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":47593,"byte_end":47602,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":48874,"byte_end":48884,"line_start":142,"line_end":142,"column_start":12,"column_end":22},"name":"from_local","qualname":"<DateTime<Tz>>::from_local","value":"fn from_local(NaiveDateTime, Tz::Offset) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` with given **local** datetime and offset that\n presents local timezone.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` with given **local** datetime and offset that","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":47735,"byte_end":47807,"line_start":117,"line_end":117,"column_start":5,"column_end":77}},{"value":"/ presents local timezone.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":47812,"byte_end":47840,"line_start":118,"line_end":118,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":47845,"byte_end":47848,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":47853,"byte_end":47866,"line_start":120,"line_end":120,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":47871,"byte_end":47874,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":47879,"byte_end":47886,"line_start":122,"line_end":122,"column_start":5,"column_end":12}},{"value":"/ use chrono::DateTime;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":47891,"byte_end":47916,"line_start":123,"line_end":123,"column_start":5,"column_end":30}},{"value":"/ use chrono::naive::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":47921,"byte_end":47954,"line_start":124,"line_end":124,"column_start":5,"column_end":38}},{"value":"/ use chrono::offset::{Utc, FixedOffset};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":47959,"byte_end":48002,"line_start":125,"line_end":125,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":48007,"byte_end":48010,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ let naivedatetime_utc = NaiveDate::from_ymd(2000, 1, 12).and_hms(2, 0, 0);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":48015,"byte_end":48093,"line_start":127,"line_end":127,"column_start":5,"column_end":83}},{"value":"/ let datetime_utc = DateTime::<Utc>::from_utc(naivedatetime_utc, Utc);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":48098,"byte_end":48171,"line_start":128,"line_end":128,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":48176,"byte_end":48179,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ let timezone_east = FixedOffset::east(8 * 60 * 60);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":48184,"byte_end":48239,"line_start":130,"line_end":130,"column_start":5,"column_end":60}},{"value":"/ let naivedatetime_east = NaiveDate::from_ymd(2000, 1, 12).and_hms(10, 0, 0);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":48244,"byte_end":48324,"line_start":131,"line_end":131,"column_start":5,"column_end":85}},{"value":"/ let datetime_east = DateTime::<FixedOffset>::from_local(naivedatetime_east, timezone_east);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":48329,"byte_end":48424,"line_start":132,"line_end":132,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":48429,"byte_end":48432,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ let timezone_west = FixedOffset::west(7 * 60 * 60);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":48437,"byte_end":48492,"line_start":134,"line_end":134,"column_start":5,"column_end":60}},{"value":"/ let naivedatetime_west = NaiveDate::from_ymd(2000, 1, 11).and_hms(19, 0, 0);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":48497,"byte_end":48577,"line_start":135,"line_end":135,"column_start":5,"column_end":85}},{"value":"/ let datetime_west = DateTime::<FixedOffset>::from_local(naivedatetime_west, timezone_west);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":48582,"byte_end":48677,"line_start":136,"line_end":136,"column_start":5,"column_end":100}},{"value":"/ assert_eq!(datetime_east, datetime_utc.with_timezone(&timezone_east));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":48683,"byte_end":48757,"line_start":138,"line_end":138,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(datetime_west, datetime_utc.with_timezone(&timezone_west));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":48762,"byte_end":48836,"line_start":139,"line_end":139,"column_start":5,"column_end":79}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":48841,"byte_end":48848,"line_start":140,"line_end":140,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":48853,"byte_end":48862,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":49611,"byte_end":49615,"line_start":165,"line_end":165,"column_start":12,"column_end":16},"name":"date","qualname":"<DateTime<Tz>>::date","value":"fn date<'_>(&'_ Self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component","sig":null,"attributes":[{"value":"/ Retrieves a date component","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":49064,"byte_end":49094,"line_start":148,"line_end":148,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":49099,"byte_end":49102,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ Unless you are immediately planning on turning this into a `DateTime`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":49107,"byte_end":49180,"line_start":150,"line_end":150,"column_start":5,"column_end":78}},{"value":"/ with the same Timezone you should use the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":49185,"byte_end":49230,"line_start":151,"line_end":151,"column_start":5,"column_end":50}},{"value":"/ [`date_naive`](DateTime::date_naive) method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":49235,"byte_end":49283,"line_start":152,"line_end":152,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":49288,"byte_end":49291,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":49296,"byte_end":49303,"line_start":154,"line_end":154,"column_start":5,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":49308,"byte_end":49335,"line_start":155,"line_end":155,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":49340,"byte_end":49343,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ let date: Date<Utc> = Utc.ymd(2020, 1, 1);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":49348,"byte_end":49394,"line_start":157,"line_end":157,"column_start":5,"column_end":51}},{"value":"/ let dt: DateTime<Utc> = date.and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":49399,"byte_end":49449,"line_start":158,"line_end":158,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":49454,"byte_end":49457,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(dt.date(), date);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":49462,"byte_end":49494,"line_start":160,"line_end":160,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":49499,"byte_end":49502,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(dt.date().and_hms(1, 1, 1), date.and_hms(1, 1, 1));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":49507,"byte_end":49573,"line_start":162,"line_end":162,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":49578,"byte_end":49585,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":49590,"byte_end":49599,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":50286,"byte_end":50296,"line_start":182,"line_end":182,"column_start":12,"column_end":22},"name":"date_naive","qualname":"<DateTime<Tz>>::date_naive","value":"fn date_naive<'_>(&'_ Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the Date without an associated timezone","sig":null,"attributes":[{"value":"/ Retrieves the Date without an associated timezone","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":49719,"byte_end":49772,"line_start":169,"line_end":169,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":49777,"byte_end":49780,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ [`NaiveDate`] is a more well-defined type, and has more traits implemented on it,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":49785,"byte_end":49870,"line_start":171,"line_end":171,"column_start":5,"column_end":90}},{"value":"/ so should be preferred to [`Date`] any time you truly want to operate on Dates.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":49875,"byte_end":49958,"line_start":172,"line_end":172,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":49963,"byte_end":49966,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":49971,"byte_end":49978,"line_start":174,"line_end":174,"column_start":5,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":49983,"byte_end":50010,"line_start":175,"line_end":175,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":50015,"byte_end":50018,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ let date: DateTime<Utc> = Utc.ymd(2020, 1, 1).and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":50023,"byte_end":50090,"line_start":177,"line_end":177,"column_start":5,"column_end":72}},{"value":"/ let other: DateTime<FixedOffset> = FixedOffset::east(23).ymd(2020, 1, 1).and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":50095,"byte_end":50189,"line_start":178,"line_end":178,"column_start":5,"column_end":99}},{"value":"/ assert_eq!(date.date_naive(), other.date_naive());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":50194,"byte_end":50248,"line_start":179,"line_end":179,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":50253,"byte_end":50260,"line_start":180,"line_end":180,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":50265,"byte_end":50274,"line_start":181,"line_end":181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":50561,"byte_end":50565,"line_start":190,"line_end":190,"column_start":12,"column_end":16},"name":"time","qualname":"<DateTime<Tz>>::time","value":"fn time<'_>(&'_ Self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.\n Unlike `date`, this is not associated to the time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":50440,"byte_end":50471,"line_start":187,"line_end":187,"column_start":5,"column_end":36}},{"value":"/ Unlike `date`, this is not associated to the time zone.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":50476,"byte_end":50535,"line_start":188,"line_end":188,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":50540,"byte_end":50549,"line_start":189,"line_end":189,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":50782,"byte_end":50791,"line_start":197,"line_end":197,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<DateTime<Tz>>::timestamp","value":"fn timestamp<'_>(&'_ Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n (aka \"UNIX timestamp\").\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":50648,"byte_end":50724,"line_start":194,"line_end":194,"column_start":5,"column_end":81}},{"value":"/ (aka \"UNIX timestamp\").","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":50729,"byte_end":50756,"line_start":195,"line_end":195,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":50761,"byte_end":50770,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":51610,"byte_end":51626,"line_start":221,"line_end":221,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<DateTime<Tz>>::timestamp_millis","value":"fn timestamp_millis<'_>(&'_ Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-milliseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"/ Returns the number of non-leap-milliseconds since January 1, 1970 UTC","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":50853,"byte_end":50926,"line_start":201,"line_end":201,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":50931,"byte_end":50934,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ Note that this does reduce the number of years that can be represented","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":50939,"byte_end":51013,"line_start":203,"line_end":203,"column_start":5,"column_end":79}},{"value":"/ from ~584 Billion to ~584 Million. (If this is a problem, please file","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":51018,"byte_end":51091,"line_start":204,"line_end":204,"column_start":5,"column_end":78}},{"value":"/ an issue to let me know what domain needs millisecond precision over","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":51096,"byte_end":51168,"line_start":205,"line_end":205,"column_start":5,"column_end":77}},{"value":"/ billions of years, I'm curious.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":51173,"byte_end":51209,"line_start":206,"line_end":206,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":51214,"byte_end":51217,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":51222,"byte_end":51235,"line_start":208,"line_end":208,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":51240,"byte_end":51243,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":51248,"byte_end":51255,"line_start":210,"line_end":210,"column_start":5,"column_end":12}},{"value":"/ use chrono::Utc;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":51260,"byte_end":51280,"line_start":211,"line_end":211,"column_start":5,"column_end":25}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":51285,"byte_end":51310,"line_start":212,"line_end":212,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":51315,"byte_end":51318,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 444);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":51323,"byte_end":51384,"line_start":214,"line_end":214,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_444);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":51389,"byte_end":51434,"line_start":215,"line_end":215,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":51439,"byte_end":51442,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(2001, 9, 9).and_hms_milli(1, 46, 40, 555);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":51447,"byte_end":51510,"line_start":217,"line_end":217,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_000_000_000_555);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":51515,"byte_end":51572,"line_start":218,"line_end":218,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":51577,"byte_end":51584,"line_start":219,"line_end":219,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":51589,"byte_end":51598,"line_start":220,"line_end":220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52453,"byte_end":52469,"line_start":245,"line_end":245,"column_start":12,"column_end":28},"name":"timestamp_micros","qualname":"<DateTime<Tz>>::timestamp_micros","value":"fn timestamp_micros<'_>(&'_ Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-microseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"/ Returns the number of non-leap-microseconds since January 1, 1970 UTC","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":51695,"byte_end":51768,"line_start":225,"line_end":225,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":51773,"byte_end":51776,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ Note that this does reduce the number of years that can be represented","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":51781,"byte_end":51855,"line_start":227,"line_end":227,"column_start":5,"column_end":79}},{"value":"/ from ~584 Billion to ~584 Thousand. (If this is a problem, please file","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":51860,"byte_end":51934,"line_start":228,"line_end":228,"column_start":5,"column_end":79}},{"value":"/ an issue to let me know what domain needs microsecond precision over","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":51939,"byte_end":52011,"line_start":229,"line_end":229,"column_start":5,"column_end":77}},{"value":"/ millennia, I'm curious.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52016,"byte_end":52044,"line_start":230,"line_end":230,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52049,"byte_end":52052,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52057,"byte_end":52070,"line_start":232,"line_end":232,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52075,"byte_end":52078,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52083,"byte_end":52090,"line_start":234,"line_end":234,"column_start":5,"column_end":12}},{"value":"/ use chrono::Utc;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52095,"byte_end":52115,"line_start":235,"line_end":235,"column_start":5,"column_end":25}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52120,"byte_end":52145,"line_start":236,"line_end":236,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52150,"byte_end":52153,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(1970, 1, 1).and_hms_micro(0, 0, 1, 444);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52158,"byte_end":52219,"line_start":238,"line_end":238,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.timestamp_micros(), 1_000_444);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52224,"byte_end":52273,"line_start":239,"line_end":239,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52278,"byte_end":52281,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(2001, 9, 9).and_hms_micro(1, 46, 40, 555);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52286,"byte_end":52349,"line_start":241,"line_end":241,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.timestamp_micros(), 1_000_000_000_000_555);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52354,"byte_end":52415,"line_start":242,"line_end":242,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52420,"byte_end":52427,"line_start":243,"line_end":243,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52432,"byte_end":52441,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":53289,"byte_end":53304,"line_start":269,"line_end":269,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<DateTime<Tz>>::timestamp_nanos","value":"fn timestamp_nanos<'_>(&'_ Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-nanoseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"/ Returns the number of non-leap-nanoseconds since January 1, 1970 UTC","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52538,"byte_end":52610,"line_start":249,"line_end":249,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52615,"byte_end":52618,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ Note that this does reduce the number of years that can be represented","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52623,"byte_end":52697,"line_start":251,"line_end":251,"column_start":5,"column_end":79}},{"value":"/ from ~584 Billion to ~584. (If this is a problem, please file","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52702,"byte_end":52767,"line_start":252,"line_end":252,"column_start":5,"column_end":70}},{"value":"/ an issue to let me know what domain needs nanosecond precision over","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52772,"byte_end":52843,"line_start":253,"line_end":253,"column_start":5,"column_end":76}},{"value":"/ millennia, I'm curious.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52848,"byte_end":52876,"line_start":254,"line_end":254,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52881,"byte_end":52884,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52889,"byte_end":52902,"line_start":256,"line_end":256,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52907,"byte_end":52910,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52915,"byte_end":52922,"line_start":258,"line_end":258,"column_start":5,"column_end":12}},{"value":"/ use chrono::Utc;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52927,"byte_end":52947,"line_start":259,"line_end":259,"column_start":5,"column_end":25}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52952,"byte_end":52977,"line_start":260,"line_end":260,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52982,"byte_end":52985,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(1970, 1, 1).and_hms_nano(0, 0, 1, 444);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":52990,"byte_end":53050,"line_start":262,"line_end":262,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_444);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":53055,"byte_end":53107,"line_start":263,"line_end":263,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":53112,"byte_end":53115,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(2001, 9, 9).and_hms_nano(1, 46, 40, 555);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":53120,"byte_end":53182,"line_start":265,"line_end":265,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_000_000_000_555);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":53187,"byte_end":53251,"line_start":266,"line_end":266,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":53256,"byte_end":53263,"line_start":267,"line_end":267,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":53268,"byte_end":53277,"line_start":268,"line_end":268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":53634,"byte_end":53657,"line_start":279,"line_end":279,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<DateTime<Tz>>::timestamp_subsec_millis","value":"fn timestamp_subsec_millis<'_>(&'_ Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last second boundary","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":53372,"byte_end":53441,"line_start":273,"line_end":273,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":53446,"byte_end":53449,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":53454,"byte_end":53513,"line_start":275,"line_end":275,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":53518,"byte_end":53521,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of milliseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":53526,"byte_end":53608,"line_start":277,"line_end":277,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":53613,"byte_end":53622,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":53999,"byte_end":54022,"line_start":289,"line_end":289,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<DateTime<Tz>>::timestamp_subsec_micros","value":"fn timestamp_subsec_micros<'_>(&'_ Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last second boundary","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":53733,"byte_end":53802,"line_start":283,"line_end":283,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":53807,"byte_end":53810,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":53815,"byte_end":53878,"line_start":285,"line_end":285,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":53883,"byte_end":53886,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of microseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":53891,"byte_end":53973,"line_start":287,"line_end":287,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":53978,"byte_end":53987,"line_start":288,"line_end":288,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":54366,"byte_end":54388,"line_start":299,"line_end":299,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<DateTime<Tz>>::timestamp_subsec_nanos","value":"fn timestamp_subsec_nanos<'_>(&'_ Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last second boundary","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":54098,"byte_end":54166,"line_start":293,"line_end":293,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":54171,"byte_end":54174,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999_999","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":54179,"byte_end":54246,"line_start":295,"line_end":295,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":54251,"byte_end":54254,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of nanoseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":54259,"byte_end":54340,"line_start":297,"line_end":297,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":54345,"byte_end":54354,"line_start":298,"line_end":298,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":54533,"byte_end":54539,"line_start":305,"line_end":305,"column_start":12,"column_end":18},"name":"offset","qualname":"<DateTime<Tz>>::offset","value":"fn offset<'_>(&'_ Self) -> &'_ Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":54463,"byte_end":54507,"line_start":303,"line_end":303,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":54512,"byte_end":54521,"line_start":304,"line_end":304,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":54660,"byte_end":54668,"line_start":311,"line_end":311,"column_start":12,"column_end":20},"name":"timezone","qualname":"<DateTime<Tz>>::timezone","value":"fn timezone<'_>(&'_ Self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":54596,"byte_end":54634,"line_start":309,"line_end":309,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":54639,"byte_end":54648,"line_start":310,"line_end":310,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":54918,"byte_end":54931,"line_start":318,"line_end":318,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<DateTime<Tz>>::with_timezone","value":"fn with_timezone<Tz2, '_, '_>(&'_ Self, &'_ Tz2) -> DateTime<Tz2> where\nTz2: TimeZone","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n The returned `DateTime` references the same instant of time from the perspective of the provided time zone.\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":54739,"byte_end":54776,"line_start":315,"line_end":315,"column_start":5,"column_end":42}},{"value":"/ The returned `DateTime` references the same instant of time from the perspective of the provided time zone.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":54781,"byte_end":54892,"line_start":316,"line_end":316,"column_start":5,"column_end":116}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":54897,"byte_end":54906,"line_start":317,"line_end":317,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":55184,"byte_end":55202,"line_start":326,"line_end":326,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<DateTime<Tz>>::checked_add_signed","value":"fn checked_add_signed(Self, OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":55039,"byte_end":55094,"line_start":322,"line_end":322,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":55099,"byte_end":55102,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":55107,"byte_end":55158,"line_start":324,"line_end":324,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":55163,"byte_end":55172,"line_start":325,"line_end":325,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":55559,"byte_end":55577,"line_start":336,"line_end":336,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<DateTime<Tz>>::checked_sub_signed","value":"fn checked_sub_signed(Self, OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":55407,"byte_end":55469,"line_start":332,"line_end":332,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":55474,"byte_end":55477,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":55482,"byte_end":55533,"line_start":334,"line_end":334,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":55538,"byte_end":55547,"line_start":335,"line_end":335,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":55924,"byte_end":55945,"line_start":345,"line_end":345,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<DateTime<Tz>>::signed_duration_since","value":"fn signed_duration_since<Tz2>(Self, DateTime<Tz2>) -> OldDuration where\nTz2: TimeZone","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `DateTime` from the current date and time.\n This does not overflow or underflow at all.\n","sig":null,"attributes":[{"value":"/ Subtracts another `DateTime` from the current date and time.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":55782,"byte_end":55846,"line_start":342,"line_end":342,"column_start":5,"column_end":69}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":55851,"byte_end":55898,"line_start":343,"line_end":343,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":55903,"byte_end":55912,"line_start":344,"line_end":344,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":56144,"byte_end":56153,"line_start":351,"line_end":351,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<DateTime<Tz>>::naive_utc","value":"fn naive_utc<'_>(&'_ Self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC datetime.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":56073,"byte_end":56118,"line_start":349,"line_end":349,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":56123,"byte_end":56132,"line_start":350,"line_end":350,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":56286,"byte_end":56297,"line_start":357,"line_end":357,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<DateTime<Tz>>::naive_local","value":"fn naive_local<'_>(&'_ Self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive local datetime.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":56213,"byte_end":56260,"line_start":355,"line_end":355,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":56265,"byte_end":56274,"line_start":356,"line_end":356,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":56455,"byte_end":56466,"line_start":362,"line_end":362,"column_start":12,"column_end":23},"name":"years_since","qualname":"<DateTime<Tz>>::years_since","value":"fn years_since<'_>(&'_ Self, Self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the elapsed years from now to the given [`DateTime`].\n","sig":null,"attributes":[{"value":"/ Retrieve the elapsed years from now to the given [`DateTime`].","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":56377,"byte_end":56443,"line_start":361,"line_end":361,"column_start":5,"column_end":71}}]},{"kind":"Const","id":{"krate":0,"index":394},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":56945,"byte_end":56952,"line_start":379,"line_end":379,"column_start":15,"column_end":22},"name":"MIN_UTC","qualname":"::datetime::DateTime::<Tz>::MIN_UTC","value":"DateTime<Utc>","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" The minimum possible `DateTime<Utc>`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `DateTime<Utc>`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":56889,"byte_end":56930,"line_start":378,"line_end":378,"column_start":5,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":395},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":57086,"byte_end":57093,"line_start":381,"line_end":381,"column_start":15,"column_end":22},"name":"MAX_UTC","qualname":"::datetime::DateTime::<Tz>::MAX_UTC","value":"DateTime<Utc>","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" The maximum possible `DateTime<Utc>`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `DateTime<Utc>`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":57030,"byte_end":57071,"line_start":380,"line_end":380,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":57210,"byte_end":57217,"line_start":385,"line_end":385,"column_start":8,"column_end":15},"name":"default","qualname":"<DateTime<Utc> as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":57364,"byte_end":57371,"line_start":392,"line_end":392,"column_start":8,"column_end":15},"name":"default","qualname":"<DateTime<Local> as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":57500,"byte_end":57507,"line_start":398,"line_end":398,"column_start":8,"column_end":15},"name":"default","qualname":"<DateTime<FixedOffset> as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":58004,"byte_end":58008,"line_start":409,"line_end":409,"column_start":8,"column_end":12},"name":"from","qualname":"<DateTime<FixedOffset> as std::convert::From>::from","value":"fn from(DateTime<Utc>) -> Self","parent":{"krate":2,"index":3169},"children":[],"decl_id":{"krate":2,"index":3171},"docs":" Convert this `DateTime<Utc>` instance into a `DateTime<FixedOffset>` instance.","sig":null,"attributes":[{"value":"/ Convert this `DateTime<Utc>` instance into a `DateTime<FixedOffset>` instance.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":57740,"byte_end":57822,"line_start":405,"line_end":405,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":57827,"byte_end":57830,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ Conversion is done via [`DateTime::with_timezone`]. Note that the converted value returned by","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":57835,"byte_end":57932,"line_start":407,"line_end":407,"column_start":5,"column_end":102}},{"value":"/ this will be created with a fixed timezone offset of 0.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":57937,"byte_end":57996,"line_start":408,"line_end":408,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":58449,"byte_end":58453,"line_start":420,"line_end":420,"column_start":8,"column_end":12},"name":"from","qualname":"<DateTime<Local> as std::convert::From>::from","value":"fn from(DateTime<Utc>) -> Self","parent":{"krate":2,"index":3169},"children":[],"decl_id":{"krate":2,"index":3171},"docs":" Convert this `DateTime<Utc>` instance into a `DateTime<Local>` instance.","sig":null,"attributes":[{"value":"/ Convert this `DateTime<Utc>` instance into a `DateTime<Local>` instance.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":58248,"byte_end":58324,"line_start":417,"line_end":417,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":58329,"byte_end":58332,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ Conversion is performed via [`DateTime::with_timezone`], accounting for the difference in timezones.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":58337,"byte_end":58441,"line_start":419,"line_end":419,"column_start":5,"column_end":109}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":58875,"byte_end":58879,"line_start":431,"line_end":431,"column_start":8,"column_end":12},"name":"from","qualname":"<DateTime<Utc> as std::convert::From>::from","value":"fn from(DateTime<FixedOffset>) -> Self","parent":{"krate":2,"index":3169},"children":[],"decl_id":{"krate":2,"index":3171},"docs":" Convert this `DateTime<FixedOffset>` instance into a `DateTime<Utc>` instance.","sig":null,"attributes":[{"value":"/ Convert this `DateTime<FixedOffset>` instance into a `DateTime<Utc>` instance.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":58664,"byte_end":58746,"line_start":427,"line_end":427,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":58751,"byte_end":58754,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ Conversion is performed via [`DateTime::with_timezone`], accounting for the timezone","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":58759,"byte_end":58847,"line_start":429,"line_end":429,"column_start":5,"column_end":93}},{"value":"/ difference.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":58852,"byte_end":58867,"line_start":430,"line_end":430,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":59343,"byte_end":59347,"line_start":443,"line_end":443,"column_start":8,"column_end":12},"name":"from","qualname":"<DateTime<Local> as std::convert::From>::from","value":"fn from(DateTime<FixedOffset>) -> Self","parent":{"krate":2,"index":3169},"children":[],"decl_id":{"krate":2,"index":3171},"docs":" Convert this `DateTime<FixedOffset>` instance into a `DateTime<Local>` instance.","sig":null,"attributes":[{"value":"/ Convert this `DateTime<FixedOffset>` instance into a `DateTime<Local>` instance.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":59126,"byte_end":59210,"line_start":439,"line_end":439,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":59215,"byte_end":59218,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ Conversion is performed via [`DateTime::with_timezone`]. Returns the equivalent value in local","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":59223,"byte_end":59321,"line_start":441,"line_end":441,"column_start":5,"column_end":103}},{"value":"/ time.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":59326,"byte_end":59335,"line_start":442,"line_end":442,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":59789,"byte_end":59793,"line_start":455,"line_end":455,"column_start":8,"column_end":12},"name":"from","qualname":"<DateTime<Utc> as std::convert::From>::from","value":"fn from(DateTime<Local>) -> Self","parent":{"krate":2,"index":3169},"children":[],"decl_id":{"krate":2,"index":3171},"docs":" Convert this `DateTime<Local>` instance into a `DateTime<Utc>` instance.","sig":null,"attributes":[{"value":"/ Convert this `DateTime<Local>` instance into a `DateTime<Utc>` instance.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":59580,"byte_end":59656,"line_start":451,"line_end":451,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":59661,"byte_end":59664,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ Conversion is performed via [`DateTime::with_timezone`], accounting for the difference in","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":59669,"byte_end":59762,"line_start":453,"line_end":453,"column_start":5,"column_end":98}},{"value":"/ timezones.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":59767,"byte_end":59781,"line_start":454,"line_end":454,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":60305,"byte_end":60309,"line_start":467,"line_end":467,"column_start":8,"column_end":12},"name":"from","qualname":"<DateTime<FixedOffset> as std::convert::From>::from","value":"fn from(DateTime<Local>) -> Self","parent":{"krate":2,"index":3169},"children":[],"decl_id":{"krate":2,"index":3171},"docs":" Convert this `DateTime<Local>` instance into a `DateTime<FixedOffset>` instance.","sig":null,"attributes":[{"value":"/ Convert this `DateTime<Local>` instance into a `DateTime<FixedOffset>` instance.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":60034,"byte_end":60118,"line_start":463,"line_end":463,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":60123,"byte_end":60126,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ Conversion is performed via [`DateTime::with_timezone`]. Note that the converted value returned","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":60131,"byte_end":60230,"line_start":465,"line_end":465,"column_start":5,"column_end":104}},{"value":"/ by this will be created with a fixed timezone offset of 0.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":60235,"byte_end":60297,"line_start":466,"line_end":466,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":61335,"byte_end":61353,"line_start":494,"line_end":494,"column_start":12,"column_end":30},"name":"parse_from_rfc2822","qualname":"<DateTime<FixedOffset>>::parse_from_rfc2822","value":"fn parse_from_rfc2822<'_>(&'_ str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,\n then returns a new [`DateTime`] with a parsed [`FixedOffset`].","sig":null,"attributes":[{"value":"/ Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":60758,"byte_end":60843,"line_start":481,"line_end":481,"column_start":5,"column_end":90}},{"value":"/ then returns a new [`DateTime`] with a parsed [`FixedOffset`].","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":60848,"byte_end":60914,"line_start":482,"line_end":482,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":60919,"byte_end":60922,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ RFC 2822 is the internet message standard that specifies the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":60927,"byte_end":60991,"line_start":484,"line_end":484,"column_start":5,"column_end":69}},{"value":"/ representation of times in HTTP and email headers.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":60996,"byte_end":61050,"line_start":485,"line_end":485,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":61055,"byte_end":61058,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":61063,"byte_end":61070,"line_start":487,"line_end":487,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{DateTime, FixedOffset, TimeZone};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":61075,"byte_end":61127,"line_start":488,"line_end":488,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":61132,"byte_end":61147,"line_start":489,"line_end":489,"column_start":5,"column_end":20}},{"value":"/     DateTime::parse_from_rfc2822(\"Wed, 18 Feb 2015 23:16:09 GMT\").unwrap(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":61152,"byte_end":61231,"line_start":490,"line_end":490,"column_start":5,"column_end":84}},{"value":"/     FixedOffset::east(0).ymd(2015, 2, 18).and_hms(23, 16, 9)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":61236,"byte_end":61300,"line_start":491,"line_end":491,"column_start":5,"column_end":69}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":61305,"byte_end":61311,"line_start":492,"line_end":492,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":61316,"byte_end":61323,"line_start":493,"line_end":493,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":61974,"byte_end":61992,"line_start":506,"line_end":506,"column_start":12,"column_end":30},"name":"parse_from_rfc3339","qualname":"<DateTime<FixedOffset>>::parse_from_rfc3339","value":"fn parse_from_rfc3339<'_>(&'_ str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,\n then returns a new [`DateTime`] with a parsed [`FixedOffset`].","sig":null,"attributes":[{"value":"/ Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":61601,"byte_end":61694,"line_start":501,"line_end":501,"column_start":5,"column_end":98}},{"value":"/ then returns a new [`DateTime`] with a parsed [`FixedOffset`].","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":61699,"byte_end":61765,"line_start":502,"line_end":502,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":61770,"byte_end":61773,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ Why isn't this named `parse_from_iso8601`? That's because ISO 8601 allows some freedom","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":61778,"byte_end":61868,"line_start":504,"line_end":504,"column_start":5,"column_end":95}},{"value":"/ over the syntax and RFC 3339 exercises that freedom to rigidly define a fixed format.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":61873,"byte_end":61962,"line_start":505,"line_end":505,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":63138,"byte_end":63152,"line_start":535,"line_end":535,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<DateTime<FixedOffset>>::parse_from_str","value":"fn parse_from_str<'_, '_>(&'_ str, &'_ str)\n-> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new\n [`DateTime`] with a parsed [`FixedOffset`].","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":62240,"byte_end":62310,"line_start":513,"line_end":513,"column_start":5,"column_end":75}},{"value":"/ [`DateTime`] with a parsed [`FixedOffset`].","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":62315,"byte_end":62362,"line_start":514,"line_end":514,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":62367,"byte_end":62370,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ See the [`crate::format::strftime`] module on the supported escape","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":62375,"byte_end":62445,"line_start":516,"line_end":516,"column_start":5,"column_end":75}},{"value":"/ sequences.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":62450,"byte_end":62464,"line_start":517,"line_end":517,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":62469,"byte_end":62472,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ See also [`TimeZone::datetime_from_str`] which gives a local","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":62477,"byte_end":62541,"line_start":519,"line_end":519,"column_start":5,"column_end":69}},{"value":"/ [`DateTime`] on specific time zone.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":62546,"byte_end":62585,"line_start":520,"line_end":520,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":62590,"byte_end":62593,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ Note that this method *requires a timezone* in the string. See","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":62598,"byte_end":62664,"line_start":522,"line_end":522,"column_start":5,"column_end":71}},{"value":"/ [`NaiveDateTime::parse_from_str`]","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":62669,"byte_end":62706,"line_start":523,"line_end":523,"column_start":5,"column_end":42}},{"value":"/ for a version that does not require a timezone in the to-be-parsed str.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":62711,"byte_end":62786,"line_start":524,"line_end":524,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":62791,"byte_end":62794,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":62799,"byte_end":62812,"line_start":526,"line_end":526,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":62817,"byte_end":62820,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":62825,"byte_end":62836,"line_start":528,"line_end":528,"column_start":5,"column_end":16}},{"value":"/ use chrono::{DateTime, FixedOffset, TimeZone};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":62841,"byte_end":62891,"line_start":529,"line_end":529,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":62896,"byte_end":62899,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ let dt = DateTime::parse_from_str(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":62904,"byte_end":62942,"line_start":531,"line_end":531,"column_start":5,"column_end":43}},{"value":"/     \"1983 Apr 13 12:09:14.274 +0000\", \"%Y %b %d %H:%M:%S%.3f %z\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":62947,"byte_end":63017,"line_start":532,"line_end":532,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(dt, Ok(FixedOffset::east(0).ymd(1983, 4, 13).and_hms_milli(12, 9, 14, 274)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":63022,"byte_end":63114,"line_start":533,"line_end":533,"column_start":5,"column_end":97}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":63119,"byte_end":63126,"line_start":534,"line_end":534,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":63578,"byte_end":63588,"line_start":548,"line_end":548,"column_start":12,"column_end":22},"name":"to_rfc2822","qualname":"<DateTime<Tz>>::to_rfc2822","value":"fn to_rfc2822<'_>(&'_ Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.\n","sig":null,"attributes":[{"value":"/ Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":63422,"byte_end":63508,"line_start":546,"line_end":546,"column_start":5,"column_end":91}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":63513,"byte_end":63566,"line_start":547,"line_end":547,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":63912,"byte_end":63922,"line_start":555,"line_end":555,"column_start":12,"column_end":22},"name":"to_rfc3339","qualname":"<DateTime<Tz>>::to_rfc3339","value":"fn to_rfc3339<'_>(&'_ Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.\n","sig":null,"attributes":[{"value":"/ Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":63748,"byte_end":63842,"line_start":553,"line_end":553,"column_start":5,"column_end":99}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":63847,"byte_end":63900,"line_start":554,"line_end":554,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":65274,"byte_end":65289,"line_start":585,"line_end":585,"column_start":12,"column_end":27},"name":"to_rfc3339_opts","qualname":"<DateTime<Tz>>::to_rfc3339_opts","value":"fn to_rfc3339_opts<'_>(&'_ Self, SecondsFormat, bool) -> String","parent":null,"children":[],"decl_id":null,"docs":" Return an RFC 3339 and ISO 8601 date and time string with subseconds\n formatted as per a `SecondsFormat`.","sig":null,"attributes":[{"value":"/ Return an RFC 3339 and ISO 8601 date and time string with subseconds","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":64082,"byte_end":64154,"line_start":560,"line_end":560,"column_start":5,"column_end":77}},{"value":"/ formatted as per a `SecondsFormat`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":64159,"byte_end":64198,"line_start":561,"line_end":561,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":64203,"byte_end":64206,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ If passed `use_z` true and the timezone is UTC (offset 0), use 'Z', as","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":64211,"byte_end":64285,"line_start":563,"line_end":563,"column_start":5,"column_end":79}},{"value":"/ per [`Fixed::TimezoneOffsetColonZ`] If passed `use_z` false, use","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":64290,"byte_end":64358,"line_start":564,"line_end":564,"column_start":5,"column_end":73}},{"value":"/ [`Fixed::TimezoneOffsetColon`]","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":64363,"byte_end":64397,"line_start":565,"line_end":565,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":64402,"byte_end":64405,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":64410,"byte_end":64424,"line_start":567,"line_end":567,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":64429,"byte_end":64432,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":64437,"byte_end":64448,"line_start":569,"line_end":569,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{DateTime, FixedOffset, SecondsFormat, TimeZone, Utc};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":64453,"byte_end":64525,"line_start":570,"line_end":570,"column_start":5,"column_end":77}},{"value":"/ let dt = Utc.ymd(2018, 1, 26).and_hms_micro(18, 30, 9, 453_829);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":64530,"byte_end":64598,"line_start":571,"line_end":571,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, false),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":64603,"byte_end":64667,"line_start":572,"line_end":572,"column_start":5,"column_end":69}},{"value":"/            \"2018-01-26T18:30:09.453+00:00\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":64672,"byte_end":64720,"line_start":573,"line_end":573,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, true),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":64725,"byte_end":64788,"line_start":574,"line_end":574,"column_start":5,"column_end":68}},{"value":"/            \"2018-01-26T18:30:09.453Z\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":64793,"byte_end":64836,"line_start":575,"line_end":575,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":64841,"byte_end":64902,"line_start":576,"line_end":576,"column_start":5,"column_end":66}},{"value":"/            \"2018-01-26T18:30:09Z\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":64907,"byte_end":64946,"line_start":577,"line_end":577,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":64951,"byte_end":64954,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ let pst = FixedOffset::east(8 * 60 * 60);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":64959,"byte_end":65004,"line_start":579,"line_end":579,"column_start":5,"column_end":50}},{"value":"/ let dt = pst.ymd(2018, 1, 26).and_hms_micro(10, 30, 9, 453_829);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":65009,"byte_end":65077,"line_start":580,"line_end":580,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":65082,"byte_end":65143,"line_start":581,"line_end":581,"column_start":5,"column_end":66}},{"value":"/            \"2018-01-26T10:30:09+08:00\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":65148,"byte_end":65192,"line_start":582,"line_end":582,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":65197,"byte_end":65204,"line_start":583,"line_end":583,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":65209,"byte_end":65262,"line_start":584,"line_end":584,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":66912,"byte_end":66929,"line_start":630,"line_end":630,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<DateTime<Tz>>::format_with_items","value":"fn format_with_items<'a, I, B, '_>(&'_ Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified formatting items.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":66753,"byte_end":66828,"line_start":627,"line_end":627,"column_start":5,"column_end":80}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":66833,"byte_end":66886,"line_start":628,"line_end":628,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":66891,"byte_end":66900,"line_start":629,"line_end":629,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":67764,"byte_end":67770,"line_start":653,"line_end":653,"column_start":12,"column_end":18},"name":"format","qualname":"<DateTime<Tz>>::format","value":"fn format<'a, '_>(&'_ Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`crate::format::strftime`] module\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified format string.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":67212,"byte_end":67284,"line_start":639,"line_end":639,"column_start":5,"column_end":77}},{"value":"/ See the [`crate::format::strftime`] module","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":67289,"byte_end":67335,"line_start":640,"line_end":640,"column_start":5,"column_end":51}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":67340,"byte_end":67378,"line_start":641,"line_end":641,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":67383,"byte_end":67386,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":67391,"byte_end":67404,"line_start":643,"line_end":643,"column_start":5,"column_end":18}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":67409,"byte_end":67420,"line_start":644,"line_end":644,"column_start":5,"column_end":16}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":67425,"byte_end":67452,"line_start":645,"line_end":645,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":67457,"byte_end":67460,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ let date_time: DateTime<Utc> = Utc.ymd(2017, 04, 02).and_hms(12, 50, 32);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":67465,"byte_end":67542,"line_start":647,"line_end":647,"column_start":5,"column_end":82}},{"value":"/ let formatted = format!(\"{}\", date_time.format(\"%d/%m/%Y %H:%M\"));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":67547,"byte_end":67617,"line_start":648,"line_end":648,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(formatted, \"02/04/2017 12:50\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":67622,"byte_end":67668,"line_start":649,"line_end":649,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":67673,"byte_end":67680,"line_start":650,"line_end":650,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":67685,"byte_end":67738,"line_start":651,"line_end":651,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":67743,"byte_end":67752,"line_start":652,"line_end":652,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":69054,"byte_end":69058,"line_start":697,"line_end":697,"column_start":8,"column_end":12},"name":"year","qualname":"<DateTime<Tz> as traits::Datelike>::year","value":"fn year<'_>(&'_ Self) -> i32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2267},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":69037,"byte_end":69046,"line_start":696,"line_end":696,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":69136,"byte_end":69141,"line_start":701,"line_end":701,"column_start":8,"column_end":13},"name":"month","qualname":"<DateTime<Tz> as traits::Datelike>::month","value":"fn month<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2269},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":69119,"byte_end":69128,"line_start":700,"line_end":700,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":69220,"byte_end":69226,"line_start":705,"line_end":705,"column_start":8,"column_end":14},"name":"month0","qualname":"<DateTime<Tz> as traits::Datelike>::month0","value":"fn month0<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2270},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":69203,"byte_end":69212,"line_start":704,"line_end":704,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":69306,"byte_end":69309,"line_start":709,"line_end":709,"column_start":8,"column_end":11},"name":"day","qualname":"<DateTime<Tz> as traits::Datelike>::day","value":"fn day<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2271},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":69289,"byte_end":69298,"line_start":708,"line_end":708,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":69386,"byte_end":69390,"line_start":713,"line_end":713,"column_start":8,"column_end":12},"name":"day0","qualname":"<DateTime<Tz> as traits::Datelike>::day0","value":"fn day0<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2272},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":69369,"byte_end":69378,"line_start":712,"line_end":712,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":69468,"byte_end":69475,"line_start":717,"line_end":717,"column_start":8,"column_end":15},"name":"ordinal","qualname":"<DateTime<Tz> as traits::Datelike>::ordinal","value":"fn ordinal<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2273},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":69451,"byte_end":69460,"line_start":716,"line_end":716,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":69556,"byte_end":69564,"line_start":721,"line_end":721,"column_start":8,"column_end":16},"name":"ordinal0","qualname":"<DateTime<Tz> as traits::Datelike>::ordinal0","value":"fn ordinal0<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2274},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":69539,"byte_end":69548,"line_start":720,"line_end":720,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":69646,"byte_end":69653,"line_start":725,"line_end":725,"column_start":8,"column_end":15},"name":"weekday","qualname":"<DateTime<Tz> as traits::Datelike>::weekday","value":"fn weekday<'_>(&'_ Self) -> Weekday","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2275},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":69629,"byte_end":69638,"line_start":724,"line_end":724,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":69738,"byte_end":69746,"line_start":729,"line_end":729,"column_start":8,"column_end":16},"name":"iso_week","qualname":"<DateTime<Tz> as traits::Datelike>::iso_week","value":"fn iso_week<'_>(&'_ Self) -> IsoWeek","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2276},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":69721,"byte_end":69730,"line_start":728,"line_end":728,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":69833,"byte_end":69842,"line_start":734,"line_end":734,"column_start":8,"column_end":17},"name":"with_year","qualname":"<DateTime<Tz> as traits::Datelike>::with_year","value":"fn with_year<'_>(&'_ Self, i32) -> Option<DateTime<Tz>>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2277},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":69816,"byte_end":69825,"line_start":733,"line_end":733,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":69976,"byte_end":69986,"line_start":739,"line_end":739,"column_start":8,"column_end":18},"name":"with_month","qualname":"<DateTime<Tz> as traits::Datelike>::with_month","value":"fn with_month<'_>(&'_ Self, u32) -> Option<DateTime<Tz>>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2278},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":69959,"byte_end":69968,"line_start":738,"line_end":738,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":70123,"byte_end":70134,"line_start":744,"line_end":744,"column_start":8,"column_end":19},"name":"with_month0","qualname":"<DateTime<Tz> as traits::Datelike>::with_month0","value":"fn with_month0<'_>(&'_ Self, u32) -> Option<DateTime<Tz>>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2279},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":70106,"byte_end":70115,"line_start":743,"line_end":743,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":70274,"byte_end":70282,"line_start":749,"line_end":749,"column_start":8,"column_end":16},"name":"with_day","qualname":"<DateTime<Tz> as traits::Datelike>::with_day","value":"fn with_day<'_>(&'_ Self, u32) -> Option<DateTime<Tz>>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2280},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":70257,"byte_end":70266,"line_start":748,"line_end":748,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":70413,"byte_end":70422,"line_start":754,"line_end":754,"column_start":8,"column_end":17},"name":"with_day0","qualname":"<DateTime<Tz> as traits::Datelike>::with_day0","value":"fn with_day0<'_>(&'_ Self, u32) -> Option<DateTime<Tz>>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2281},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":70396,"byte_end":70405,"line_start":753,"line_end":753,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":70556,"byte_end":70568,"line_start":759,"line_end":759,"column_start":8,"column_end":20},"name":"with_ordinal","qualname":"<DateTime<Tz> as traits::Datelike>::with_ordinal","value":"fn with_ordinal<'_>(&'_ Self, u32) -> Option<DateTime<Tz>>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2282},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":70539,"byte_end":70548,"line_start":758,"line_end":758,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":70711,"byte_end":70724,"line_start":764,"line_end":764,"column_start":8,"column_end":21},"name":"with_ordinal0","qualname":"<DateTime<Tz> as traits::Datelike>::with_ordinal0","value":"fn with_ordinal0<'_>(&'_ Self, u32) -> Option<DateTime<Tz>>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2283},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":70694,"byte_end":70703,"line_start":763,"line_end":763,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":70919,"byte_end":70923,"line_start":771,"line_end":771,"column_start":8,"column_end":12},"name":"hour","qualname":"<DateTime<Tz> as traits::Timelike>::hour","value":"fn hour<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2285},"children":[],"decl_id":{"krate":0,"index":2286},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":70902,"byte_end":70911,"line_start":770,"line_end":770,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":71001,"byte_end":71007,"line_start":775,"line_end":775,"column_start":8,"column_end":14},"name":"minute","qualname":"<DateTime<Tz> as traits::Timelike>::minute","value":"fn minute<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2285},"children":[],"decl_id":{"krate":0,"index":2288},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":70984,"byte_end":70993,"line_start":774,"line_end":774,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":71087,"byte_end":71093,"line_start":779,"line_end":779,"column_start":8,"column_end":14},"name":"second","qualname":"<DateTime<Tz> as traits::Timelike>::second","value":"fn second<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2285},"children":[],"decl_id":{"krate":0,"index":2289},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":71070,"byte_end":71079,"line_start":778,"line_end":778,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":71173,"byte_end":71183,"line_start":783,"line_end":783,"column_start":8,"column_end":18},"name":"nanosecond","qualname":"<DateTime<Tz> as traits::Timelike>::nanosecond","value":"fn nanosecond<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2285},"children":[],"decl_id":{"krate":0,"index":2290},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":71156,"byte_end":71165,"line_start":782,"line_end":782,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":71268,"byte_end":71277,"line_start":788,"line_end":788,"column_start":8,"column_end":17},"name":"with_hour","qualname":"<DateTime<Tz> as traits::Timelike>::with_hour","value":"fn with_hour<'_>(&'_ Self, u32) -> Option<DateTime<Tz>>","parent":{"krate":0,"index":2285},"children":[],"decl_id":{"krate":0,"index":2291},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":71251,"byte_end":71260,"line_start":787,"line_end":787,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":71411,"byte_end":71422,"line_start":793,"line_end":793,"column_start":8,"column_end":19},"name":"with_minute","qualname":"<DateTime<Tz> as traits::Timelike>::with_minute","value":"fn with_minute<'_>(&'_ Self, u32) -> Option<DateTime<Tz>>","parent":{"krate":0,"index":2285},"children":[],"decl_id":{"krate":0,"index":2292},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":71394,"byte_end":71403,"line_start":792,"line_end":792,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":71556,"byte_end":71567,"line_start":798,"line_end":798,"column_start":8,"column_end":19},"name":"with_second","qualname":"<DateTime<Tz> as traits::Timelike>::with_second","value":"fn with_second<'_>(&'_ Self, u32) -> Option<DateTime<Tz>>","parent":{"krate":0,"index":2285},"children":[],"decl_id":{"krate":0,"index":2293},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":71539,"byte_end":71548,"line_start":797,"line_end":797,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":71701,"byte_end":71716,"line_start":803,"line_end":803,"column_start":8,"column_end":23},"name":"with_nanosecond","qualname":"<DateTime<Tz> as traits::Timelike>::with_nanosecond","value":"fn with_nanosecond<'_>(&'_ Self, u32) -> Option<DateTime<Tz>>","parent":{"krate":0,"index":2285},"children":[],"decl_id":{"krate":0,"index":2294},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":71684,"byte_end":71693,"line_start":802,"line_end":802,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":72158,"byte_end":72160,"line_start":813,"line_end":813,"column_start":8,"column_end":10},"name":"eq","qualname":"<DateTime<Tz> as std::cmp::PartialEq>::eq","value":"fn eq<'_, '_>(&'_ Self, &'_ DateTime<Tz2>) -> bool","parent":{"krate":2,"index":2915},"children":[],"decl_id":{"krate":2,"index":2917},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":72953,"byte_end":72964,"line_start":836,"line_end":836,"column_start":8,"column_end":19},"name":"partial_cmp","qualname":"<DateTime<Tz> as std::cmp::PartialOrd>::partial_cmp","value":"fn partial_cmp<'_, '_>(&'_ Self, &'_ DateTime<Tz2>) -> Option<Ordering>","parent":{"krate":2,"index":2961},"children":[],"decl_id":{"krate":2,"index":2963},"docs":" Compare two DateTimes based on their true time, ignoring time zones","sig":null,"attributes":[{"value":"/ Compare two DateTimes based on their true time, ignoring time zones","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":72376,"byte_end":72447,"line_start":821,"line_end":821,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":72452,"byte_end":72455,"line_start":822,"line_end":822,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":72460,"byte_end":72473,"line_start":823,"line_end":823,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":72478,"byte_end":72481,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":72486,"byte_end":72493,"line_start":825,"line_end":825,"column_start":5,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":72498,"byte_end":72525,"line_start":826,"line_end":826,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":72530,"byte_end":72533,"line_start":827,"line_end":827,"column_start":5,"column_end":8}},{"value":"/ let earlier = Utc.ymd(2015, 5, 15).and_hms(2, 0, 0).with_timezone(&FixedOffset::west(1 * 3600));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":72538,"byte_end":72638,"line_start":828,"line_end":828,"column_start":5,"column_end":105}},{"value":"/ let later   = Utc.ymd(2015, 5, 15).and_hms(3, 0, 0).with_timezone(&FixedOffset::west(5 * 3600));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":72643,"byte_end":72743,"line_start":829,"line_end":829,"column_start":5,"column_end":105}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":72748,"byte_end":72751,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(earlier.to_string(), \"2015-05-15 01:00:00 -01:00\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":72756,"byte_end":72822,"line_start":831,"line_end":831,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(later.to_string(), \"2015-05-14 22:00:00 -05:00\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":72827,"byte_end":72891,"line_start":832,"line_end":832,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":72896,"byte_end":72899,"line_start":833,"line_end":833,"column_start":5,"column_end":8}},{"value":"/ assert!(later > earlier);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":72904,"byte_end":72933,"line_start":834,"line_end":834,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":72938,"byte_end":72945,"line_start":835,"line_end":835,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":73126,"byte_end":73129,"line_start":842,"line_end":842,"column_start":8,"column_end":11},"name":"cmp","qualname":"<DateTime<Tz> as std::cmp::Ord>::cmp","value":"fn cmp<'_, '_>(&'_ Self, &'_ DateTime<Tz>) -> Ordering","parent":{"krate":2,"index":2951},"children":[],"decl_id":{"krate":2,"index":2952},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":73281,"byte_end":73285,"line_start":848,"line_end":848,"column_start":8,"column_end":12},"name":"hash","qualname":"<DateTime<Tz> as std::hash::Hash>::hash","value":"fn hash<H, '_, '_>(&'_ Self, &'_ mut H) where H: hash::Hasher","parent":{"krate":2,"index":10531},"children":[],"decl_id":{"krate":2,"index":10532},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":73479,"byte_end":73482,"line_start":857,"line_end":857,"column_start":8,"column_end":11},"name":"add","qualname":"<DateTime<Tz> as std::ops::Add>::add","value":"fn add(Self, OldDuration) -> DateTime<Tz>","parent":{"krate":2,"index":3331},"children":[],"decl_id":{"krate":2,"index":3334},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":73462,"byte_end":73471,"line_start":856,"line_end":856,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":73696,"byte_end":73706,"line_start":864,"line_end":864,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<DateTime<Tz> as std::ops::AddAssign>::add_assign","value":"fn add_assign<'_>(&'_ mut Self, OldDuration)","parent":{"krate":2,"index":3362},"children":[],"decl_id":{"krate":2,"index":3364},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":73679,"byte_end":73688,"line_start":863,"line_end":863,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74056,"byte_end":74059,"line_start":876,"line_end":876,"column_start":8,"column_end":11},"name":"sub","qualname":"<DateTime<Tz> as std::ops::Sub>::sub","value":"fn sub(Self, OldDuration) -> DateTime<Tz>","parent":{"krate":2,"index":3336},"children":[],"decl_id":{"krate":2,"index":3339},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74039,"byte_end":74048,"line_start":875,"line_end":875,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74273,"byte_end":74283,"line_start":883,"line_end":883,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<DateTime<Tz> as std::ops::SubAssign>::sub_assign","value":"fn sub_assign<'_>(&'_ mut Self, OldDuration)","parent":{"krate":2,"index":3366},"children":[],"decl_id":{"krate":2,"index":3368},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74256,"byte_end":74265,"line_start":882,"line_end":882,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74632,"byte_end":74635,"line_start":895,"line_end":895,"column_start":8,"column_end":11},"name":"sub","qualname":"<DateTime<Tz> as std::ops::Sub>::sub","value":"fn sub(Self, DateTime<Tz>) -> OldDuration","parent":{"krate":2,"index":3336},"children":[],"decl_id":{"krate":2,"index":3339},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74615,"byte_end":74624,"line_start":894,"line_end":894,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74783,"byte_end":74786,"line_start":901,"line_end":901,"column_start":8,"column_end":11},"name":"fmt","qualname":"<DateTime<Tz> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10293},"children":[],"decl_id":{"krate":2,"index":10294},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":75001,"byte_end":75004,"line_start":910,"line_end":910,"column_start":8,"column_end":11},"name":"fmt","qualname":"<DateTime<Tz> as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10300},"children":[],"decl_id":{"krate":2,"index":10301},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":75635,"byte_end":75643,"line_start":929,"line_end":929,"column_start":8,"column_end":16},"name":"from_str","qualname":"<DateTime<Utc> as std::str::FromStr>::from_str","value":"fn from_str<'_>(&'_ str) -> ParseResult<DateTime<Utc>>","parent":{"krate":2,"index":12994},"children":[],"decl_id":{"krate":2,"index":12996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76319,"byte_end":76327,"line_start":949,"line_end":949,"column_start":8,"column_end":16},"name":"from_str","qualname":"<DateTime<Local> as std::str::FromStr>::from_str","value":"fn from_str<'_>(&'_ str) -> ParseResult<DateTime<Local>>","parent":{"krate":2,"index":12994},"children":[],"decl_id":{"krate":2,"index":12996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76542,"byte_end":76546,"line_start":956,"line_end":956,"column_start":8,"column_end":12},"name":"from","qualname":"<DateTime<Utc> as std::convert::From>::from","value":"fn from(SystemTime) -> DateTime<Utc>","parent":{"krate":2,"index":3169},"children":[],"decl_id":{"krate":2,"index":3171},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":77204,"byte_end":77208,"line_start":976,"line_end":976,"column_start":8,"column_end":12},"name":"from","qualname":"<DateTime<Local> as std::convert::From>::from","value":"fn from(SystemTime) -> DateTime<Local>","parent":{"krate":2,"index":3169},"children":[],"decl_id":{"krate":2,"index":3171},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":77406,"byte_end":77410,"line_start":983,"line_end":983,"column_start":8,"column_end":12},"name":"from","qualname":"<SystemTime as std::convert::From>::from","value":"fn from(DateTime<Tz>) -> SystemTime","parent":{"krate":2,"index":3169},"children":[],"decl_id":{"krate":2,"index":3171},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":558},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"format","qualname":"::format","value":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","parent":null,"children":[{"krate":0,"index":559},{"krate":0,"index":562},{"krate":0,"index":565},{"krate":0,"index":568},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":575},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":582},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":589},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":596},{"krate":0,"index":599},{"krate":0,"index":602},{"krate":0,"index":605},{"krate":0,"index":608},{"krate":0,"index":611},{"krate":0,"index":2341},{"krate":0,"index":2343},{"krate":0,"index":2345},{"krate":0,"index":2346},{"krate":0,"index":2348},{"krate":0,"index":2349},{"krate":0,"index":2351},{"krate":0,"index":2352},{"krate":0,"index":2354},{"krate":0,"index":2361},{"krate":0,"index":2362},{"krate":0,"index":2364},{"krate":0,"index":2365},{"krate":0,"index":2367},{"krate":0,"index":2368},{"krate":0,"index":2370},{"krate":0,"index":2372},{"krate":0,"index":2416},{"krate":0,"index":2418},{"krate":0,"index":2419},{"krate":0,"index":2422},{"krate":0,"index":2423},{"krate":0,"index":2425},{"krate":0,"index":614},{"krate":0,"index":616},{"krate":0,"index":618},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":2427},{"krate":0,"index":2465},{"krate":0,"index":2467},{"krate":0,"index":2468},{"krate":0,"index":2471},{"krate":0,"index":2472},{"krate":0,"index":2474},{"krate":0,"index":2476},{"krate":0,"index":2478},{"krate":0,"index":2480},{"krate":0,"index":2482},{"krate":0,"index":2483},{"krate":0,"index":2486},{"krate":0,"index":2487},{"krate":0,"index":2489},{"krate":0,"index":2498},{"krate":0,"index":2500},{"krate":0,"index":2502},{"krate":0,"index":2503},{"krate":0,"index":2505},{"krate":0,"index":2506},{"krate":0,"index":2508},{"krate":0,"index":2531},{"krate":0,"index":2534},{"krate":0,"index":2536},{"krate":0,"index":2540},{"krate":0,"index":2542},{"krate":0,"index":2545},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":2548},{"krate":0,"index":2551},{"krate":0,"index":2553},{"krate":0,"index":2555},{"krate":0,"index":2556},{"krate":0,"index":2559},{"krate":0,"index":2560},{"krate":0,"index":2562},{"krate":0,"index":630},{"krate":0,"index":2563},{"krate":0,"index":2580},{"krate":0,"index":2582},{"krate":0,"index":2584},{"krate":0,"index":2585},{"krate":0,"index":2587},{"krate":0,"index":2588},{"krate":0,"index":2590},{"krate":0,"index":632},{"krate":0,"index":634},{"krate":0,"index":636},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":647},{"krate":0,"index":701},{"krate":0,"index":705},{"krate":0,"index":814},{"krate":0,"index":929},{"krate":0,"index":995},{"krate":0,"index":2646},{"krate":0,"index":2652},{"krate":0,"index":1036},{"krate":0,"index":1043},{"krate":0,"index":1048},{"krate":0,"index":1051}],"decl_id":null,"docs":" Formatting (and parsing) utilities for date and time.","sig":null,"attributes":[{"value":"/ Formatting (and parsing) utilities for date and time.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":83509,"byte_end":83566,"line_start":4,"line_end":4,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":83567,"byte_end":83570,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This module provides the common types and routines to implement,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":83571,"byte_end":83639,"line_start":6,"line_end":6,"column_start":1,"column_end":69}},{"value":"/ for example, [`DateTime::format`](../struct.DateTime.html#method.format) or","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":83640,"byte_end":83719,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ [`DateTime::parse_from_str`](../struct.DateTime.html#method.parse_from_str) methods.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":83720,"byte_end":83808,"line_start":8,"line_end":8,"column_start":1,"column_end":89}},{"value":"/ For most cases you should use these high-level interfaces.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":83809,"byte_end":83871,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":83872,"byte_end":83875,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Internally the formatting and parsing shares the same abstract **formatting items**,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":83876,"byte_end":83964,"line_start":11,"line_end":11,"column_start":1,"column_end":89}},{"value":"/ which are just an [`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) of","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":83965,"byte_end":84058,"line_start":12,"line_end":12,"column_start":1,"column_end":94}},{"value":"/ the [`Item`](./enum.Item.html) type.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":84059,"byte_end":84099,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"/ They are generated from more readable **format strings**;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":84100,"byte_end":84161,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"/ currently Chrono supports a built-in syntax closely resembling","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":84162,"byte_end":84228,"line_start":15,"line_end":15,"column_start":1,"column_end":67}},{"value":"/ C's `strftime` format. The available options can be found [here](./strftime/index.html).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":84229,"byte_end":84321,"line_start":16,"line_end":16,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":84322,"byte_end":84325,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":84326,"byte_end":84339,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":84340,"byte_end":84351,"line_start":19,"line_end":19,"column_start":1,"column_end":12}},{"value":"/ # use std::error::Error;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":84352,"byte_end":84380,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":84381,"byte_end":84408,"line_start":21,"line_end":21,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":84409,"byte_end":84412,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ let date_time = Utc.ymd(2020, 11, 10).and_hms(0, 1, 32);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":84413,"byte_end":84473,"line_start":23,"line_end":23,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":84474,"byte_end":84477,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ let formatted = format!(\"{}\", date_time.format(\"%Y-%m-%d %H:%M:%S\"));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":84478,"byte_end":84551,"line_start":25,"line_end":25,"column_start":1,"column_end":74}},{"value":"/ assert_eq!(formatted, \"2020-11-10 00:01:32\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":84552,"byte_end":84601,"line_start":26,"line_end":26,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":84602,"byte_end":84605,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ let parsed = Utc.datetime_from_str(&formatted, \"%Y-%m-%d %H:%M:%S\")?;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":84606,"byte_end":84679,"line_start":28,"line_end":28,"column_start":1,"column_end":74}},{"value":"/ assert_eq!(parsed, date_time);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":84680,"byte_end":84714,"line_start":29,"line_end":29,"column_start":1,"column_end":35}},{"value":"/ # Ok::<(), chrono::ParseError>(())","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":84715,"byte_end":84753,"line_start":30,"line_end":30,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":84754,"byte_end":84761,"line_start":31,"line_end":31,"column_start":1,"column_end":8}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2355},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":86004,"byte_end":86008,"line_start":77,"line_end":77,"column_start":5,"column_end":9},"name":"None","qualname":"::format::Pad::None","value":"Pad::None","parent":{"krate":0,"index":2354},"children":[],"decl_id":null,"docs":" No padding.\n","sig":null,"attributes":[{"value":"/ No padding.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":85984,"byte_end":85999,"line_start":76,"line_end":76,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2357},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":86042,"byte_end":86046,"line_start":79,"line_end":79,"column_start":5,"column_end":9},"name":"Zero","qualname":"::format::Pad::Zero","value":"Pad::Zero","parent":{"krate":0,"index":2354},"children":[],"decl_id":null,"docs":" Zero (`0`) padding.\n","sig":null,"attributes":[{"value":"/ Zero (`0`) padding.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":86014,"byte_end":86037,"line_start":78,"line_end":78,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2359},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":86075,"byte_end":86080,"line_start":81,"line_end":81,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Pad::Space","value":"Pad::Space","parent":{"krate":0,"index":2354},"children":[],"decl_id":null,"docs":" Space padding.\n","sig":null,"attributes":[{"value":"/ Space padding.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":86052,"byte_end":86070,"line_start":80,"line_end":80,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":2354},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":85974,"byte_end":85977,"line_start":75,"line_end":75,"column_start":10,"column_end":13},"name":"Pad","qualname":"::format::Pad","value":"enum Pad { None, Zero, Space, }","parent":null,"children":[{"krate":0,"index":2355},{"krate":0,"index":2357},{"krate":0,"index":2359}],"decl_id":null,"docs":" Padding characters for numeric items.\n","sig":null,"attributes":[{"value":"/ Padding characters for numeric items.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":85878,"byte_end":85919,"line_start":73,"line_end":73,"column_start":1,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2373},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":86976,"byte_end":86980,"line_start":101,"line_end":101,"column_start":5,"column_end":9},"name":"Year","qualname":"::format::Numeric::Year","value":"Numeric::Year","parent":{"krate":0,"index":2372},"children":[],"decl_id":null,"docs":" Full Gregorian year (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Full Gregorian year (FW=4, PW=∞).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":86853,"byte_end":86892,"line_start":99,"line_end":99,"column_start":5,"column_end":42}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":86897,"byte_end":86971,"line_start":100,"line_end":100,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2375},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":87082,"byte_end":87092,"line_start":103,"line_end":103,"column_start":5,"column_end":15},"name":"YearDiv100","qualname":"::format::Numeric::YearDiv100","value":"Numeric::YearDiv100","parent":{"krate":0,"index":2372},"children":[],"decl_id":null,"docs":" Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":86986,"byte_end":87077,"line_start":102,"line_end":102,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2377},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":87163,"byte_end":87173,"line_start":105,"line_end":105,"column_start":5,"column_end":15},"name":"YearMod100","qualname":"::format::Numeric::YearMod100","value":"Numeric::YearMod100","parent":{"krate":0,"index":2372},"children":[],"decl_id":null,"docs":" Gregorian year modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Gregorian year modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":87098,"byte_end":87158,"line_start":104,"line_end":104,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2379},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":87308,"byte_end":87315,"line_start":108,"line_end":108,"column_start":5,"column_end":12},"name":"IsoYear","qualname":"::format::Numeric::IsoYear","value":"Numeric::IsoYear","parent":{"krate":0,"index":2372},"children":[],"decl_id":null,"docs":" Year in the ISO week date (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date (FW=4, PW=∞).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":87179,"byte_end":87224,"line_start":106,"line_end":106,"column_start":5,"column_end":48}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":87229,"byte_end":87303,"line_start":107,"line_end":107,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2381},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":87413,"byte_end":87426,"line_start":110,"line_end":110,"column_start":5,"column_end":18},"name":"IsoYearDiv100","qualname":"::format::Numeric::IsoYearDiv100","value":"Numeric::IsoYearDiv100","parent":{"krate":0,"index":2372},"children":[],"decl_id":null,"docs":" Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":87321,"byte_end":87408,"line_start":109,"line_end":109,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2383},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":87509,"byte_end":87522,"line_start":112,"line_end":112,"column_start":5,"column_end":18},"name":"IsoYearMod100","qualname":"::format::Numeric::IsoYearMod100","value":"Numeric::IsoYearMod100","parent":{"krate":0,"index":2372},"children":[],"decl_id":null,"docs":" Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":87432,"byte_end":87504,"line_start":111,"line_end":111,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2385},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":87553,"byte_end":87558,"line_start":114,"line_end":114,"column_start":5,"column_end":10},"name":"Month","qualname":"::format::Numeric::Month","value":"Numeric::Month","parent":{"krate":0,"index":2372},"children":[],"decl_id":null,"docs":" Month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Month (FW=PW=2).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":87528,"byte_end":87548,"line_start":113,"line_end":113,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2387},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":87600,"byte_end":87603,"line_start":116,"line_end":116,"column_start":5,"column_end":8},"name":"Day","qualname":"::format::Numeric::Day","value":"Numeric::Day","parent":{"krate":0,"index":2372},"children":[],"decl_id":null,"docs":" Day of the month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Day of the month (FW=PW=2).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":87564,"byte_end":87595,"line_start":115,"line_end":115,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2389},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":87696,"byte_end":87707,"line_start":118,"line_end":118,"column_start":5,"column_end":16},"name":"WeekFromSun","qualname":"::format::Numeric::WeekFromSun","value":"Numeric::WeekFromSun","parent":{"krate":0,"index":2372},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":87609,"byte_end":87691,"line_start":117,"line_end":117,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2391},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":87800,"byte_end":87811,"line_start":120,"line_end":120,"column_start":5,"column_end":16},"name":"WeekFromMon","qualname":"::format::Numeric::WeekFromMon","value":"Numeric::WeekFromMon","parent":{"krate":0,"index":2372},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January (FW=PW=2).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":87713,"byte_end":87795,"line_start":119,"line_end":119,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2393},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":87869,"byte_end":87876,"line_start":122,"line_end":122,"column_start":5,"column_end":12},"name":"IsoWeek","qualname":"::format::Numeric::IsoWeek","value":"Numeric::IsoWeek","parent":{"krate":0,"index":2372},"children":[],"decl_id":null,"docs":" Week number in the ISO week date (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number in the ISO week date (FW=PW=2).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":87817,"byte_end":87864,"line_start":121,"line_end":121,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2395},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":87952,"byte_end":87966,"line_start":124,"line_end":124,"column_start":5,"column_end":19},"name":"NumDaysFromSun","qualname":"::format::Numeric::NumDaysFromSun","value":"Numeric::NumDaysFromSun","parent":{"krate":0,"index":2372},"children":[],"decl_id":null,"docs":" Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":87882,"byte_end":87947,"line_start":123,"line_end":123,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2397},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":88040,"byte_end":88054,"line_start":126,"line_end":126,"column_start":5,"column_end":19},"name":"WeekdayFromMon","qualname":"::format::Numeric::WeekdayFromMon","value":"Numeric::WeekdayFromMon","parent":{"krate":0,"index":2372},"children":[],"decl_id":null,"docs":" Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":87972,"byte_end":88035,"line_start":125,"line_end":125,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2399},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":88095,"byte_end":88102,"line_start":128,"line_end":128,"column_start":5,"column_end":12},"name":"Ordinal","qualname":"::format::Numeric::Ordinal","value":"Numeric::Ordinal","parent":{"krate":0,"index":2372},"children":[],"decl_id":null,"docs":" Day of the year (FW=PW=3).\n","sig":null,"attributes":[{"value":"/ Day of the year (FW=PW=3).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":88060,"byte_end":88090,"line_start":127,"line_end":127,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2401},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":88161,"byte_end":88165,"line_start":130,"line_end":130,"column_start":5,"column_end":9},"name":"Hour","qualname":"::format::Numeric::Hour","value":"Numeric::Hour","parent":{"krate":0,"index":2372},"children":[],"decl_id":null,"docs":" Hour number in the 24-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 24-hour clocks (FW=PW=2).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":88108,"byte_end":88156,"line_start":129,"line_end":129,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2403},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":88224,"byte_end":88230,"line_start":132,"line_end":132,"column_start":5,"column_end":11},"name":"Hour12","qualname":"::format::Numeric::Hour12","value":"Numeric::Hour12","parent":{"krate":0,"index":2372},"children":[],"decl_id":null,"docs":" Hour number in the 12-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 12-hour clocks (FW=PW=2).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":88171,"byte_end":88219,"line_start":131,"line_end":131,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2405},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":88303,"byte_end":88309,"line_start":134,"line_end":134,"column_start":5,"column_end":11},"name":"Minute","qualname":"::format::Numeric::Minute","value":"Numeric::Minute","parent":{"krate":0,"index":2372},"children":[],"decl_id":null,"docs":" The number of minutes since the last whole hour (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of minutes since the last whole hour (FW=PW=2).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":88236,"byte_end":88298,"line_start":133,"line_end":133,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2407},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":88384,"byte_end":88390,"line_start":136,"line_end":136,"column_start":5,"column_end":11},"name":"Second","qualname":"::format::Numeric::Second","value":"Numeric::Second","parent":{"krate":0,"index":2372},"children":[],"decl_id":null,"docs":" The number of seconds since the last whole minute (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of seconds since the last whole minute (FW=PW=2).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":88315,"byte_end":88379,"line_start":135,"line_end":135,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2409},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":88593,"byte_end":88603,"line_start":140,"line_end":140,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Numeric::Nanosecond","value":"Numeric::Nanosecond","parent":{"krate":0,"index":2372},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the last whole second (FW=PW=9).\n Note that this is *not* left-aligned;\n see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the last whole second (FW=PW=9).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":88396,"byte_end":88464,"line_start":137,"line_end":137,"column_start":5,"column_end":73}},{"value":"/ Note that this is *not* left-aligned;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":88469,"byte_end":88510,"line_start":138,"line_end":138,"column_start":5,"column_end":46}},{"value":"/ see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":88515,"byte_end":88588,"line_start":139,"line_end":139,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2411},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":88783,"byte_end":88792,"line_start":143,"line_end":143,"column_start":5,"column_end":14},"name":"Timestamp","qualname":"::format::Numeric::Timestamp","value":"Numeric::Timestamp","parent":{"krate":0,"index":2372},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).\n For formatting, it assumes UTC upon the absence of time zone offset.\n","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":88609,"byte_end":88701,"line_start":141,"line_end":141,"column_start":5,"column_end":95}},{"value":"/ For formatting, it assumes UTC upon the absence of time zone offset.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":88706,"byte_end":88778,"line_start":142,"line_end":142,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2413},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89011,"byte_end":89019,"line_start":149,"line_end":149,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Numeric::Internal","value":"Numeric::Internal(InternalNumeric)","parent":{"krate":0,"index":2372},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[{"value":"/ Internal uses only.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":88799,"byte_end":88822,"line_start":145,"line_end":145,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":88827,"byte_end":88830,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ This item exists so that one can add additional internal-only formatting","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":88835,"byte_end":88911,"line_start":147,"line_end":147,"column_start":5,"column_end":81}},{"value":"/ without breaking major compatibility (as enum variants cannot be selectively private).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":88916,"byte_end":89006,"line_start":148,"line_end":148,"column_start":5,"column_end":95}}]},{"kind":"Field","id":{"krate":0,"index":2415},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89020,"byte_end":89035,"line_start":149,"line_end":149,"column_start":14,"column_end":29},"name":"0","qualname":"::format::Numeric::Internal::0","value":"format::InternalNumeric","parent":{"krate":0,"index":2413},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2372},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":86839,"byte_end":86846,"line_start":98,"line_end":98,"column_start":10,"column_end":17},"name":"Numeric","qualname":"::format::Numeric","value":"enum Numeric {\n    Year,\n    YearDiv100,\n    YearMod100,\n    IsoYear,\n    IsoYearDiv100,\n    IsoYearMod100,\n    Month,\n    Day,\n    WeekFromSun,\n    WeekFromMon,\n    IsoWeek,\n    NumDaysFromSun,\n    WeekdayFromMon,\n    Ordinal,\n    Hour,\n    Hour12,\n    Minute,\n    Second,\n    Nanosecond,\n    Timestamp,\n    Internal(InternalNumeric),\n}","parent":null,"children":[{"krate":0,"index":2373},{"krate":0,"index":2375},{"krate":0,"index":2377},{"krate":0,"index":2379},{"krate":0,"index":2381},{"krate":0,"index":2383},{"krate":0,"index":2385},{"krate":0,"index":2387},{"krate":0,"index":2389},{"krate":0,"index":2391},{"krate":0,"index":2393},{"krate":0,"index":2395},{"krate":0,"index":2397},{"krate":0,"index":2399},{"krate":0,"index":2401},{"krate":0,"index":2403},{"krate":0,"index":2405},{"krate":0,"index":2407},{"krate":0,"index":2409},{"krate":0,"index":2411},{"krate":0,"index":2413}],"decl_id":null,"docs":" Numeric item types.\n They have associated formatting width (FW) and parsing width (PW).","sig":null,"attributes":[{"value":"/ Numeric item types.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":86085,"byte_end":86108,"line_start":84,"line_end":84,"column_start":1,"column_end":24}},{"value":"/ They have associated formatting width (FW) and parsing width (PW).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":86109,"byte_end":86179,"line_start":85,"line_end":85,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":86180,"byte_end":86183,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ The **formatting width** is the minimal width to be formatted.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":86184,"byte_end":86250,"line_start":87,"line_end":87,"column_start":1,"column_end":67}},{"value":"/ If the number is too short, and the padding is not [`Pad::None`](./enum.Pad.html#variant.None),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":86251,"byte_end":86350,"line_start":88,"line_end":88,"column_start":1,"column_end":100}},{"value":"/ then it is left-padded.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":86351,"byte_end":86378,"line_start":89,"line_end":89,"column_start":1,"column_end":28}},{"value":"/ If the number is too long or (in some cases) negative, it is printed as is.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":86379,"byte_end":86458,"line_start":90,"line_end":90,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":86459,"byte_end":86462,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ The **parsing width** is the maximal width to be scanned.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":86463,"byte_end":86524,"line_start":92,"line_end":92,"column_start":1,"column_end":62}},{"value":"/ The parser only tries to consume from one to given number of digits (greedily).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":86525,"byte_end":86608,"line_start":93,"line_end":93,"column_start":1,"column_end":84}},{"value":"/ It also trims the preceding whitespace if any.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":86609,"byte_end":86659,"line_start":94,"line_end":94,"column_start":1,"column_end":51}},{"value":"/ It cannot parse the negative number, so some date and time cannot be formatted then","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":86660,"byte_end":86747,"line_start":95,"line_end":95,"column_start":1,"column_end":88}},{"value":"/ parsed with the same formatting items.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":86748,"byte_end":86790,"line_start":96,"line_end":96,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":614},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89127,"byte_end":89142,"line_start":153,"line_end":153,"column_start":12,"column_end":27},"name":"InternalNumeric","qualname":"::format::InternalNumeric","value":"InternalNumeric {  }","parent":null,"children":[{"krate":0,"index":615}],"decl_id":null,"docs":" An opaque type representing numeric item types for internal uses only.\n","sig":null,"attributes":[{"value":"/ An opaque type representing numeric item types for internal uses only.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89041,"byte_end":89115,"line_start":152,"line_end":152,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89206,"byte_end":89211,"line_start":158,"line_end":158,"column_start":8,"column_end":13},"name":"clone","qualname":"<InternalNumeric as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2883},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89311,"byte_end":89313,"line_start":164,"line_end":164,"column_start":8,"column_end":10},"name":"eq","qualname":"<InternalNumeric as std::cmp::PartialEq>::eq","value":"fn eq<'_, '_>(&'_ Self, &'_ InternalNumeric) -> bool","parent":{"krate":2,"index":2915},"children":[],"decl_id":{"krate":2,"index":2917},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89472,"byte_end":89475,"line_start":172,"line_end":172,"column_start":8,"column_end":11},"name":"fmt","qualname":"<InternalNumeric as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10293},"children":[],"decl_id":{"krate":2,"index":10294},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2428},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89940,"byte_end":89954,"line_start":186,"line_end":186,"column_start":5,"column_end":19},"name":"ShortMonthName","qualname":"::format::Fixed::ShortMonthName","value":"Fixed::ShortMonthName","parent":{"krate":0,"index":2427},"children":[],"decl_id":null,"docs":" Abbreviated month names.","sig":null,"attributes":[{"value":"/ Abbreviated month names.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89807,"byte_end":89835,"line_start":183,"line_end":183,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89840,"byte_end":89843,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89848,"byte_end":89935,"line_start":185,"line_end":185,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2430},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":90087,"byte_end":90100,"line_start":190,"line_end":190,"column_start":5,"column_end":18},"name":"LongMonthName","qualname":"::format::Fixed::LongMonthName","value":"Fixed::LongMonthName","parent":{"krate":0,"index":2427},"children":[],"decl_id":null,"docs":" Full month names.","sig":null,"attributes":[{"value":"/ Full month names.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89960,"byte_end":89981,"line_start":187,"line_end":187,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89986,"byte_end":89989,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89994,"byte_end":90082,"line_start":189,"line_end":189,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2432},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":90249,"byte_end":90265,"line_start":194,"line_end":194,"column_start":5,"column_end":21},"name":"ShortWeekdayName","qualname":"::format::Fixed::ShortWeekdayName","value":"Fixed::ShortWeekdayName","parent":{"krate":0,"index":2427},"children":[],"decl_id":null,"docs":" Abbreviated day of the week names.","sig":null,"attributes":[{"value":"/ Abbreviated day of the week names.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":90106,"byte_end":90144,"line_start":191,"line_end":191,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":90149,"byte_end":90152,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":90157,"byte_end":90244,"line_start":193,"line_end":193,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2434},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":90408,"byte_end":90423,"line_start":198,"line_end":198,"column_start":5,"column_end":20},"name":"LongWeekdayName","qualname":"::format::Fixed::LongWeekdayName","value":"Fixed::LongWeekdayName","parent":{"krate":0,"index":2427},"children":[],"decl_id":null,"docs":" Full day of the week names.","sig":null,"attributes":[{"value":"/ Full day of the week names.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":90271,"byte_end":90302,"line_start":195,"line_end":195,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":90307,"byte_end":90310,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":90315,"byte_end":90403,"line_start":197,"line_end":197,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2436},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":90501,"byte_end":90510,"line_start":202,"line_end":202,"column_start":5,"column_end":14},"name":"LowerAmPm","qualname":"::format::Fixed::LowerAmPm","value":"Fixed::LowerAmPm","parent":{"krate":0,"index":2427},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":90429,"byte_end":90439,"line_start":199,"line_end":199,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":90444,"byte_end":90447,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ Prints in lower case, reads in any case.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":90452,"byte_end":90496,"line_start":201,"line_end":201,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2438},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":90588,"byte_end":90597,"line_start":206,"line_end":206,"column_start":5,"column_end":14},"name":"UpperAmPm","qualname":"::format::Fixed::UpperAmPm","value":"Fixed::UpperAmPm","parent":{"krate":0,"index":2427},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":90516,"byte_end":90526,"line_start":203,"line_end":203,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":90531,"byte_end":90534,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ Prints in upper case, reads in any case.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":90539,"byte_end":90583,"line_start":205,"line_end":205,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2440},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":90844,"byte_end":90854,"line_start":210,"line_end":210,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Fixed::Nanosecond","value":"Fixed::Nanosecond","parent":{"krate":0,"index":2427},"children":[],"decl_id":null,"docs":" An optional dot plus one or more digits for left-aligned nanoseconds.\n May print nothing, 3, 6 or 9 digits according to the available accuracy.\n See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ An optional dot plus one or more digits for left-aligned nanoseconds.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":90603,"byte_end":90676,"line_start":207,"line_end":207,"column_start":5,"column_end":78}},{"value":"/ May print nothing, 3, 6 or 9 digits according to the available accuracy.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":90681,"byte_end":90757,"line_start":208,"line_end":208,"column_start":5,"column_end":81}},{"value":"/ See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":90762,"byte_end":90839,"line_start":209,"line_end":209,"column_start":5,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2442},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":90944,"byte_end":90955,"line_start":212,"line_end":212,"column_start":5,"column_end":16},"name":"Nanosecond3","qualname":"::format::Fixed::Nanosecond3","value":"Fixed::Nanosecond3","parent":{"krate":0,"index":2427},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":90860,"byte_end":90939,"line_start":211,"line_end":211,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2444},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":91045,"byte_end":91056,"line_start":214,"line_end":214,"column_start":5,"column_end":16},"name":"Nanosecond6","qualname":"::format::Fixed::Nanosecond6","value":"Fixed::Nanosecond6","parent":{"krate":0,"index":2427},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":90961,"byte_end":91040,"line_start":213,"line_end":213,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2446},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":91146,"byte_end":91157,"line_start":216,"line_end":216,"column_start":5,"column_end":16},"name":"Nanosecond9","qualname":"::format::Fixed::Nanosecond9","value":"Fixed::Nanosecond9","parent":{"krate":0,"index":2427},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":91062,"byte_end":91141,"line_start":215,"line_end":215,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2448},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":91278,"byte_end":91290,"line_start":220,"line_end":220,"column_start":5,"column_end":17},"name":"TimezoneName","qualname":"::format::Fixed::TimezoneName","value":"Fixed::TimezoneName","parent":{"krate":0,"index":2427},"children":[],"decl_id":null,"docs":" Timezone name.","sig":null,"attributes":[{"value":"/ Timezone name.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":91163,"byte_end":91181,"line_start":217,"line_end":217,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":91186,"byte_end":91189,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ It does not support parsing, its use in the parser is an immediate failure.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":91194,"byte_end":91273,"line_start":219,"line_end":219,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2450},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":91625,"byte_end":91644,"line_start":226,"line_end":226,"column_start":5,"column_end":24},"name":"TimezoneOffsetColon","qualname":"::format::Fixed::TimezoneOffsetColon","value":"Fixed::TimezoneOffsetColon","parent":{"krate":0,"index":2427},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":91296,"byte_end":91369,"line_start":221,"line_end":221,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":91374,"byte_end":91377,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespace.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":91382,"byte_end":91474,"line_start":223,"line_end":223,"column_start":5,"column_end":97}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":91479,"byte_end":91531,"line_start":224,"line_end":224,"column_start":5,"column_end":57}},{"value":"/ which is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":91536,"byte_end":91620,"line_start":225,"line_end":225,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2452},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":92036,"byte_end":92056,"line_start":233,"line_end":233,"column_start":5,"column_end":25},"name":"TimezoneOffsetColonZ","qualname":"::format::Fixed::TimezoneOffsetColonZ","value":"Fixed::TimezoneOffsetColonZ","parent":{"krate":0,"index":2427},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":91650,"byte_end":91718,"line_start":227,"line_end":227,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":91723,"byte_end":91726,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespace,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":91731,"byte_end":91823,"line_start":229,"line_end":229,"column_start":5,"column_end":97}},{"value":"/ and `Z` can be either in upper case or in lower case.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":91828,"byte_end":91885,"line_start":230,"line_end":230,"column_start":5,"column_end":62}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":91890,"byte_end":91942,"line_start":231,"line_end":231,"column_start":5,"column_end":57}},{"value":"/ which is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":91947,"byte_end":92031,"line_start":232,"line_end":232,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2454},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":92195,"byte_end":92209,"line_start":236,"line_end":236,"column_start":5,"column_end":19},"name":"TimezoneOffset","qualname":"::format::Fixed::TimezoneOffset","value":"Fixed::TimezoneOffset","parent":{"krate":0,"index":2427},"children":[],"decl_id":null,"docs":" Same as [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same as [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":92062,"byte_end":92148,"line_start":234,"line_end":234,"column_start":5,"column_end":91}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":92153,"byte_end":92190,"line_start":235,"line_end":235,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2456},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":92350,"byte_end":92365,"line_start":239,"line_end":239,"column_start":5,"column_end":20},"name":"TimezoneOffsetZ","qualname":"::format::Fixed::TimezoneOffsetZ","value":"Fixed::TimezoneOffsetZ","parent":{"krate":0,"index":2427},"children":[],"decl_id":null,"docs":" Same as [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same as [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":92215,"byte_end":92303,"line_start":237,"line_end":237,"column_start":5,"column_end":93}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":92308,"byte_end":92345,"line_start":238,"line_end":238,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2458},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":92458,"byte_end":92465,"line_start":241,"line_end":241,"column_start":5,"column_end":12},"name":"RFC2822","qualname":"::format::Fixed::RFC2822","value":"Fixed::RFC2822","parent":{"krate":0,"index":2427},"children":[],"decl_id":null,"docs":" RFC 2822 date and time syntax. Commonly used for email and MIME date and time.\n","sig":null,"attributes":[{"value":"/ RFC 2822 date and time syntax. Commonly used for email and MIME date and time.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":92371,"byte_end":92453,"line_start":240,"line_end":240,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2460},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":92521,"byte_end":92528,"line_start":243,"line_end":243,"column_start":5,"column_end":12},"name":"RFC3339","qualname":"::format::Fixed::RFC3339","value":"Fixed::RFC3339","parent":{"krate":0,"index":2427},"children":[],"decl_id":null,"docs":" RFC 3339 & ISO 8601 date and time syntax.\n","sig":null,"attributes":[{"value":"/ RFC 3339 & ISO 8601 date and time syntax.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":92471,"byte_end":92516,"line_start":242,"line_end":242,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2462},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":92747,"byte_end":92755,"line_start":249,"line_end":249,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Fixed::Internal","value":"Fixed::Internal(InternalFixed)","parent":{"krate":0,"index":2427},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[{"value":"/ Internal uses only.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":92535,"byte_end":92558,"line_start":245,"line_end":245,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":92563,"byte_end":92566,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ This item exists so that one can add additional internal-only formatting","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":92571,"byte_end":92647,"line_start":247,"line_end":247,"column_start":5,"column_end":81}},{"value":"/ without breaking major compatibility (as enum variants cannot be selectively private).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":92652,"byte_end":92742,"line_start":248,"line_end":248,"column_start":5,"column_end":95}}]},{"kind":"Field","id":{"krate":0,"index":2464},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":92756,"byte_end":92769,"line_start":249,"line_end":249,"column_start":14,"column_end":27},"name":"0","qualname":"::format::Fixed::Internal::0","value":"format::InternalFixed","parent":{"krate":0,"index":2462},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2427},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89795,"byte_end":89800,"line_start":182,"line_end":182,"column_start":10,"column_end":15},"name":"Fixed","qualname":"::format::Fixed","value":"enum Fixed {\n    ShortMonthName,\n    LongMonthName,\n    ShortWeekdayName,\n    LongWeekdayName,\n    LowerAmPm,\n    UpperAmPm,\n    Nanosecond,\n    Nanosecond3,\n    Nanosecond6,\n    Nanosecond9,\n    TimezoneName,\n    TimezoneOffsetColon,\n    TimezoneOffsetColonZ,\n    TimezoneOffset,\n    TimezoneOffsetZ,\n    RFC2822,\n    RFC3339,\n    Internal(InternalFixed),\n}","parent":null,"children":[{"krate":0,"index":2428},{"krate":0,"index":2430},{"krate":0,"index":2432},{"krate":0,"index":2434},{"krate":0,"index":2436},{"krate":0,"index":2438},{"krate":0,"index":2440},{"krate":0,"index":2442},{"krate":0,"index":2444},{"krate":0,"index":2446},{"krate":0,"index":2448},{"krate":0,"index":2450},{"krate":0,"index":2452},{"krate":0,"index":2454},{"krate":0,"index":2456},{"krate":0,"index":2458},{"krate":0,"index":2460},{"krate":0,"index":2462}],"decl_id":null,"docs":" Fixed-format item types.","sig":null,"attributes":[{"value":"/ Fixed-format item types.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89572,"byte_end":89600,"line_start":177,"line_end":177,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89601,"byte_end":89604,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ They have their own rules of formatting and parsing.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89605,"byte_end":89661,"line_start":179,"line_end":179,"column_start":1,"column_end":57}},{"value":"/ Otherwise noted, they print in the specified cases but parse case-insensitively.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89662,"byte_end":89746,"line_start":180,"line_end":180,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":2476},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":92905,"byte_end":92918,"line_start":254,"line_end":254,"column_start":12,"column_end":25},"name":"InternalFixed","qualname":"::format::InternalFixed","value":"InternalFixed {  }","parent":null,"children":[{"krate":0,"index":2477}],"decl_id":null,"docs":" An opaque type representing fixed-format item types for internal uses only.\n","sig":null,"attributes":[{"value":"/ An opaque type representing fixed-format item types for internal uses only.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":92775,"byte_end":92854,"line_start":252,"line_end":252,"column_start":1,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2510},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":93934,"byte_end":93941,"line_start":281,"line_end":281,"column_start":5,"column_end":12},"name":"Literal","qualname":"::format::Item::Literal","value":"Item::Literal(&'a str)","parent":{"krate":0,"index":2508},"children":[],"decl_id":null,"docs":" A literally printed and parsed text.\n","sig":null,"attributes":[{"value":"/ A literally printed and parsed text.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":93889,"byte_end":93929,"line_start":280,"line_end":280,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2512},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":93942,"byte_end":93949,"line_start":281,"line_end":281,"column_start":13,"column_end":20},"name":"0","qualname":"::format::Item::Literal::0","value":"&'a str","parent":{"krate":0,"index":2510},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2513},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":94079,"byte_end":94091,"line_start":284,"line_end":284,"column_start":5,"column_end":17},"name":"OwnedLiteral","qualname":"::format::Item::OwnedLiteral","value":"Item::OwnedLiteral(Box<str>)","parent":{"krate":0,"index":2508},"children":[],"decl_id":null,"docs":" Same as `Literal` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"/ Same as `Literal` but with the string owned by the item.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":93956,"byte_end":94016,"line_start":282,"line_end":282,"column_start":5,"column_end":65}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":94021,"byte_end":94074,"line_start":283,"line_end":283,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":2515},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":94092,"byte_end":94100,"line_start":284,"line_end":284,"column_start":18,"column_end":26},"name":"0","qualname":"::format::Item::OwnedLiteral::0","value":"std::boxed::Box<str>","parent":{"krate":0,"index":2513},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2516},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":94179,"byte_end":94184,"line_start":286,"line_end":286,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Item::Space","value":"Item::Space(&'a str)","parent":{"krate":0,"index":2508},"children":[],"decl_id":null,"docs":" Whitespace. Prints literally but reads zero or more whitespace.\n","sig":null,"attributes":[{"value":"/ Whitespace. Prints literally but reads zero or more whitespace.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":94107,"byte_end":94174,"line_start":285,"line_end":285,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":2518},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":94185,"byte_end":94192,"line_start":286,"line_end":286,"column_start":11,"column_end":18},"name":"0","qualname":"::format::Item::Space::0","value":"&'a str","parent":{"krate":0,"index":2516},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2519},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":94320,"byte_end":94330,"line_start":289,"line_end":289,"column_start":5,"column_end":15},"name":"OwnedSpace","qualname":"::format::Item::OwnedSpace","value":"Item::OwnedSpace(Box<str>)","parent":{"krate":0,"index":2508},"children":[],"decl_id":null,"docs":" Same as `Space` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"/ Same as `Space` but with the string owned by the item.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":94199,"byte_end":94257,"line_start":287,"line_end":287,"column_start":5,"column_end":63}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":94262,"byte_end":94315,"line_start":288,"line_end":288,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":2521},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":94331,"byte_end":94339,"line_start":289,"line_end":289,"column_start":16,"column_end":24},"name":"0","qualname":"::format::Item::OwnedSpace::0","value":"std::boxed::Box<str>","parent":{"krate":0,"index":2519},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2522},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":94509,"byte_end":94516,"line_start":292,"line_end":292,"column_start":5,"column_end":12},"name":"Numeric","qualname":"::format::Item::Numeric","value":"Item::Numeric(Numeric, Pad)","parent":{"krate":0,"index":2508},"children":[],"decl_id":null,"docs":" Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\n the parser simply ignores any padded whitespace and zeroes.\n","sig":null,"attributes":[{"value":"/ Numeric item. Can be optionally padded to the maximal length (if any) when formatting;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":94346,"byte_end":94436,"line_start":290,"line_end":290,"column_start":5,"column_end":95}},{"value":"/ the parser simply ignores any padded whitespace and zeroes.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":94441,"byte_end":94504,"line_start":291,"line_end":291,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":2524},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":94517,"byte_end":94524,"line_start":292,"line_end":292,"column_start":13,"column_end":20},"name":"0","qualname":"::format::Item::Numeric::0","value":"format::Numeric","parent":{"krate":0,"index":2522},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2525},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":94526,"byte_end":94529,"line_start":292,"line_end":292,"column_start":22,"column_end":25},"name":"1","qualname":"::format::Item::Numeric::1","value":"format::Pad","parent":{"krate":0,"index":2522},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2526},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":94563,"byte_end":94568,"line_start":294,"line_end":294,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::format::Item::Fixed","value":"Item::Fixed(Fixed)","parent":{"krate":0,"index":2508},"children":[],"decl_id":null,"docs":" Fixed-format item.\n","sig":null,"attributes":[{"value":"/ Fixed-format item.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":94536,"byte_end":94558,"line_start":293,"line_end":293,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":2528},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":94569,"byte_end":94574,"line_start":294,"line_end":294,"column_start":11,"column_end":16},"name":"0","qualname":"::format::Item::Fixed::0","value":"format::Fixed","parent":{"krate":0,"index":2526},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2529},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":94657,"byte_end":94662,"line_start":296,"line_end":296,"column_start":5,"column_end":10},"name":"Error","qualname":"::format::Item::Error","value":"Item::Error","parent":{"krate":0,"index":2508},"children":[],"decl_id":null,"docs":" Issues a formatting error. Used to signal an invalid format string.\n","sig":null,"attributes":[{"value":"/ Issues a formatting error. Used to signal an invalid format string.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":94581,"byte_end":94652,"line_start":295,"line_end":295,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":2508},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":93874,"byte_end":93878,"line_start":279,"line_end":279,"column_start":10,"column_end":14},"name":"Item","qualname":"::format::Item","value":"enum Item<'a> {\n    Literal(&'a str),\n    OwnedLiteral(Box<str>),\n    Space(&'a str),\n    OwnedSpace(Box<str>),\n    Numeric(Numeric, Pad),\n    Fixed(Fixed),\n    Error,\n}","parent":null,"children":[{"krate":0,"index":2510},{"krate":0,"index":2513},{"krate":0,"index":2516},{"krate":0,"index":2519},{"krate":0,"index":2522},{"krate":0,"index":2526},{"krate":0,"index":2529}],"decl_id":null,"docs":" A single formatting item. This is used for both formatting and parsing.\n","sig":null,"attributes":[{"value":"/ A single formatting item. This is used for both formatting and parsing.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":93750,"byte_end":93825,"line_start":277,"line_end":277,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":2548},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":95410,"byte_end":95420,"line_start":337,"line_end":337,"column_start":12,"column_end":22},"name":"ParseError","qualname":"::format::ParseError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error from the `parse` function.\n","sig":null,"attributes":[{"value":"/ An error from the `parse` function.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":95314,"byte_end":95353,"line_start":335,"line_end":335,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":95504,"byte_end":95508,"line_start":341,"line_end":341,"column_start":12,"column_end":16},"name":"kind","qualname":"<ParseError>::kind","value":"fn kind<'_>(&'_ Self) -> ParseErrorKind","parent":null,"children":[],"decl_id":null,"docs":" The category of parse error\n","sig":null,"attributes":[{"value":"/ The category of parse error","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":95461,"byte_end":95492,"line_start":340,"line_end":340,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2564},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":95714,"byte_end":95724,"line_start":350,"line_end":350,"column_start":5,"column_end":15},"name":"OutOfRange","qualname":"::format::ParseErrorKind::OutOfRange","value":"ParseErrorKind::OutOfRange","parent":{"krate":0,"index":2563},"children":[],"decl_id":null,"docs":" Given field is out of permitted range.\n","sig":null,"attributes":[{"value":"/ Given field is out of permitted range.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":95667,"byte_end":95709,"line_start":349,"line_end":349,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2566},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":96002,"byte_end":96012,"line_start":356,"line_end":356,"column_start":5,"column_end":15},"name":"Impossible","qualname":"::format::ParseErrorKind::Impossible","value":"ParseErrorKind::Impossible","parent":{"krate":0,"index":2563},"children":[],"decl_id":null,"docs":" There is no possible date and time value with given set of fields.","sig":null,"attributes":[{"value":"/ There is no possible date and time value with given set of fields.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":95731,"byte_end":95801,"line_start":352,"line_end":352,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":95806,"byte_end":95809,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ This does not include the out-of-range conditions, which are trivially invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":95814,"byte_end":95897,"line_start":354,"line_end":354,"column_start":5,"column_end":88}},{"value":"/ It includes the case that there are one or more fields that are inconsistent to each other.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":95902,"byte_end":95997,"line_start":355,"line_end":355,"column_start":5,"column_end":100}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2568},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":96378,"byte_end":96387,"line_start":363,"line_end":363,"column_start":5,"column_end":14},"name":"NotEnough","qualname":"::format::ParseErrorKind::NotEnough","value":"ParseErrorKind::NotEnough","parent":{"krate":0,"index":2563},"children":[],"decl_id":null,"docs":" Given set of fields is not enough to make a requested date and time value.","sig":null,"attributes":[{"value":"/ Given set of fields is not enough to make a requested date and time value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":96019,"byte_end":96097,"line_start":358,"line_end":358,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":96102,"byte_end":96105,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ Note that there *may* be a case that given fields constrain the possible values so much","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":96110,"byte_end":96201,"line_start":360,"line_end":360,"column_start":5,"column_end":96}},{"value":"/ that there is a unique possible value. Chrono only tries to be correct for","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":96206,"byte_end":96284,"line_start":361,"line_end":361,"column_start":5,"column_end":83}},{"value":"/ most useful sets of fields however, as such constraint solving can be expensive.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":96289,"byte_end":96373,"line_start":362,"line_end":362,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2570},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":96483,"byte_end":96490,"line_start":366,"line_end":366,"column_start":5,"column_end":12},"name":"Invalid","qualname":"::format::ParseErrorKind::Invalid","value":"ParseErrorKind::Invalid","parent":{"krate":0,"index":2563},"children":[],"decl_id":null,"docs":" The input string has some invalid character sequence for given formatting items.\n","sig":null,"attributes":[{"value":"/ The input string has some invalid character sequence for given formatting items.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":96394,"byte_end":96478,"line_start":365,"line_end":365,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2572},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":96550,"byte_end":96558,"line_start":369,"line_end":369,"column_start":5,"column_end":13},"name":"TooShort","qualname":"::format::ParseErrorKind::TooShort","value":"ParseErrorKind::TooShort","parent":{"krate":0,"index":2563},"children":[],"decl_id":null,"docs":" The input string has been prematurely ended.\n","sig":null,"attributes":[{"value":"/ The input string has been prematurely ended.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":96497,"byte_end":96545,"line_start":368,"line_end":368,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2574},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":96641,"byte_end":96648,"line_start":372,"line_end":372,"column_start":5,"column_end":12},"name":"TooLong","qualname":"::format::ParseErrorKind::TooLong","value":"ParseErrorKind::TooLong","parent":{"krate":0,"index":2563},"children":[],"decl_id":null,"docs":" All formatting items have been read but there is a remaining input.\n","sig":null,"attributes":[{"value":"/ All formatting items have been read but there is a remaining input.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":96565,"byte_end":96636,"line_start":371,"line_end":371,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2576},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":96753,"byte_end":96762,"line_start":375,"line_end":375,"column_start":5,"column_end":14},"name":"BadFormat","qualname":"::format::ParseErrorKind::BadFormat","value":"ParseErrorKind::BadFormat","parent":{"krate":0,"index":2563},"children":[],"decl_id":null,"docs":" There was an error on the formatting string, or there were non-supported formating items.\n","sig":null,"attributes":[{"value":"/ There was an error on the formatting string, or there were non-supported formating items.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":96655,"byte_end":96748,"line_start":374,"line_end":374,"column_start":5,"column_end":98}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2578},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":96873,"byte_end":96888,"line_start":379,"line_end":379,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::format::ParseErrorKind::__Nonexhaustive","value":"ParseErrorKind::__Nonexhaustive","parent":{"krate":0,"index":2563},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2563},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":95646,"byte_end":95660,"line_start":348,"line_end":348,"column_start":10,"column_end":24},"name":"ParseErrorKind","qualname":"::format::ParseErrorKind","value":"enum ParseErrorKind {\n    OutOfRange,\n    Impossible,\n    NotEnough,\n    Invalid,\n    TooShort,\n    TooLong,\n    BadFormat,\n    __Nonexhaustive,\n}","parent":null,"children":[{"krate":0,"index":2564},{"krate":0,"index":2566},{"krate":0,"index":2568},{"krate":0,"index":2570},{"krate":0,"index":2572},{"krate":0,"index":2574},{"krate":0,"index":2576},{"krate":0,"index":2578}],"decl_id":null,"docs":" The category of parse error\n","sig":null,"attributes":[{"value":"/ The category of parse error","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":95560,"byte_end":95591,"line_start":346,"line_end":346,"column_start":1,"column_end":32}}]},{"kind":"Type","id":{"krate":0,"index":632},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":96939,"byte_end":96950,"line_start":383,"line_end":383,"column_start":10,"column_end":21},"name":"ParseResult","qualname":"::format::ParseResult","value":"Result<T, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Same as `Result<T, ParseError>`.\n","sig":null,"attributes":[{"value":"/ Same as `Result<T, ParseError>`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":96893,"byte_end":96929,"line_start":382,"line_end":382,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":97022,"byte_end":97025,"line_start":386,"line_end":386,"column_start":8,"column_end":11},"name":"fmt","qualname":"<ParseError as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10300},"children":[],"decl_id":{"krate":2,"index":10301},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":97839,"byte_end":97850,"line_start":403,"line_end":403,"column_start":8,"column_end":19},"name":"description","qualname":"<ParseError as std::error::Error>::description","value":"fn description<'_>(&'_ Self) -> &'_ str","parent":{"krate":1,"index":2576},"children":[],"decl_id":{"krate":1,"index":2579},"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":97811,"byte_end":97831,"line_start":402,"line_end":402,"column_start":5,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":645},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":98553,"byte_end":98564,"line_start":419,"line_end":419,"column_start":8,"column_end":19},"name":"format_item","qualname":"::format::format_item","value":"fn format_item<'a, '_, '_, '_, '_, '_,\n'_>(&'_ mut fmt::Formatter, Option<&'_ NaiveDate>, Option<&'_ NaiveTime>,\nOption<&'_ (String, FixedOffset)>, &'_ Item) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Formats single formatting item\n","sig":null,"attributes":[{"value":"/ Formats single formatting item","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":98457,"byte_end":98491,"line_start":417,"line_end":417,"column_start":1,"column_end":35}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":98492,"byte_end":98545,"line_start":418,"line_end":418,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":701},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":111899,"byte_end":111905,"line_start":717,"line_end":717,"column_start":8,"column_end":14},"name":"format","qualname":"::format::format","value":"fn format<'a, I, B, '_, '_, '_, '_,\n'_>(&'_ mut fmt::Formatter, Option<&'_ NaiveDate>, Option<&'_ NaiveTime>,\nOption<&'_ (String, FixedOffset)>, I) -> fmt::Result where I: Iterator<Item =\nB> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Tries to format given arguments with given formatting items.\n Internally used by `DelayedFormat`.\n","sig":null,"attributes":[{"value":"/ Tries to format given arguments with given formatting items.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":111733,"byte_end":111797,"line_start":714,"line_end":714,"column_start":1,"column_end":65}},{"value":"/ Internally used by `DelayedFormat`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":111798,"byte_end":111837,"line_start":715,"line_end":715,"column_start":1,"column_end":40}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":111838,"byte_end":111891,"line_start":716,"line_end":716,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":2591},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":120478,"byte_end":120484,"line_start":26,"line_end":26,"column_start":12,"column_end":18},"name":"Parsed","qualname":"::format::parsed::Parsed","value":"Parsed { year, year_div_100, year_mod_100, isoyear, isoyear_div_100, isoyear_mod_100, month, week_from_sun, week_from_mon, isoweek, weekday, ordinal, day, hour_div_12, hour_mod_12, minute, second, nanosecond, timestamp, offset }","parent":null,"children":[{"krate":0,"index":2592},{"krate":0,"index":2593},{"krate":0,"index":2594},{"krate":0,"index":2595},{"krate":0,"index":2596},{"krate":0,"index":2597},{"krate":0,"index":2598},{"krate":0,"index":2599},{"krate":0,"index":2600},{"krate":0,"index":2601},{"krate":0,"index":2602},{"krate":0,"index":2603},{"krate":0,"index":2604},{"krate":0,"index":2605},{"krate":0,"index":2606},{"krate":0,"index":2607},{"krate":0,"index":2608},{"krate":0,"index":2609},{"krate":0,"index":2610},{"krate":0,"index":2611},{"krate":0,"index":2612}],"decl_id":null,"docs":" Parsed parts of date and time. There are two classes of methods:","sig":null,"attributes":[{"value":"/ Parsed parts of date and time. There are two classes of methods:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":119986,"byte_end":120054,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":120055,"byte_end":120058,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ - `set_*` methods try to set given field(s) while checking for the consistency.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":120059,"byte_end":120142,"line_start":20,"line_end":20,"column_start":1,"column_end":84}},{"value":"/   It may or may not check for the range constraint immediately (for efficiency reasons).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":120143,"byte_end":120235,"line_start":21,"line_end":21,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":120236,"byte_end":120239,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - `to_*` methods try to make a concrete date and time value out of set fields.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":120240,"byte_end":120322,"line_start":23,"line_end":23,"column_start":1,"column_end":83}},{"value":"/   It fully checks any remaining out-of-range conditions and inconsistent/impossible fields.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":120323,"byte_end":120418,"line_start":24,"line_end":24,"column_start":1,"column_end":96}}]},{"kind":"Field","id":{"krate":0,"index":2592},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":120661,"byte_end":120665,"line_start":31,"line_end":31,"column_start":9,"column_end":13},"name":"year","qualname":"::format::parsed::Parsed::year","value":"std::option::Option<i32>","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":" Year.","sig":null,"attributes":[{"value":"/ Year.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":120491,"byte_end":120500,"line_start":27,"line_end":27,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":120505,"byte_end":120508,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`year_div_100`](#structfield.year_div_100)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":120513,"byte_end":120588,"line_start":29,"line_end":29,"column_start":5,"column_end":80}},{"value":"/ and [`year_mod_100`](#structfield.year_mod_100) fields.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":120593,"byte_end":120652,"line_start":30,"line_end":30,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":2593},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":120969,"byte_end":120981,"line_start":38,"line_end":38,"column_start":9,"column_end":21},"name":"year_div_100","qualname":"::format::parsed::Parsed::year_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":" Year divided by 100. Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year divided by 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":120685,"byte_end":120753,"line_start":33,"line_end":33,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":120758,"byte_end":120761,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":120766,"byte_end":120823,"line_start":35,"line_end":35,"column_start":5,"column_end":62}},{"value":"/ [`year_mod_100`](#structfield.year_mod_100) is present,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":120828,"byte_end":120887,"line_start":36,"line_end":36,"column_start":5,"column_end":64}},{"value":"/ it is inferred to 19 when `year_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":120892,"byte_end":120960,"line_start":37,"line_end":37,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":2594},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":121074,"byte_end":121086,"line_start":41,"line_end":41,"column_start":9,"column_end":21},"name":"year_mod_100","qualname":"::format::parsed::Parsed::year_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":" Year modulo 100. Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year modulo 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":121001,"byte_end":121065,"line_start":40,"line_end":40,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":2595},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":121353,"byte_end":121360,"line_start":47,"line_end":47,"column_start":9,"column_end":16},"name":"isoyear","qualname":"::format::parsed::Parsed::isoyear","value":"std::option::Option<i32>","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":121106,"byte_end":121180,"line_start":43,"line_end":43,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":121185,"byte_end":121188,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`isoyear_div_100`](#structfield.isoyear_div_100) and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":121193,"byte_end":121278,"line_start":45,"line_end":45,"column_start":5,"column_end":90}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) fields.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":121283,"byte_end":121344,"line_start":46,"line_end":46,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":2596},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":121747,"byte_end":121762,"line_start":55,"line_end":55,"column_start":9,"column_end":24},"name":"isoyear_div_100","qualname":"::format::parsed::Parsed::isoyear_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.\n Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":121380,"byte_end":121470,"line_start":49,"line_end":49,"column_start":5,"column_end":95}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":121475,"byte_end":121522,"line_start":50,"line_end":50,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":121527,"byte_end":121530,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":121535,"byte_end":121592,"line_start":52,"line_end":52,"column_start":5,"column_end":62}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) is present,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":121597,"byte_end":121662,"line_start":53,"line_end":53,"column_start":5,"column_end":70}},{"value":"/ it is inferred to 19 when `isoyear_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":121667,"byte_end":121738,"line_start":54,"line_end":54,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":2597},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":121929,"byte_end":121944,"line_start":59,"line_end":59,"column_start":9,"column_end":24},"name":"isoyear_mod_100","qualname":"::format::parsed::Parsed::isoyear_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.\n Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":121782,"byte_end":121868,"line_start":57,"line_end":57,"column_start":5,"column_end":91}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":121873,"byte_end":121920,"line_start":58,"line_end":58,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":2598},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":121991,"byte_end":121996,"line_start":62,"line_end":62,"column_start":9,"column_end":14},"name":"month","qualname":"::format::parsed::Parsed::month","value":"std::option::Option<u32>","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":" Month (1--12).\n","sig":null,"attributes":[{"value":"/ Month (1--12).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":121964,"byte_end":121982,"line_start":61,"line_end":61,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2599},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":122151,"byte_end":122164,"line_start":66,"line_end":66,"column_start":9,"column_end":22},"name":"week_from_sun","qualname":"::format::parsed::Parsed::week_from_sun","value":"std::option::Option<u32>","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":122016,"byte_end":122087,"line_start":64,"line_end":64,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":122092,"byte_end":122142,"line_start":65,"line_end":65,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":2600},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":122319,"byte_end":122332,"line_start":70,"line_end":70,"column_start":9,"column_end":22},"name":"week_from_mon","qualname":"::format::parsed::Parsed::week_from_mon","value":"std::option::Option<u32>","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":122184,"byte_end":122255,"line_start":68,"line_end":68,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":122260,"byte_end":122310,"line_start":69,"line_end":69,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":2601},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":122472,"byte_end":122479,"line_start":74,"line_end":74,"column_start":9,"column_end":16},"name":"isoweek","qualname":"::format::parsed::Parsed::isoweek","value":"std::option::Option<u32>","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":" [ISO week number](../naive/struct.NaiveDate.html#week-date)\n (1--52 or 1--53 depending on the year).\n","sig":null,"attributes":[{"value":"/ [ISO week number](../naive/struct.NaiveDate.html#week-date)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":122352,"byte_end":122415,"line_start":72,"line_end":72,"column_start":5,"column_end":68}},{"value":"/ (1--52 or 1--53 depending on the year).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":122420,"byte_end":122463,"line_start":73,"line_end":73,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":2602},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":122528,"byte_end":122535,"line_start":77,"line_end":77,"column_start":9,"column_end":16},"name":"weekday","qualname":"::format::parsed::Parsed::weekday","value":"std::option::Option<weekday::Weekday>","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":" Day of the week.\n","sig":null,"attributes":[{"value":"/ Day of the week.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":122499,"byte_end":122519,"line_start":76,"line_end":76,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":2603},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":122629,"byte_end":122636,"line_start":80,"line_end":80,"column_start":9,"column_end":16},"name":"ordinal","qualname":"::format::parsed::Parsed::ordinal","value":"std::option::Option<u32>","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":" Day of the year (1--365 or 1--366 depending on the year).\n","sig":null,"attributes":[{"value":"/ Day of the year (1--365 or 1--366 depending on the year).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":122559,"byte_end":122620,"line_start":79,"line_end":79,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":2604},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":122740,"byte_end":122743,"line_start":83,"line_end":83,"column_start":9,"column_end":12},"name":"day","qualname":"::format::parsed::Parsed::day","value":"std::option::Option<u32>","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":" Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).\n","sig":null,"attributes":[{"value":"/ Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":122656,"byte_end":122731,"line_start":82,"line_end":82,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":2605},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":122844,"byte_end":122855,"line_start":86,"line_end":86,"column_start":9,"column_end":20},"name":"hour_div_12","qualname":"::format::parsed::Parsed::hour_div_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":" Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.\n","sig":null,"attributes":[{"value":"/ Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":122763,"byte_end":122835,"line_start":85,"line_end":85,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":2606},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":122918,"byte_end":122929,"line_start":89,"line_end":89,"column_start":9,"column_end":20},"name":"hour_mod_12","qualname":"::format::parsed::Parsed::hour_mod_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":" Hour number modulo 12 (0--11).\n","sig":null,"attributes":[{"value":"/ Hour number modulo 12 (0--11).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":122875,"byte_end":122909,"line_start":88,"line_end":88,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":2607},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":122984,"byte_end":122990,"line_start":92,"line_end":92,"column_start":9,"column_end":15},"name":"minute","qualname":"::format::parsed::Parsed::minute","value":"std::option::Option<u32>","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":" Minute number (0--59).\n","sig":null,"attributes":[{"value":"/ Minute number (0--59).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":122949,"byte_end":122975,"line_start":91,"line_end":91,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":2608},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":123074,"byte_end":123080,"line_start":95,"line_end":95,"column_start":9,"column_end":15},"name":"second","qualname":"::format::parsed::Parsed::second","value":"std::option::Option<u32>","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":" Second number (0--60, accounting for leap seconds).\n","sig":null,"attributes":[{"value":"/ Second number (0--60, accounting for leap seconds).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":123010,"byte_end":123065,"line_start":94,"line_end":94,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":2609},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":123179,"byte_end":123189,"line_start":98,"line_end":98,"column_start":9,"column_end":19},"name":"nanosecond","qualname":"::format::parsed::Parsed::nanosecond","value":"std::option::Option<u32>","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the whole second (0--999,999,999).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the whole second (0--999,999,999).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":123100,"byte_end":123170,"line_start":97,"line_end":97,"column_start":5,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":2610},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":123392,"byte_end":123401,"line_start":103,"line_end":103,"column_start":9,"column_end":18},"name":"timestamp","qualname":"::format::parsed::Parsed::timestamp","value":"std::option::Option<i64>","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970.","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":123209,"byte_end":123286,"line_start":100,"line_end":100,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":123291,"byte_end":123294,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ This can be off by one if [`second`](#structfield.second) is 60 (a leap second).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":123299,"byte_end":123383,"line_start":102,"line_end":102,"column_start":5,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":2611},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":123480,"byte_end":123486,"line_start":106,"line_end":106,"column_start":9,"column_end":15},"name":"offset","qualname":"::format::parsed::Parsed::offset","value":"std::option::Option<i32>","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC, in seconds.\n","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC, in seconds.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":123421,"byte_end":123471,"line_start":105,"line_end":105,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":767},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":124121,"byte_end":124124,"line_start":130,"line_end":130,"column_start":12,"column_end":15},"name":"new","qualname":"<Parsed>::new","value":"fn new() -> Parsed","parent":null,"children":[],"decl_id":null,"docs":" Returns the initial value of parsed parts.\n","sig":null,"attributes":[{"value":"/ Returns the initial value of parsed parts.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":124063,"byte_end":124109,"line_start":129,"line_end":129,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":124274,"byte_end":124282,"line_start":136,"line_end":136,"column_start":12,"column_end":20},"name":"set_year","qualname":"<Parsed>::set_year","value":"fn set_year<'_>(&'_ mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year`](#structfield.year) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year`](#structfield.year) field from given value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":124176,"byte_end":124248,"line_start":134,"line_end":134,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":124253,"byte_end":124262,"line_start":135,"line_end":135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":124531,"byte_end":124547,"line_start":142,"line_end":142,"column_start":12,"column_end":28},"name":"set_year_div_100","qualname":"<Parsed>::set_year_div_100","value":"fn set_year_div_100<'_>(&'_ mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":124417,"byte_end":124505,"line_start":140,"line_end":140,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":124510,"byte_end":124519,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":124875,"byte_end":124891,"line_start":151,"line_end":151,"column_start":12,"column_end":28},"name":"set_year_mod_100","qualname":"<Parsed>::set_year_mod_100","value":"fn set_year_mod_100<'_>(&'_ mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":124761,"byte_end":124849,"line_start":149,"line_end":149,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":124854,"byte_end":124863,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":771},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":125209,"byte_end":125220,"line_start":160,"line_end":160,"column_start":12,"column_end":23},"name":"set_isoyear","qualname":"<Parsed>::set_isoyear","value":"fn set_isoyear<'_>(&'_ mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear`](#structfield.isoyear) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear`](#structfield.isoyear) field from given value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":125105,"byte_end":125183,"line_start":158,"line_end":158,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":125188,"byte_end":125197,"line_start":159,"line_end":159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":125478,"byte_end":125497,"line_start":166,"line_end":166,"column_start":12,"column_end":31},"name":"set_isoyear_div_100","qualname":"<Parsed>::set_isoyear_div_100","value":"fn set_isoyear_div_100<'_>(&'_ mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":125358,"byte_end":125452,"line_start":164,"line_end":164,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":125457,"byte_end":125466,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":125834,"byte_end":125853,"line_start":175,"line_end":175,"column_start":12,"column_end":31},"name":"set_isoyear_mod_100","qualname":"<Parsed>::set_isoyear_mod_100","value":"fn set_isoyear_mod_100<'_>(&'_ mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":125714,"byte_end":125808,"line_start":173,"line_end":173,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":125813,"byte_end":125822,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":126170,"byte_end":126179,"line_start":184,"line_end":184,"column_start":12,"column_end":21},"name":"set_month","qualname":"<Parsed>::set_month","value":"fn set_month<'_>(&'_ mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`month`](#structfield.month) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`month`](#structfield.month) field from given value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":126070,"byte_end":126144,"line_start":182,"line_end":182,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":126149,"byte_end":126158,"line_start":183,"line_end":183,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":775},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":126431,"byte_end":126448,"line_start":190,"line_end":190,"column_start":12,"column_end":29},"name":"set_week_from_sun","qualname":"<Parsed>::set_week_from_sun","value":"fn set_week_from_sun<'_>(&'_ mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":126315,"byte_end":126405,"line_start":188,"line_end":188,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":126410,"byte_end":126419,"line_start":189,"line_end":189,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":126708,"byte_end":126725,"line_start":196,"line_end":196,"column_start":12,"column_end":29},"name":"set_week_from_mon","qualname":"<Parsed>::set_week_from_mon","value":"fn set_week_from_mon<'_>(&'_ mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":126592,"byte_end":126682,"line_start":194,"line_end":194,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":126687,"byte_end":126696,"line_start":195,"line_end":195,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":777},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":126973,"byte_end":126984,"line_start":202,"line_end":202,"column_start":12,"column_end":23},"name":"set_isoweek","qualname":"<Parsed>::set_isoweek","value":"fn set_isoweek<'_>(&'_ mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoweek`](#structfield.isoweek) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoweek`](#structfield.isoweek) field from given value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":126869,"byte_end":126947,"line_start":200,"line_end":200,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":126952,"byte_end":126961,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":127226,"byte_end":127237,"line_start":208,"line_end":208,"column_start":12,"column_end":23},"name":"set_weekday","qualname":"<Parsed>::set_weekday","value":"fn set_weekday<'_>(&'_ mut Self, Weekday) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`weekday`](#structfield.weekday) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`weekday`](#structfield.weekday) field from given value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":127122,"byte_end":127200,"line_start":206,"line_end":206,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":127205,"byte_end":127214,"line_start":207,"line_end":207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":779},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":127453,"byte_end":127464,"line_start":214,"line_end":214,"column_start":12,"column_end":23},"name":"set_ordinal","qualname":"<Parsed>::set_ordinal","value":"fn set_ordinal<'_>(&'_ mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`ordinal`](#structfield.ordinal) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`ordinal`](#structfield.ordinal) field from given value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":127349,"byte_end":127427,"line_start":212,"line_end":212,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":127432,"byte_end":127441,"line_start":213,"line_end":213,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":127698,"byte_end":127705,"line_start":220,"line_end":220,"column_start":12,"column_end":19},"name":"set_day","qualname":"<Parsed>::set_day","value":"fn set_day<'_>(&'_ mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`day`](#structfield.day) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`day`](#structfield.day) field from given value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":127602,"byte_end":127672,"line_start":218,"line_end":218,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":127677,"byte_end":127686,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":781},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":127991,"byte_end":127999,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"name":"set_ampm","qualname":"<Parsed>::set_ampm","value":"fn set_ampm<'_>(&'_ mut Self, bool) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.\n (`false` for AM, `true` for PM)\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":127839,"byte_end":127925,"line_start":224,"line_end":224,"column_start":5,"column_end":91}},{"value":"/ (`false` for AM, `true` for PM)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":127930,"byte_end":127965,"line_start":225,"line_end":225,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":127970,"byte_end":127979,"line_start":226,"line_end":226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":128276,"byte_end":128286,"line_start":234,"line_end":234,"column_start":12,"column_end":22},"name":"set_hour12","qualname":"<Parsed>::set_hour12","value":"fn set_hour12<'_>(&'_ mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from\n given hour number in 12-hour clocks.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":128132,"byte_end":128205,"line_start":231,"line_end":231,"column_start":5,"column_end":78}},{"value":"/ given hour number in 12-hour clocks.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":128210,"byte_end":128250,"line_start":232,"line_end":232,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":128255,"byte_end":128264,"line_start":233,"line_end":233,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":783},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":128666,"byte_end":128674,"line_start":244,"line_end":244,"column_start":12,"column_end":20},"name":"set_hour","qualname":"<Parsed>::set_hour","value":"fn set_hour<'_>(&'_ mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set both [`hour_div_12`](#structfield.hour_div_12) and\n [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set both [`hour_div_12`](#structfield.hour_div_12) and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":128498,"byte_end":128565,"line_start":241,"line_end":241,"column_start":5,"column_end":72}},{"value":"/ [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":128570,"byte_end":128640,"line_start":242,"line_end":242,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":128645,"byte_end":128654,"line_start":243,"line_end":243,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":129018,"byte_end":129028,"line_start":253,"line_end":253,"column_start":12,"column_end":22},"name":"set_minute","qualname":"<Parsed>::set_minute","value":"fn set_minute<'_>(&'_ mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`minute`](#structfield.minute) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`minute`](#structfield.minute) field from given value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":128916,"byte_end":128992,"line_start":251,"line_end":251,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":128997,"byte_end":129006,"line_start":252,"line_end":252,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":129267,"byte_end":129277,"line_start":259,"line_end":259,"column_start":12,"column_end":22},"name":"set_second","qualname":"<Parsed>::set_second","value":"fn set_second<'_>(&'_ mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`second`](#structfield.second) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`second`](#structfield.second) field from given value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":129165,"byte_end":129241,"line_start":257,"line_end":257,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":129246,"byte_end":129255,"line_start":258,"line_end":258,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":129524,"byte_end":129538,"line_start":265,"line_end":265,"column_start":12,"column_end":26},"name":"set_nanosecond","qualname":"<Parsed>::set_nanosecond","value":"fn set_nanosecond<'_>(&'_ mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":129414,"byte_end":129498,"line_start":263,"line_end":263,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":129503,"byte_end":129512,"line_start":264,"line_end":264,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":129787,"byte_end":129800,"line_start":271,"line_end":271,"column_start":12,"column_end":25},"name":"set_timestamp","qualname":"<Parsed>::set_timestamp","value":"fn set_timestamp<'_>(&'_ mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`timestamp`](#structfield.timestamp) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`timestamp`](#structfield.timestamp) field from given value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":129679,"byte_end":129761,"line_start":269,"line_end":269,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":129766,"byte_end":129775,"line_start":270,"line_end":270,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":130012,"byte_end":130022,"line_start":277,"line_end":277,"column_start":12,"column_end":22},"name":"set_offset","qualname":"<Parsed>::set_offset","value":"fn set_offset<'_>(&'_ mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`offset`](#structfield.offset) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`offset`](#structfield.offset) field from given value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":129910,"byte_end":129986,"line_start":275,"line_end":275,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":129991,"byte_end":130000,"line_start":276,"line_end":276,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":789},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":130666,"byte_end":130679,"line_start":292,"line_end":292,"column_start":12,"column_end":25},"name":"to_naive_date","qualname":"<Parsed>::to_naive_date","value":"fn to_naive_date<'_>(&'_ Self) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date out of given fields.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":130159,"byte_end":130211,"line_start":281,"line_end":281,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":130216,"byte_end":130219,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the date from given subset of fields:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":130224,"byte_end":130298,"line_start":283,"line_end":283,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":130303,"byte_end":130306,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ - Year, month, day.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":130311,"byte_end":130334,"line_start":285,"line_end":285,"column_start":5,"column_end":28}},{"value":"/ - Year, day of the year (ordinal).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":130339,"byte_end":130377,"line_start":286,"line_end":286,"column_start":5,"column_end":43}},{"value":"/ - Year, week number counted from Sunday or Monday, day of the week.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":130382,"byte_end":130453,"line_start":287,"line_end":287,"column_start":5,"column_end":76}},{"value":"/ - ISO week date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":130458,"byte_end":130478,"line_start":288,"line_end":288,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":130483,"byte_end":130486,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ Gregorian year and ISO week date year can have their century number (`*_div_100`) omitted,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":130491,"byte_end":130585,"line_start":290,"line_end":290,"column_start":5,"column_end":99}},{"value":"/ the two-digit year is used to guess the century number then.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":130590,"byte_end":130654,"line_start":291,"line_end":291,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":797},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":139998,"byte_end":140011,"line_start":500,"line_end":500,"column_start":12,"column_end":25},"name":"to_naive_time","qualname":"<Parsed>::to_naive_time","value":"fn to_naive_time<'_>(&'_ Self) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive time out of given fields.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":139595,"byte_end":139647,"line_start":491,"line_end":491,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":139652,"byte_end":139655,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the time from given subset of fields:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":139660,"byte_end":139734,"line_start":493,"line_end":493,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":139739,"byte_end":139742,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ - Hour, minute. (second and nanosecond assumed to be 0)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":139747,"byte_end":139806,"line_start":495,"line_end":495,"column_start":5,"column_end":64}},{"value":"/ - Hour, minute, second. (nanosecond assumed to be 0)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":139811,"byte_end":139867,"line_start":496,"line_end":496,"column_start":5,"column_end":61}},{"value":"/ - Hour, minute, second, nanosecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":139872,"byte_end":139911,"line_start":497,"line_end":497,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":139916,"byte_end":139919,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ It is able to handle leap seconds when given second is 60.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":139924,"byte_end":139986,"line_start":499,"line_end":499,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":141794,"byte_end":141823,"line_start":542,"line_end":542,"column_start":12,"column_end":41},"name":"to_naive_datetime_with_offset","qualname":"<Parsed>::to_naive_datetime_with_offset","value":"fn to_naive_datetime_with_offset<'_>(&'_ Self, i32)\n-> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date and time out of given fields,\n except for the [`offset`](#structfield.offset) field (assumed to have a given value).\n This is required for parsing a local time or other known-timezone inputs.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date and time out of given fields,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":141309,"byte_end":141370,"line_start":535,"line_end":535,"column_start":5,"column_end":66}},{"value":"/ except for the [`offset`](#structfield.offset) field (assumed to have a given value).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":141375,"byte_end":141464,"line_start":536,"line_end":536,"column_start":5,"column_end":94}},{"value":"/ This is required for parsing a local time or other known-timezone inputs.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":141469,"byte_end":141546,"line_start":537,"line_end":537,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":141551,"byte_end":141554,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":141559,"byte_end":141622,"line_start":539,"line_end":539,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":141627,"byte_end":141713,"line_start":540,"line_end":540,"column_start":5,"column_end":91}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":141718,"byte_end":141782,"line_start":541,"line_end":541,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":145241,"byte_end":145256,"line_start":615,"line_end":615,"column_start":12,"column_end":27},"name":"to_fixed_offset","qualname":"<Parsed>::to_fixed_offset","value":"fn to_fixed_offset<'_>(&'_ Self) -> ParseResult<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed fixed time zone offset out of given fields.\n","sig":null,"attributes":[{"value":"/ Returns a parsed fixed time zone offset out of given fields.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":145165,"byte_end":145229,"line_start":614,"line_end":614,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":145728,"byte_end":145739,"line_start":625,"line_end":625,"column_start":12,"column_end":23},"name":"to_datetime","qualname":"<Parsed>::to_datetime","value":"fn to_datetime<'_>(&'_ Self) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":145377,"byte_end":145447,"line_start":619,"line_end":619,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":145452,"byte_end":145455,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":145460,"byte_end":145523,"line_start":621,"line_end":621,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":145528,"byte_end":145614,"line_start":622,"line_end":622,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":145619,"byte_end":145647,"line_start":623,"line_end":623,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":145652,"byte_end":145716,"line_start":624,"line_end":624,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":811},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":147005,"byte_end":147030,"line_start":651,"line_end":651,"column_start":12,"column_end":37},"name":"to_datetime_with_timezone","qualname":"<Parsed>::to_datetime_with_timezone","value":"fn to_datetime_with_timezone<Tz, '_, '_>(&'_ Self, &'_ Tz)\n-> ParseResult<DateTime<Tz>> where Tz: TimeZone","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields,\n with an additional `TimeZone` used to interpret and validate the local date.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":146448,"byte_end":146518,"line_start":642,"line_end":642,"column_start":5,"column_end":75}},{"value":"/ with an additional `TimeZone` used to interpret and validate the local date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":146523,"byte_end":146603,"line_start":643,"line_end":643,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":146608,"byte_end":146611,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":146616,"byte_end":146679,"line_start":645,"line_end":645,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":146684,"byte_end":146770,"line_start":646,"line_end":646,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":146775,"byte_end":146803,"line_start":647,"line_end":647,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":146808,"byte_end":146872,"line_start":648,"line_end":648,"column_start":5,"column_end":69}},{"value":"/ If parsed fields include an UTC offset, it also has to be consistent to","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":146877,"byte_end":146952,"line_start":649,"line_end":649,"column_start":5,"column_end":80}},{"value":"/ [`offset`](#structfield.offset).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":146957,"byte_end":146993,"line_start":650,"line_end":650,"column_start":5,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":896},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":184588,"byte_end":184593,"line_start":243,"line_end":243,"column_start":8,"column_end":13},"name":"parse","qualname":"::format::parse::parse","value":"fn parse<'a, I, B, '_, '_>(&'_ mut Parsed, &'_ str, I) -> ParseResult<()>\nwhere I: Iterator<Item = B>, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Tries to parse given string into `parsed` with given formatting items.\n Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\n There should be no trailing string after parsing;\n use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","sig":null,"attributes":[{"value":"/ Tries to parse given string into `parsed` with given formatting items.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":183685,"byte_end":183759,"line_start":227,"line_end":227,"column_start":1,"column_end":75}},{"value":"/ Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":183760,"byte_end":183856,"line_start":228,"line_end":228,"column_start":1,"column_end":97}},{"value":"/ There should be no trailing string after parsing;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":183857,"byte_end":183910,"line_start":229,"line_end":229,"column_start":1,"column_end":54}},{"value":"/ use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":183911,"byte_end":183995,"line_start":230,"line_end":230,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":183996,"byte_end":183999,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/ This particular date and time parser is:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":184000,"byte_end":184044,"line_start":232,"line_end":232,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":184045,"byte_end":184048,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ - Greedy. It will consume the longest possible prefix.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":184049,"byte_end":184107,"line_start":234,"line_end":234,"column_start":1,"column_end":59}},{"value":"/   For example, `April` is always consumed entirely when the long month name is requested;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":184108,"byte_end":184201,"line_start":235,"line_end":235,"column_start":1,"column_end":94}},{"value":"/   it equally accepts `Apr`, but prefers the longer prefix in this case.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":184202,"byte_end":184277,"line_start":236,"line_end":236,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":184278,"byte_end":184281,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ - Padding-agnostic (for numeric items).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":184282,"byte_end":184325,"line_start":238,"line_end":238,"column_start":1,"column_end":44}},{"value":"/   The [`Pad`](./enum.Pad.html) field is completely ignored,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":184326,"byte_end":184389,"line_start":239,"line_end":239,"column_start":1,"column_end":64}},{"value":"/   so one can prepend any number of whitespace then any number of zeroes before numbers.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":184390,"byte_end":184481,"line_start":240,"line_end":240,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":184482,"byte_end":184485,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"/ - (Still) obeying the intrinsic parsing width. This allows, for example, parsing `HHMMSS`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":184486,"byte_end":184580,"line_start":242,"line_end":242,"column_start":1,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":194157,"byte_end":194165,"line_start":481,"line_end":481,"column_start":8,"column_end":16},"name":"from_str","qualname":"<DateTime<FixedOffset> as std::str::FromStr>::from_str","value":"fn from_str<'_>(&'_ str) -> ParseResult<DateTime<FixedOffset>>","parent":{"krate":2,"index":12994},"children":[],"decl_id":{"krate":2,"index":12996},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":995},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\strftime.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"strftime","qualname":"::format::strftime","value":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\strftime.rs","parent":null,"children":[{"krate":0,"index":996},{"krate":0,"index":997},{"krate":0,"index":1000},{"krate":0,"index":1003},{"krate":0,"index":1006},{"krate":0,"index":1009},{"krate":0,"index":1012},{"krate":0,"index":1015},{"krate":0,"index":1017},{"krate":0,"index":1018},{"krate":0,"index":1019},{"krate":0,"index":2627},{"krate":0,"index":2634},{"krate":0,"index":2637},{"krate":0,"index":1020},{"krate":0,"index":1026},{"krate":0,"index":1027}],"decl_id":null,"docs":"`strftime`/`strptime`-inspired date and time formatting syntax.","sig":null,"attributes":[{"value":"*\n`strftime`/`strptime`-inspired date and time formatting syntax.\n\n## Specifiers\n\nThe following specifiers are available both to formatting and parsing.\n\n| Spec. | Example  | Description                                                                |\n|-------|----------|----------------------------------------------------------------------------|\n|       |          | **DATE SPECIFIERS:**                                                       |\n| `%Y`  | `2001`   | The full proleptic Gregorian year, zero-padded to 4 digits. chrono supports years from -262144 to 262143. |\n| `%C`  | `20`     | The proleptic Gregorian year divided by 100, zero-padded to 2 digits. [^1] |\n| `%y`  | `01`     | The proleptic Gregorian year modulo 100, zero-padded to 2 digits. [^1]     |\n|       |          |                                                                            |\n| `%m`  | `07`     | Month number (01--12), zero-padded to 2 digits.                            |\n| `%b`  | `Jul`    | Abbreviated month name. Always 3 letters.                                  |\n| `%B`  | `July`   | Full month name. Also accepts corresponding abbreviation in parsing.       |\n| `%h`  | `Jul`    | Same as `%b`.                                                              |\n|       |          |                                                                            |\n| `%d`  | `08`     | Day number (01--31), zero-padded to 2 digits.                              |\n| `%e`  | ` 8`     | Same as `%d` but space-padded. Same as `%_d`.                              |\n|       |          |                                                                            |\n| `%a`  | `Sun`    | Abbreviated weekday name. Always 3 letters.                                |\n| `%A`  | `Sunday` | Full weekday name. Also accepts corresponding abbreviation in parsing.     |\n| `%w`  | `0`      | Sunday = 0, Monday = 1, ..., Saturday = 6.                                 |\n| `%u`  | `7`      | Monday = 1, Tuesday = 2, ..., Sunday = 7. (ISO 8601)                       |\n|       |          |                                                                            |\n| `%U`  | `28`     | Week number starting with Sunday (00--53), zero-padded to 2 digits. [^2]   |\n| `%W`  | `27`     | Same as `%U`, but week 1 starts with the first Monday in that year instead.|\n|       |          |                                                                            |\n| `%G`  | `2001`   | Same as `%Y` but uses the year number in ISO 8601 week date. [^3]          |\n| `%g`  | `01`     | Same as `%y` but uses the year number in ISO 8601 week date. [^3]          |\n| `%V`  | `27`     | Same as `%U` but uses the week number in ISO 8601 week date (01--53). [^3] |\n|       |          |                                                                            |\n| `%j`  | `189`    | Day of the year (001--366), zero-padded to 3 digits.                       |\n|       |          |                                                                            |\n| `%D`  | `07/08/01`    | Month-day-year format. Same as `%m/%d/%y`.                            |\n| `%x`  | `07/08/01`    | Locale's date representation (e.g., 12/31/99).                        |\n| `%F`  | `2001-07-08`  | Year-month-day format (ISO 8601). Same as `%Y-%m-%d`.                 |\n| `%v`  | ` 8-Jul-2001` | Day-month-year format. Same as `%e-%b-%Y`.                            |\n|       |          |                                                                            |\n|       |          | **TIME SPECIFIERS:**                                                       |\n| `%H`  | `00`     | Hour number (00--23), zero-padded to 2 digits.                             |\n| `%k`  | ` 0`     | Same as `%H` but space-padded. Same as `%_H`.                              |\n| `%I`  | `12`     | Hour number in 12-hour clocks (01--12), zero-padded to 2 digits.           |\n| `%l`  | `12`     | Same as `%I` but space-padded. Same as `%_I`.                              |\n|       |          |                                                                            |\n| `%P`  | `am`     | `am` or `pm` in 12-hour clocks.                                            |\n| `%p`  | `AM`     | `AM` or `PM` in 12-hour clocks.                                            |\n|       |          |                                                                            |\n| `%M`  | `34`     | Minute number (00--59), zero-padded to 2 digits.                           |\n| `%S`  | `60`     | Second number (00--60), zero-padded to 2 digits. [^4]                      |\n| `%f`  | `026490000`   | The fractional seconds (in nanoseconds) since last whole second. [^7] |\n| `%.f` | `.026490`| Similar to `.%f` but left-aligned. These all consume the leading dot. [^7] |\n| `%.3f`| `.026`        | Similar to `.%f` but left-aligned but fixed to a length of 3. [^7]    |\n| `%.6f`| `.026490`     | Similar to `.%f` but left-aligned but fixed to a length of 6. [^7]    |\n| `%.9f`| `.026490000`  | Similar to `.%f` but left-aligned but fixed to a length of 9. [^7]    |\n| `%3f` | `026`         | Similar to `%.3f` but without the leading dot. [^7]                   |\n| `%6f` | `026490`      | Similar to `%.6f` but without the leading dot. [^7]                   |\n| `%9f` | `026490000`   | Similar to `%.9f` but without the leading dot. [^7]                   |\n|       |               |                                                                       |\n| `%R`  | `00:34`       | Hour-minute format. Same as `%H:%M`.                                  |\n| `%T`  | `00:34:60`    | Hour-minute-second format. Same as `%H:%M:%S`.                        |\n| `%X`  | `00:34:60`    | Locale's time representation (e.g., 23:13:48).                        |\n| `%r`  | `12:34:60 AM` | Hour-minute-second format in 12-hour clocks. Same as `%I:%M:%S %p`.   |\n|       |          |                                                                            |\n|       |          | **TIME ZONE SPECIFIERS:**                                                  |\n| `%Z`  | `ACST`   | Local time zone name. Skips all non-whitespace characters during parsing. [^8] |\n| `%z`  | `+0930`  | Offset from the local time to UTC (with UTC being `+0000`).                |\n| `%:z` | `+09:30` | Same as `%z` but with a colon.                                             |\n| `%#z` | `+09`    | *Parsing only:* Same as `%z` but allows minutes to be missing or present.  |\n|       |          |                                                                            |\n|       |          | **DATE & TIME SPECIFIERS:**                                                |\n|`%c`|`Sun Jul  8 00:34:60 2001`|Locale's date and time (e.g., Thu Mar  3 23:05:25 2005).       |\n| `%+`  | `2001-07-08T00:34:60.026490+09:30` | ISO 8601 / RFC 3339 date & time format. [^5]     |\n|       |               |                                                                       |\n| `%s`  | `994518299`   | UNIX timestamp, the number of seconds since 1970-01-01 00:00 UTC. [^6]|\n|       |          |                                                                            |\n|       |          | **SPECIAL SPECIFIERS:**                                                    |\n| `%t`  |          | Literal tab (`\\t`).                                                        |\n| `%n`  |          | Literal newline (`\\n`).                                                    |\n| `%%`  |          | Literal percent sign.                                                      |\n\nIt is possible to override the default padding behavior of numeric specifiers `%?`.\nThis is not allowed for other specifiers and will result in the `BAD_FORMAT` error.\n\nModifier | Description\n-------- | -----------\n`%-?`    | Suppresses any padding including spaces and zeroes. (e.g. `%j` = `012`, `%-j` = `12`)\n`%_?`    | Uses spaces as a padding. (e.g. `%j` = `012`, `%_j` = ` 12`)\n`%0?`    | Uses zeroes as a padding. (e.g. `%e` = ` 9`, `%0e` = `09`)\n\nNotes:\n\n[^1]: `%C`, `%y`:\n   This is floor division, so 100 BCE (year number -99) will print `-1` and `99` respectively.\n\n[^2]: `%U`:\n   Week 1 starts with the first Sunday in that year.\n   It is possible to have week 0 for days before the first Sunday.\n\n[^3]: `%G`, `%g`, `%V`:\n   Week 1 is the first week with at least 4 days in that year.\n   Week 0 does not exist, so this should be used with `%G` or `%g`.\n\n[^4]: `%S`:\n   It accounts for leap seconds, so `60` is possible.\n\n[^5]: `%+`: Same as `%Y-%m-%dT%H:%M:%S%.f%:z`, i.e. 0, 3, 6 or 9 fractional\n   digits for seconds and colons in the time zone offset.\n   <br>\n   <br>\n   The typical `strftime` implementations have different (and locale-dependent)\n   formats for this specifier. While Chrono's format for `%+` is far more\n   stable, it is best to avoid this specifier if you want to control the exact\n   output.\n\n[^6]: `%s`:\n   This is not padded and can be negative.\n   For the purpose of Chrono, it only accounts for non-leap seconds\n   so it slightly differs from ISO C `strftime` behavior.\n\n[^7]: `%f`, `%.f`, `%.3f`, `%.6f`, `%.9f`, `%3f`, `%6f`, `%9f`:\n   <br>\n   The default `%f` is right-aligned and always zero-padded to 9 digits\n   for the compatibility with glibc and others,\n   so it always counts the number of nanoseconds since the last whole second.\n   E.g. 7ms after the last second will print `007000000`,\n   and parsing `7000000` will yield the same.\n   <br>\n   <br>\n   The variant `%.f` is left-aligned and print 0, 3, 6 or 9 fractional digits\n   according to the precision.\n   E.g. 70ms after the last second under `%.f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can print or read nothing if the fractional part is zero or\n   the next character is not `.`.\n   <br>\n   <br>\n   The variant `%.3f`, `%.6f` and `%.9f` are left-aligned and print 3, 6 or 9 fractional digits\n   according to the number preceding `f`.\n   E.g. 70ms after the last second under `%.3f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can read nothing if the fractional part is zero or\n   the next character is not `.` however will print with the specified length.\n   <br>\n   <br>\n   The variant `%3f`, `%6f` and `%9f` are left-aligned and print 3, 6 or 9 fractional digits\n   according to the number preceding `f`, but without the leading dot.\n   E.g. 70ms after the last second under `%3f` will print `070` (note: not `07`),\n   and parsing `07`, `070000` etc. will yield the same.\n   Note that they can read nothing if the fractional part is zero.\n\n[^8]: `%Z`:\n   Offset will not be populated from the parsed data, nor will it be validated.\n   Timezone is completely ignored. Similar to the glibc `strptime` treatment of\n   this format code.\n   <br>\n   <br>\n   It is not possible to reliably convert from an abbreviation to an offset,\n   for example CDT can mean either Central Daylight Time (North America) or\n   China Daylight Time.\n*/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\strftime.rs","byte_start":232472,"byte_end":243496,"line_start":4,"line_end":166,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":2627},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\strftime.rs","byte_start":244360,"byte_end":244373,"line_start":198,"line_end":198,"column_start":12,"column_end":25},"name":"StrftimeItems","qualname":"::format::strftime::StrftimeItems","value":"StrftimeItems {  }","parent":null,"children":[{"krate":0,"index":2629},{"krate":0,"index":2630},{"krate":0,"index":2631},{"krate":0,"index":2632},{"krate":0,"index":2633}],"decl_id":null,"docs":" Parsing iterator for `strftime`-like format strings.\n","sig":null,"attributes":[{"value":"/ Parsing iterator for `strftime`-like format strings.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\strftime.rs","byte_start":244268,"byte_end":244324,"line_start":196,"line_end":196,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1022},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\strftime.rs","byte_start":244963,"byte_end":244966,"line_start":215,"line_end":215,"column_start":12,"column_end":15},"name":"new","qualname":"<StrftimeItems>::new","value":"fn new(&'a str) -> StrftimeItems","parent":null,"children":[],"decl_id":null,"docs":" Creates a new parsing iterator from the `strftime`-like format string.\n","sig":null,"attributes":[{"value":"/ Creates a new parsing iterator from the `strftime`-like format string.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\strftime.rs","byte_start":244877,"byte_end":244951,"line_start":214,"line_end":214,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1030},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\strftime.rs","byte_start":246307,"byte_end":246311,"line_start":259,"line_end":259,"column_start":8,"column_end":12},"name":"next","qualname":"<StrftimeItems as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2646},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":112677,"byte_end":112690,"line_start":747,"line_end":747,"column_start":12,"column_end":25},"name":"DelayedFormat","qualname":"::format::DelayedFormat","value":"DelayedFormat {  }","parent":null,"children":[{"krate":0,"index":2648},{"krate":0,"index":2649},{"krate":0,"index":2650},{"krate":0,"index":2651}],"decl_id":null,"docs":" A *temporary* object which can be used as an argument to `format!` or others.\n This is normally constructed via `format` methods of each date and time type.\n","sig":null,"attributes":[{"value":"/ A *temporary* object which can be used as an argument to `format!` or others.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":112431,"byte_end":112512,"line_start":743,"line_end":743,"column_start":1,"column_end":82}},{"value":"/ This is normally constructed via `format` methods of each date and time type.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":112513,"byte_end":112594,"line_start":744,"line_end":744,"column_start":1,"column_end":82}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":112595,"byte_end":112648,"line_start":745,"line_end":745,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1040},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":113441,"byte_end":113444,"line_start":766,"line_end":766,"column_start":12,"column_end":15},"name":"new","qualname":"<DelayedFormat<I>>::new","value":"fn new(Option<NaiveDate>, Option<NaiveTime>, I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time.\n","sig":null,"attributes":[{"value":"/ Makes a new `DelayedFormat` value out of local date and time.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":113364,"byte_end":113429,"line_start":765,"line_end":765,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1041},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":113817,"byte_end":113832,"line_start":778,"line_end":778,"column_start":12,"column_end":27},"name":"new_with_offset","qualname":"<DelayedFormat<I>>::new_with_offset","value":"fn new_with_offset<Off, '_>(Option<NaiveDate>, Option<NaiveTime>, &'_ Off, I)\n-> DelayedFormat<I> where Off: Offset + fmt::Display","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time and UTC offset.\n","sig":null,"attributes":[{"value":"/ Makes a new `DelayedFormat` value out of local date and time and UTC offset.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":113725,"byte_end":113805,"line_start":777,"line_end":777,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1047},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":115375,"byte_end":115378,"line_start":828,"line_end":828,"column_start":8,"column_end":11},"name":"fmt","qualname":"<DelayedFormat<I> as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10300},"children":[],"decl_id":{"krate":2,"index":10301},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1050},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":116695,"byte_end":116703,"line_start":876,"line_end":876,"column_start":8,"column_end":16},"name":"from_str","qualname":"<Weekday as std::str::FromStr>::from_str","value":"fn from_str<'_>(&'_ str) -> Result<Self, Self::Err>","parent":{"krate":2,"index":12994},"children":[],"decl_id":{"krate":2,"index":12996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1053},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":118650,"byte_end":118658,"line_start":950,"line_end":950,"column_start":8,"column_end":16},"name":"from_str","qualname":"<Month as std::str::FromStr>::from_str","value":"fn from_str<'_>(&'_ str) -> Result<Self, Self::Err>","parent":{"krate":2,"index":12994},"children":[],"decl_id":{"krate":2,"index":12996},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1061},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"naive","qualname":"::naive","value":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","parent":null,"children":[{"krate":0,"index":1062},{"krate":0,"index":1291},{"krate":0,"index":1477},{"krate":0,"index":1565},{"krate":0,"index":1586},{"krate":0,"index":1713},{"krate":0,"index":1714},{"krate":0,"index":1717},{"krate":0,"index":1720},{"krate":0,"index":1723},{"krate":0,"index":1726},{"krate":0,"index":1727},{"krate":0,"index":1730},{"krate":0,"index":1733},{"krate":0,"index":1736},{"krate":0,"index":1739}],"decl_id":null,"docs":" Date and time types unconcerned with timezones.","sig":null,"attributes":[{"value":"/ Date and time types unconcerned with timezones.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":263065,"byte_end":263116,"line_start":1,"line_end":1,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":263117,"byte_end":263120,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ They are primarily building blocks for other types","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":263121,"byte_end":263175,"line_start":3,"line_end":3,"column_start":1,"column_end":55}},{"value":"/ (e.g. [`TimeZone`](../offset/trait.TimeZone.html)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":263176,"byte_end":263231,"line_start":4,"line_end":4,"column_start":1,"column_end":56}},{"value":"/ but can be also used for the simpler date and time handling.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\mod.rs","byte_start":263232,"byte_end":263296,"line_start":5,"line_end":5,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":2655},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":266341,"byte_end":266350,"line_start":57,"line_end":57,"column_start":12,"column_end":21},"name":"NaiveWeek","qualname":"::naive::date::NaiveWeek","value":"NaiveWeek {  }","parent":null,"children":[{"krate":0,"index":2656},{"krate":0,"index":2657}],"decl_id":null,"docs":" A week represented by a [`NaiveDate`] and a [`Weekday`] which is the first\n day of the week.\n","sig":null,"attributes":[{"value":"/ A week represented by a [`NaiveDate`] and a [`Weekday`] which is the first","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":266213,"byte_end":266291,"line_start":54,"line_end":54,"column_start":1,"column_end":79}},{"value":"/ day of the week.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":266292,"byte_end":266312,"line_start":55,"line_end":55,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1172},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":266751,"byte_end":266760,"line_start":75,"line_end":75,"column_start":12,"column_end":21},"name":"first_day","qualname":"<NaiveWeek>::first_day","value":"fn first_day<'_>(&'_ Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a date representing the first day of the week.","sig":null,"attributes":[{"value":"/ Returns a date representing the first day of the week.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":266418,"byte_end":266476,"line_start":63,"line_end":63,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":266481,"byte_end":266484,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":266489,"byte_end":266503,"line_start":65,"line_end":65,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":266508,"byte_end":266511,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":266516,"byte_end":266523,"line_start":67,"line_end":67,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":266528,"byte_end":266565,"line_start":68,"line_end":68,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":266570,"byte_end":266573,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ let date = NaiveDate::from_ymd(2022, 4, 18);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":266578,"byte_end":266626,"line_start":70,"line_end":70,"column_start":5,"column_end":53}},{"value":"/ let week = date.week(Weekday::Mon);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":266631,"byte_end":266670,"line_start":71,"line_end":71,"column_start":5,"column_end":44}},{"value":"/ assert!(week.first_day() <= date);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":266675,"byte_end":266713,"line_start":72,"line_end":72,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":266718,"byte_end":266725,"line_start":73,"line_end":73,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":266730,"byte_end":266739,"line_start":74,"line_end":74,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1173},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267366,"byte_end":267374,"line_start":94,"line_end":94,"column_start":12,"column_end":20},"name":"last_day","qualname":"<NaiveWeek>::last_day","value":"fn last_day<'_>(&'_ Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a date representing the last day of the week.","sig":null,"attributes":[{"value":"/ Returns a date representing the last day of the week.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267035,"byte_end":267092,"line_start":82,"line_end":82,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267097,"byte_end":267100,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267105,"byte_end":267119,"line_start":84,"line_end":84,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267124,"byte_end":267127,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267132,"byte_end":267139,"line_start":86,"line_end":86,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267144,"byte_end":267181,"line_start":87,"line_end":87,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267186,"byte_end":267189,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ let date = NaiveDate::from_ymd(2022, 4, 18);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267194,"byte_end":267242,"line_start":89,"line_end":89,"column_start":5,"column_end":53}},{"value":"/ let week = date.week(Weekday::Mon);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267247,"byte_end":267286,"line_start":90,"line_end":90,"column_start":5,"column_end":44}},{"value":"/ assert!(week.last_day() >= date);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267291,"byte_end":267328,"line_start":91,"line_end":91,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267333,"byte_end":267340,"line_start":92,"line_end":92,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267345,"byte_end":267354,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1174},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267967,"byte_end":267971,"line_start":113,"line_end":113,"column_start":12,"column_end":16},"name":"days","qualname":"<NaiveWeek>::days","value":"fn days<'_>(&'_ Self) -> RangeInclusive<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Returns a [`RangeInclusive<T>`] representing the whole week bounded by\n [first_day](./struct.NaiveWeek.html#method.first_day) and\n [last_day](./struct.NaiveWeek.html#method.last_day) functions.","sig":null,"attributes":[{"value":"/ Returns a [`RangeInclusive<T>`] representing the whole week bounded by","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267453,"byte_end":267527,"line_start":98,"line_end":98,"column_start":5,"column_end":79}},{"value":"/ [first_day](./struct.NaiveWeek.html#method.first_day) and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267532,"byte_end":267593,"line_start":99,"line_end":99,"column_start":5,"column_end":66}},{"value":"/ [last_day](./struct.NaiveWeek.html#method.last_day) functions.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267598,"byte_end":267664,"line_start":100,"line_end":100,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267669,"byte_end":267672,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267677,"byte_end":267691,"line_start":102,"line_end":102,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267696,"byte_end":267699,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267704,"byte_end":267711,"line_start":104,"line_end":104,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267716,"byte_end":267753,"line_start":105,"line_end":105,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267758,"byte_end":267761,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ let date = NaiveDate::from_ymd(2022, 4, 18);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267766,"byte_end":267814,"line_start":107,"line_end":107,"column_start":5,"column_end":53}},{"value":"/ let week = date.week(Weekday::Mon);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267819,"byte_end":267858,"line_start":108,"line_end":108,"column_start":5,"column_end":44}},{"value":"/ let days = week.days();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267863,"byte_end":267890,"line_start":109,"line_end":109,"column_start":5,"column_end":32}},{"value":"/ assert!(days.contains(&date));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267895,"byte_end":267929,"line_start":110,"line_end":110,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267934,"byte_end":267941,"line_start":111,"line_end":111,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":267946,"byte_end":267955,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2660},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":270711,"byte_end":270720,"line_start":168,"line_end":168,"column_start":12,"column_end":21},"name":"NaiveDate","qualname":"::naive::date::NaiveDate","value":"NaiveDate {  }","parent":null,"children":[{"krate":0,"index":2661}],"decl_id":null,"docs":" ISO 8601 calendar date without timezone.\n Allows for every [proleptic Gregorian date](#calendar-date)\n from Jan 1, 262145 BCE to Dec 31, 262143 CE.\n Also supports the conversion from ISO 8601 ordinal and week date.","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date without timezone.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":268062,"byte_end":268106,"line_start":118,"line_end":118,"column_start":1,"column_end":45}},{"value":"/ Allows for every [proleptic Gregorian date](#calendar-date)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":268107,"byte_end":268170,"line_start":119,"line_end":119,"column_start":1,"column_end":64}},{"value":"/ from Jan 1, 262145 BCE to Dec 31, 262143 CE.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":268171,"byte_end":268219,"line_start":120,"line_end":120,"column_start":1,"column_end":49}},{"value":"/ Also supports the conversion from ISO 8601 ordinal and week date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":268220,"byte_end":268289,"line_start":121,"line_end":121,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":268290,"byte_end":268293,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ # Calendar Date","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":268294,"byte_end":268313,"line_start":123,"line_end":123,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":268314,"byte_end":268317,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **calendar date** follows the proleptic Gregorian calendar.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":268318,"byte_end":268394,"line_start":125,"line_end":125,"column_start":1,"column_end":77}},{"value":"/ It is like a normal civil calendar but note some slight differences:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":268395,"byte_end":268467,"line_start":126,"line_end":126,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":268468,"byte_end":268471,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ * Dates before the Gregorian calendar's inception in 1582 are defined via the extrapolation.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":268472,"byte_end":268568,"line_start":128,"line_end":128,"column_start":1,"column_end":97}},{"value":"/   Be careful, as historical dates are often noted in the Julian calendar and others","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":268569,"byte_end":268656,"line_start":129,"line_end":129,"column_start":1,"column_end":88}},{"value":"/   and the transition to Gregorian may differ across countries (as late as early 20C).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":268657,"byte_end":268746,"line_start":130,"line_end":130,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":268747,"byte_end":268750,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/   (Some example: Both Shakespeare from Britain and Cervantes from Spain seemingly died","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":268751,"byte_end":268841,"line_start":132,"line_end":132,"column_start":1,"column_end":91}},{"value":"/   on the same calendar date---April 23, 1616---but in the different calendar.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":268842,"byte_end":268923,"line_start":133,"line_end":133,"column_start":1,"column_end":82}},{"value":"/   Britain used the Julian calendar at that time, so Shakespeare's death is later.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":268924,"byte_end":269010,"line_start":134,"line_end":134,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":269011,"byte_end":269014,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ * ISO 8601 calendars has the year 0, which is 1 BCE (a year before 1 CE).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":269015,"byte_end":269092,"line_start":136,"line_end":136,"column_start":1,"column_end":78}},{"value":"/   If you need a typical BCE/BC and CE/AD notation for year numbers,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":269093,"byte_end":269164,"line_start":137,"line_end":137,"column_start":1,"column_end":72}},{"value":"/   use the [`Datelike::year_ce`](../trait.Datelike.html#method.year_ce) method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":269165,"byte_end":269247,"line_start":138,"line_end":138,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":269248,"byte_end":269251,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ # Week Date","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":269252,"byte_end":269267,"line_start":140,"line_end":140,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":269268,"byte_end":269271,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **week date** is a triple of year number, week number","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":269272,"byte_end":269342,"line_start":142,"line_end":142,"column_start":1,"column_end":71}},{"value":"/ and [day of the week](../enum.Weekday.html) with the following rules:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":269343,"byte_end":269416,"line_start":143,"line_end":143,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":269417,"byte_end":269420,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ * A week consists of Monday through Sunday, and is always numbered within some year.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":269421,"byte_end":269509,"line_start":145,"line_end":145,"column_start":1,"column_end":89}},{"value":"/   The week number ranges from 1 to 52 or 53 depending on the year.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":269510,"byte_end":269580,"line_start":146,"line_end":146,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":269581,"byte_end":269584,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ * The week 1 of given year is defined as the first week containing January 4 of that year,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":269585,"byte_end":269679,"line_start":148,"line_end":148,"column_start":1,"column_end":95}},{"value":"/   or equivalently, the first week containing four or more days in that year.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":269680,"byte_end":269760,"line_start":149,"line_end":149,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":269761,"byte_end":269764,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ * The year number in the week date may *not* correspond to the actual Gregorian year.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":269765,"byte_end":269854,"line_start":151,"line_end":151,"column_start":1,"column_end":90}},{"value":"/   For example, January 3, 2016 (Sunday) was on the last (53rd) week of 2015.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":269855,"byte_end":269935,"line_start":152,"line_end":152,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":269936,"byte_end":269939,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ Chrono's date types default to the ISO 8601 [calendar date](#calendar-date),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":269940,"byte_end":270020,"line_start":154,"line_end":154,"column_start":1,"column_end":81}},{"value":"/ but [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":270021,"byte_end":270097,"line_start":155,"line_end":155,"column_start":1,"column_end":77}},{"value":"/ [`Datelike::weekday`](../trait.Datelike.html#tymethod.weekday) methods","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":270098,"byte_end":270172,"line_start":156,"line_end":156,"column_start":1,"column_end":75}},{"value":"/ can be used to get the corresponding week date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":270173,"byte_end":270224,"line_start":157,"line_end":157,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":270225,"byte_end":270228,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ # Ordinal Date","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":270229,"byte_end":270247,"line_start":159,"line_end":159,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":270248,"byte_end":270251,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **ordinal date** is a pair of year number and day of the year (\"ordinal\").","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":270252,"byte_end":270343,"line_start":161,"line_end":161,"column_start":1,"column_end":92}},{"value":"/ The ordinal number ranges from 1 to 365 or 366 depending on the year.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":270344,"byte_end":270417,"line_start":162,"line_end":162,"column_start":1,"column_end":74}},{"value":"/ The year number is the same as that of the [calendar date](#calendar-date).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":270418,"byte_end":270497,"line_start":163,"line_end":163,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":270498,"byte_end":270501,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ This is currently the internal format of Chrono's date types.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":270502,"byte_end":270567,"line_start":165,"line_end":165,"column_start":1,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":1175},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":270908,"byte_end":270916,"line_start":174,"line_end":174,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::naive::date::MIN_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDate` (January 1, 262145 BCE).\n","sig":null,"attributes":[{"value":"/ The minimum possible `NaiveDate` (January 1, 262145 BCE).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":270767,"byte_end":270828,"line_start":172,"line_end":172,"column_start":1,"column_end":62}},{"value":"deprecated(since = \"0.4.20\", note = \"Use NaiveDate::MIN instead\")","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":270829,"byte_end":270897,"line_start":173,"line_end":173,"column_start":1,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":1176},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":271088,"byte_end":271096,"line_start":177,"line_end":177,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::naive::date::MAX_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDate` (December 31, 262143 CE).\n","sig":null,"attributes":[{"value":"/ The maximum possible `NaiveDate` (December 31, 262143 CE).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":270946,"byte_end":271008,"line_start":175,"line_end":175,"column_start":1,"column_end":63}},{"value":"deprecated(since = \"0.4.20\", note = \"Use NaiveDate::MAX instead\")","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":271009,"byte_end":271077,"line_start":176,"line_end":176,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1180},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":273459,"byte_end":273467,"line_start":243,"line_end":243,"column_start":12,"column_end":20},"name":"from_ymd","qualname":"<NaiveDate>::from_ymd","value":"fn from_ymd(i32, u32, u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](#calendar-date)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":272731,"byte_end":272799,"line_start":223,"line_end":223,"column_start":5,"column_end":73}},{"value":"/ (year, month and day).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":272804,"byte_end":272830,"line_start":224,"line_end":224,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":272835,"byte_end":272838,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":272843,"byte_end":272905,"line_start":226,"line_end":226,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":272910,"byte_end":272913,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":272918,"byte_end":272931,"line_start":228,"line_end":228,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":272936,"byte_end":272939,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":272944,"byte_end":272951,"line_start":230,"line_end":230,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":272956,"byte_end":273003,"line_start":231,"line_end":231,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":273008,"byte_end":273011,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 3, 14);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":273016,"byte_end":273061,"line_start":233,"line_end":233,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":273066,"byte_end":273097,"line_start":234,"line_end":234,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":273102,"byte_end":273131,"line_start":235,"line_end":235,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":273136,"byte_end":273164,"line_start":236,"line_end":236,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":273169,"byte_end":273216,"line_start":237,"line_end":237,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":273221,"byte_end":273263,"line_start":238,"line_end":238,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":273268,"byte_end":273308,"line_start":239,"line_end":239,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":273313,"byte_end":273355,"line_start":240,"line_end":240,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":273360,"byte_end":273435,"line_start":241,"line_end":241,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":273440,"byte_end":273447,"line_start":242,"line_end":242,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1181},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":274316,"byte_end":274328,"line_start":266,"line_end":266,"column_start":12,"column_end":24},"name":"from_ymd_opt","qualname":"<NaiveDate>::from_ymd_opt","value":"fn from_ymd_opt(i32, u32, u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](#calendar-date)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":273616,"byte_end":273684,"line_start":247,"line_end":247,"column_start":5,"column_end":73}},{"value":"/ (year, month and day).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":273689,"byte_end":273715,"line_start":248,"line_end":248,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":273720,"byte_end":273723,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":273728,"byte_end":273798,"line_start":250,"line_end":250,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":273803,"byte_end":273806,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":273811,"byte_end":273824,"line_start":252,"line_end":252,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":273829,"byte_end":273832,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":273837,"byte_end":273844,"line_start":254,"line_end":254,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":273849,"byte_end":273875,"line_start":255,"line_end":255,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":273880,"byte_end":273883,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ let from_ymd_opt = NaiveDate::from_ymd_opt;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":273888,"byte_end":273935,"line_start":257,"line_end":257,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":273940,"byte_end":273943,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ assert!(from_ymd_opt(2015, 3, 14).is_some());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":273948,"byte_end":273997,"line_start":259,"line_end":259,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(2015, 0, 14).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":274002,"byte_end":274051,"line_start":260,"line_end":260,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(2015, 2, 29).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":274056,"byte_end":274105,"line_start":261,"line_end":261,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(-4, 2, 29).is_some()); // 5 BCE is a leap year","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":274110,"byte_end":274181,"line_start":262,"line_end":262,"column_start":5,"column_end":76}},{"value":"/ assert!(from_ymd_opt(400000, 1, 1).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":274186,"byte_end":274236,"line_start":263,"line_end":263,"column_start":5,"column_end":55}},{"value":"/ assert!(from_ymd_opt(-400000, 1, 1).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":274241,"byte_end":274292,"line_start":264,"line_end":264,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":274297,"byte_end":274304,"line_start":265,"line_end":265,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":275220,"byte_end":275227,"line_start":291,"line_end":291,"column_start":12,"column_end":19},"name":"from_yo","qualname":"<NaiveDate>::from_yo","value":"fn from_yo(i32, u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":274507,"byte_end":274573,"line_start":271,"line_end":271,"column_start":5,"column_end":71}},{"value":"/ (year and day of the year).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":274578,"byte_end":274609,"line_start":272,"line_end":272,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":274614,"byte_end":274617,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid day of year.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":274622,"byte_end":274685,"line_start":274,"line_end":274,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":274690,"byte_end":274693,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":274698,"byte_end":274711,"line_start":276,"line_end":276,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":274716,"byte_end":274719,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":274724,"byte_end":274731,"line_start":278,"line_end":278,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":274736,"byte_end":274783,"line_start":279,"line_end":279,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":274788,"byte_end":274791,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_yo(2015, 73);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":274796,"byte_end":274837,"line_start":281,"line_end":281,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(d.ordinal(), 73);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":274842,"byte_end":274874,"line_start":282,"line_end":282,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":274879,"byte_end":274910,"line_start":283,"line_end":283,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":274915,"byte_end":274944,"line_start":284,"line_end":284,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":274949,"byte_end":274977,"line_start":285,"line_end":285,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":274982,"byte_end":275024,"line_start":286,"line_end":286,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":275029,"byte_end":275069,"line_start":287,"line_end":287,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":275074,"byte_end":275116,"line_start":288,"line_end":288,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":275121,"byte_end":275196,"line_start":289,"line_end":289,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":275201,"byte_end":275208,"line_start":290,"line_end":290,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1183},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":276095,"byte_end":276106,"line_start":315,"line_end":315,"column_start":12,"column_end":23},"name":"from_yo_opt","qualname":"<NaiveDate>::from_yo_opt","value":"fn from_yo_opt(i32, u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":275364,"byte_end":275430,"line_start":295,"line_end":295,"column_start":5,"column_end":71}},{"value":"/ (year and day of the year).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":275435,"byte_end":275466,"line_start":296,"line_end":296,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":275471,"byte_end":275474,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid day of year.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":275479,"byte_end":275550,"line_start":298,"line_end":298,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":275555,"byte_end":275558,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":275563,"byte_end":275576,"line_start":300,"line_end":300,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":275581,"byte_end":275584,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":275589,"byte_end":275596,"line_start":302,"line_end":302,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":275601,"byte_end":275627,"line_start":303,"line_end":303,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":275632,"byte_end":275635,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ let from_yo_opt = NaiveDate::from_yo_opt;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":275640,"byte_end":275685,"line_start":305,"line_end":305,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":275690,"byte_end":275693,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ assert!(from_yo_opt(2015, 100).is_some());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":275698,"byte_end":275744,"line_start":307,"line_end":307,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(2015, 0).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":275749,"byte_end":275793,"line_start":308,"line_end":308,"column_start":5,"column_end":49}},{"value":"/ assert!(from_yo_opt(2015, 365).is_some());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":275798,"byte_end":275844,"line_start":309,"line_end":309,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(2015, 366).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":275849,"byte_end":275895,"line_start":310,"line_end":310,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(-4, 366).is_some()); // 5 BCE is a leap year","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":275900,"byte_end":275968,"line_start":311,"line_end":311,"column_start":5,"column_end":73}},{"value":"/ assert!(from_yo_opt(400000, 1).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":275973,"byte_end":276019,"line_start":312,"line_end":312,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(-400000, 1).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":276024,"byte_end":276071,"line_start":313,"line_end":313,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":276076,"byte_end":276083,"line_start":314,"line_end":314,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1184},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":277110,"byte_end":277121,"line_start":341,"line_end":341,"column_start":12,"column_end":23},"name":"from_isoywd","qualname":"<NaiveDate>::from_isoywd","value":"fn from_isoywd(i32, u32, Weekday) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](#week-date)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":276272,"byte_end":276336,"line_start":320,"line_end":320,"column_start":5,"column_end":69}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":276341,"byte_end":276385,"line_start":321,"line_end":321,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":276390,"byte_end":276466,"line_start":322,"line_end":322,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":276471,"byte_end":276474,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":276479,"byte_end":276542,"line_start":324,"line_end":324,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":276547,"byte_end":276550,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":276555,"byte_end":276568,"line_start":326,"line_end":326,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":276573,"byte_end":276576,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":276581,"byte_end":276588,"line_start":328,"line_end":328,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":276593,"byte_end":276640,"line_start":329,"line_end":329,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":276645,"byte_end":276648,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 11, Weekday::Sat);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":276653,"byte_end":276712,"line_start":331,"line_end":331,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":276717,"byte_end":276759,"line_start":332,"line_end":332,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":276764,"byte_end":276804,"line_start":333,"line_end":333,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":276809,"byte_end":276851,"line_start":334,"line_end":334,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":276856,"byte_end":276887,"line_start":335,"line_end":335,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":276892,"byte_end":276921,"line_start":336,"line_end":336,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":276926,"byte_end":276954,"line_start":337,"line_end":337,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":276959,"byte_end":277006,"line_start":338,"line_end":338,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":277011,"byte_end":277086,"line_start":339,"line_end":339,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":277091,"byte_end":277098,"line_start":340,"line_end":340,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1185},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":279480,"byte_end":279495,"line_start":389,"line_end":389,"column_start":12,"column_end":27},"name":"from_isoywd_opt","qualname":"<NaiveDate>::from_isoywd_opt","value":"fn from_isoywd_opt(i32, u32, Weekday) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](#week-date)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":277283,"byte_end":277347,"line_start":345,"line_end":345,"column_start":5,"column_end":69}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":277352,"byte_end":277396,"line_start":346,"line_end":346,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":277401,"byte_end":277477,"line_start":347,"line_end":347,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":277482,"byte_end":277485,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":277490,"byte_end":277561,"line_start":349,"line_end":349,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":277566,"byte_end":277569,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":277574,"byte_end":277587,"line_start":351,"line_end":351,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":277592,"byte_end":277595,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":277600,"byte_end":277607,"line_start":353,"line_end":353,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":277612,"byte_end":277649,"line_start":354,"line_end":354,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":277654,"byte_end":277657,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":277662,"byte_end":277701,"line_start":356,"line_end":356,"column_start":5,"column_end":44}},{"value":"/ let from_isoywd_opt = NaiveDate::from_isoywd_opt;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":277706,"byte_end":277759,"line_start":357,"line_end":357,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":277764,"byte_end":277767,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 0, Weekday::Sun), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":277772,"byte_end":277833,"line_start":359,"line_end":359,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 10, Weekday::Sun), Some(from_ymd(2015, 3, 8)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":277838,"byte_end":277922,"line_start":360,"line_end":360,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 30, Weekday::Mon), Some(from_ymd(2015, 7, 20)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":277927,"byte_end":278012,"line_start":361,"line_end":361,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 60, Weekday::Mon), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":278017,"byte_end":278079,"line_start":362,"line_end":362,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":278084,"byte_end":278087,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_isoywd_opt(400000, 10, Weekday::Fri), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":278092,"byte_end":278156,"line_start":364,"line_end":364,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(from_isoywd_opt(-400000, 10, Weekday::Sat), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":278161,"byte_end":278226,"line_start":365,"line_end":365,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":278231,"byte_end":278238,"line_start":366,"line_end":366,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":278243,"byte_end":278246,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ The year number of ISO week date may differ from that of the calendar date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":278251,"byte_end":278330,"line_start":368,"line_end":368,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":278335,"byte_end":278338,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":278343,"byte_end":278350,"line_start":370,"line_end":370,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":278355,"byte_end":278394,"line_start":371,"line_end":371,"column_start":5,"column_end":44}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":278399,"byte_end":278440,"line_start":372,"line_end":372,"column_start":5,"column_end":46}},{"value":"/ # let from_isoywd_opt = NaiveDate::from_isoywd_opt;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":278445,"byte_end":278500,"line_start":373,"line_end":373,"column_start":5,"column_end":60}},{"value":"/ //           Mo Tu We Th Fr Sa Su","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":278505,"byte_end":278542,"line_start":374,"line_end":374,"column_start":5,"column_end":42}},{"value":"/ // 2014-W52  22 23 24 25 26 27 28    has 4+ days of new year,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":278547,"byte_end":278612,"line_start":375,"line_end":375,"column_start":5,"column_end":70}},{"value":"/ // 2015-W01  29 30 31  1  2  3  4 <- so this is the first week","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":278617,"byte_end":278683,"line_start":376,"line_end":376,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(from_isoywd_opt(2014, 52, Weekday::Sun), Some(from_ymd(2014, 12, 28)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":278688,"byte_end":278774,"line_start":377,"line_end":377,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_isoywd_opt(2014, 53, Weekday::Mon), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":278779,"byte_end":278841,"line_start":378,"line_end":378,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 1, Weekday::Mon), Some(from_ymd(2014, 12, 29)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":278846,"byte_end":278931,"line_start":379,"line_end":379,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":278936,"byte_end":278939,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ // 2015-W52  21 22 23 24 25 26 27    has 4+ days of old year,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":278944,"byte_end":279009,"line_start":381,"line_end":381,"column_start":5,"column_end":70}},{"value":"/ // 2015-W53  28 29 30 31  1  2  3 <- so this is the last week","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":279014,"byte_end":279079,"line_start":382,"line_end":382,"column_start":5,"column_end":70}},{"value":"/ // 2016-W01   4  5  6  7  8  9 10","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":279084,"byte_end":279121,"line_start":383,"line_end":383,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 52, Weekday::Sun), Some(from_ymd(2015, 12, 27)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":279126,"byte_end":279212,"line_start":384,"line_end":384,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 53, Weekday::Sun), Some(from_ymd(2016, 1, 3)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":279217,"byte_end":279301,"line_start":385,"line_end":385,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 54, Weekday::Mon), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":279306,"byte_end":279368,"line_start":386,"line_end":386,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from_isoywd_opt(2016, 1, Weekday::Mon), Some(from_ymd(2016, 1, 4)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":279373,"byte_end":279456,"line_start":387,"line_end":387,"column_start":5,"column_end":88}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":279461,"byte_end":279468,"line_start":388,"line_end":388,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1186},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":282434,"byte_end":282455,"line_start":464,"line_end":464,"column_start":12,"column_end":33},"name":"from_num_days_from_ce","qualname":"<NaiveDate>::from_num_days_from_ce","value":"fn from_num_days_from_ce(i32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":280707,"byte_end":280796,"line_start":420,"line_end":420,"column_start":5,"column_end":94}},{"value":"/ January 1, 1 being day 1.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":280801,"byte_end":280830,"line_start":421,"line_end":421,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":280835,"byte_end":280838,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ Panics if the date is out of range.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":280843,"byte_end":280882,"line_start":423,"line_end":423,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":280887,"byte_end":280890,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":280895,"byte_end":280908,"line_start":425,"line_end":425,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":280913,"byte_end":280916,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":280921,"byte_end":280928,"line_start":427,"line_end":427,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":280933,"byte_end":280980,"line_start":428,"line_end":428,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":280985,"byte_end":280988,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_num_days_from_ce(735671);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":280993,"byte_end":281046,"line_start":430,"line_end":430,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":281051,"byte_end":281126,"line_start":431,"line_end":431,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":281131,"byte_end":281162,"line_start":432,"line_end":432,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":281167,"byte_end":281196,"line_start":433,"line_end":433,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":281201,"byte_end":281229,"line_start":434,"line_end":434,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":281234,"byte_end":281281,"line_start":435,"line_end":435,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":281286,"byte_end":281328,"line_start":436,"line_end":436,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":281333,"byte_end":281373,"line_start":437,"line_end":437,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":281378,"byte_end":281420,"line_start":438,"line_end":438,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":281425,"byte_end":281432,"line_start":439,"line_end":439,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":281437,"byte_end":281440,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ While not directly supported by Chrono,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":281445,"byte_end":281488,"line_start":441,"line_end":441,"column_start":5,"column_end":48}},{"value":"/ it is easy to convert from the Julian day number","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":281493,"byte_end":281545,"line_start":442,"line_end":442,"column_start":5,"column_end":57}},{"value":"/ (January 1, 4713 BCE in the *Julian* calendar being Day 0)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":281550,"byte_end":281612,"line_start":443,"line_end":443,"column_start":5,"column_end":67}},{"value":"/ to Gregorian with this method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":281617,"byte_end":281651,"line_start":444,"line_end":444,"column_start":5,"column_end":39}},{"value":"/ (Note that this panics when `jd` is out of range.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":281656,"byte_end":281710,"line_start":445,"line_end":445,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":281715,"byte_end":281718,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":281723,"byte_end":281730,"line_start":447,"line_end":447,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":281735,"byte_end":281761,"line_start":448,"line_end":448,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":281766,"byte_end":281769,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ fn jd_to_date(jd: i32) -> NaiveDate {","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":281774,"byte_end":281815,"line_start":450,"line_end":450,"column_start":5,"column_end":46}},{"value":"/     // keep in mind that the Julian day number is 0-based","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":281820,"byte_end":281881,"line_start":451,"line_end":451,"column_start":5,"column_end":66}},{"value":"/     // while this method requires an 1-based number.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":281886,"byte_end":281942,"line_start":452,"line_end":452,"column_start":5,"column_end":61}},{"value":"/     NaiveDate::from_num_days_from_ce(jd - 1721425)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":281947,"byte_end":282001,"line_start":453,"line_end":453,"column_start":5,"column_end":59}},{"value":"/ }","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":282006,"byte_end":282011,"line_start":454,"line_end":454,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":282016,"byte_end":282019,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ // January 1, 4713 BCE in Julian = November 24, 4714 BCE in Gregorian","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":282024,"byte_end":282097,"line_start":456,"line_end":456,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(jd_to_date(0), NaiveDate::from_ymd(-4713, 11, 24));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":282102,"byte_end":282168,"line_start":457,"line_end":457,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":282173,"byte_end":282176,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(jd_to_date(1721426), NaiveDate::from_ymd(1, 1, 1));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":282181,"byte_end":282247,"line_start":459,"line_end":459,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(jd_to_date(2450000), NaiveDate::from_ymd(1995, 10, 9));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":282252,"byte_end":282322,"line_start":460,"line_end":460,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(jd_to_date(2451545), NaiveDate::from_ymd(2000, 1, 1));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":282327,"byte_end":282396,"line_start":461,"line_end":461,"column_start":5,"column_end":74}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":282401,"byte_end":282408,"line_start":462,"line_end":462,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":282413,"byte_end":282422,"line_start":463,"line_end":463,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1187},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":283402,"byte_end":283427,"line_start":488,"line_end":488,"column_start":12,"column_end":37},"name":"from_num_days_from_ce_opt","qualname":"<NaiveDate>::from_num_days_from_ce_opt","value":"fn from_num_days_from_ce_opt(i32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":282572,"byte_end":282661,"line_start":468,"line_end":468,"column_start":5,"column_end":94}},{"value":"/ January 1, 1 being day 1.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":282666,"byte_end":282695,"line_start":469,"line_end":469,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":282700,"byte_end":282703,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the date is out of range.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":282708,"byte_end":282755,"line_start":471,"line_end":471,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":282760,"byte_end":282763,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":282768,"byte_end":282781,"line_start":473,"line_end":473,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":282786,"byte_end":282789,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":282794,"byte_end":282801,"line_start":475,"line_end":475,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":282806,"byte_end":282832,"line_start":476,"line_end":476,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":282837,"byte_end":282840,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ let from_ndays_opt = NaiveDate::from_num_days_from_ce_opt;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":282845,"byte_end":282907,"line_start":478,"line_end":478,"column_start":5,"column_end":67}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":282912,"byte_end":282951,"line_start":479,"line_end":479,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":282956,"byte_end":282959,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_ndays_opt(730_000),      Some(from_ymd(1999, 9, 3)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":282964,"byte_end":283037,"line_start":481,"line_end":481,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(from_ndays_opt(1),            Some(from_ymd(1, 1, 1)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":283042,"byte_end":283112,"line_start":482,"line_end":482,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(from_ndays_opt(0),            Some(from_ymd(0, 12, 31)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":283117,"byte_end":283189,"line_start":483,"line_end":483,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(from_ndays_opt(-1),           Some(from_ymd(0, 12, 30)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":283194,"byte_end":283266,"line_start":484,"line_end":484,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(from_ndays_opt(100_000_000),  None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":283271,"byte_end":283322,"line_start":485,"line_end":485,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(from_ndays_opt(-100_000_000), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":283327,"byte_end":283378,"line_start":486,"line_end":486,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":283383,"byte_end":283390,"line_start":487,"line_end":487,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":285135,"byte_end":285156,"line_start":521,"line_end":521,"column_start":12,"column_end":33},"name":"from_weekday_of_month","qualname":"<NaiveDate>::from_weekday_of_month","value":"fn from_weekday_of_month(i32, u32, Weekday, u8) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\n since the beginning of the given month.  For instance, if you want the 2nd Friday of March\n 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":283853,"byte_end":283946,"line_start":496,"line_end":496,"column_start":5,"column_end":98}},{"value":"/ since the beginning of the given month.  For instance, if you want the 2nd Friday of March","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":283951,"byte_end":284045,"line_start":497,"line_end":497,"column_start":5,"column_end":99}},{"value":"/ 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":284050,"byte_end":284135,"line_start":498,"line_end":498,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":284140,"byte_end":284143,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":284148,"byte_end":284160,"line_start":500,"line_end":500,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":284165,"byte_end":284168,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ The resulting `NaiveDate` is guaranteed to be in `month`.  If `n` is larger than the number","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":284173,"byte_end":284268,"line_start":502,"line_end":502,"column_start":5,"column_end":100}},{"value":"/ of `weekday` in `month` (eg. the 6th Friday of March 2017) then this function will panic.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":284273,"byte_end":284366,"line_start":503,"line_end":503,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":284371,"byte_end":284374,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ `n` is 1-indexed.  Passing `n=0` will cause a panic.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":284379,"byte_end":284435,"line_start":505,"line_end":505,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":284440,"byte_end":284443,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":284448,"byte_end":284461,"line_start":507,"line_end":507,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":284466,"byte_end":284469,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":284474,"byte_end":284481,"line_start":509,"line_end":509,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":284486,"byte_end":284523,"line_start":510,"line_end":510,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":284528,"byte_end":284531,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ let from_weekday_of_month = NaiveDate::from_weekday_of_month;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":284536,"byte_end":284601,"line_start":512,"line_end":512,"column_start":5,"column_end":70}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":284606,"byte_end":284645,"line_start":513,"line_end":513,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":284650,"byte_end":284653,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Wed, 1), from_ymd(2018, 8, 1));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":284658,"byte_end":284744,"line_start":515,"line_end":515,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 1), from_ymd(2018, 8, 3));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":284749,"byte_end":284835,"line_start":516,"line_end":516,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Tue, 2), from_ymd(2018, 8, 14));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":284840,"byte_end":284927,"line_start":517,"line_end":517,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 4), from_ymd(2018, 8, 24));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":284932,"byte_end":285019,"line_start":518,"line_end":518,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 5), from_ymd(2018, 8, 31));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":285024,"byte_end":285111,"line_start":519,"line_end":519,"column_start":5,"column_end":92}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":285116,"byte_end":285123,"line_start":520,"line_end":520,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1189},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":286029,"byte_end":286054,"line_start":537,"line_end":537,"column_start":12,"column_end":37},"name":"from_weekday_of_month_opt","qualname":"<NaiveDate>::from_weekday_of_month_opt","value":"fn from_weekday_of_month_opt(i32, u32, Weekday, u8) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\n since the beginning of the given month.  For instance, if you want the 2nd Friday of March\n 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.  `n` is 1-indexed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":285329,"byte_end":285422,"line_start":525,"line_end":525,"column_start":5,"column_end":98}},{"value":"/ since the beginning of the given month.  For instance, if you want the 2nd Friday of March","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":285427,"byte_end":285521,"line_start":526,"line_end":526,"column_start":5,"column_end":99}},{"value":"/ 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.  `n` is 1-indexed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":285526,"byte_end":285630,"line_start":527,"line_end":527,"column_start":5,"column_end":109}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":285635,"byte_end":285638,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":285643,"byte_end":285650,"line_start":529,"line_end":529,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":285655,"byte_end":285692,"line_start":530,"line_end":530,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(NaiveDate::from_weekday_of_month_opt(2017, 3, Weekday::Fri, 2),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":285697,"byte_end":285775,"line_start":531,"line_end":531,"column_start":5,"column_end":83}},{"value":"/            NaiveDate::from_ymd_opt(2017, 3, 10))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":285780,"byte_end":285832,"line_start":532,"line_end":532,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":285837,"byte_end":285844,"line_start":533,"line_end":533,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":285849,"byte_end":285852,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if `n` out-of-range; ie. if `n` is larger than the number of `weekday` in","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":285857,"byte_end":285949,"line_start":535,"line_end":535,"column_start":5,"column_end":97}},{"value":"/ `month` (eg. the 6th Friday of March 2017), or if `n == 0`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":285954,"byte_end":286017,"line_start":536,"line_end":536,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":288066,"byte_end":288080,"line_start":594,"line_end":594,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDate>::parse_from_str","value":"fn parse_from_str<'_, '_>(&'_ str, &'_ str) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDate`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDate`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":286505,"byte_end":286588,"line_start":552,"line_end":552,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":286593,"byte_end":286663,"line_start":553,"line_end":553,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":286668,"byte_end":286706,"line_start":554,"line_end":554,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":286711,"byte_end":286714,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":286719,"byte_end":286732,"line_start":556,"line_end":556,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":286737,"byte_end":286740,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":286745,"byte_end":286752,"line_start":558,"line_end":558,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":286757,"byte_end":286783,"line_start":559,"line_end":559,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":286788,"byte_end":286791,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":286796,"byte_end":286847,"line_start":561,"line_end":561,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":286852,"byte_end":286855,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"2015-09-05\", \"%Y-%m-%d\"),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":286860,"byte_end":286916,"line_start":563,"line_end":563,"column_start":5,"column_end":61}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":286921,"byte_end":286973,"line_start":564,"line_end":564,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(parse_from_str(\"5sep2015\", \"%d%b%Y\"),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":286978,"byte_end":287030,"line_start":565,"line_end":565,"column_start":5,"column_end":57}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287035,"byte_end":287087,"line_start":566,"line_end":566,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287092,"byte_end":287099,"line_start":567,"line_end":567,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287104,"byte_end":287107,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ Time and offset is ignored for the purpose of parsing.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287112,"byte_end":287170,"line_start":569,"line_end":569,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287175,"byte_end":287178,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287183,"byte_end":287190,"line_start":571,"line_end":571,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287195,"byte_end":287223,"line_start":572,"line_end":572,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287228,"byte_end":287281,"line_start":573,"line_end":573,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287286,"byte_end":287367,"line_start":574,"line_end":574,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2014, 5, 17)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287372,"byte_end":287425,"line_start":575,"line_end":575,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287430,"byte_end":287437,"line_start":576,"line_end":576,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287442,"byte_end":287445,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ Out-of-bound dates or insufficient fields are errors.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287450,"byte_end":287507,"line_start":578,"line_end":578,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287512,"byte_end":287515,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287520,"byte_end":287527,"line_start":580,"line_end":580,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287532,"byte_end":287560,"line_start":581,"line_end":581,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287565,"byte_end":287618,"line_start":582,"line_end":582,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"2015/9\", \"%Y/%m\").is_err());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287623,"byte_end":287679,"line_start":583,"line_end":583,"column_start":5,"column_end":61}},{"value":"/ assert!(parse_from_str(\"2015/9/31\", \"%Y/%m/%d\").is_err());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287684,"byte_end":287746,"line_start":584,"line_end":584,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287751,"byte_end":287758,"line_start":585,"line_end":585,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287763,"byte_end":287766,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287771,"byte_end":287853,"line_start":587,"line_end":587,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287858,"byte_end":287861,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287866,"byte_end":287873,"line_start":589,"line_end":589,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287878,"byte_end":287906,"line_start":590,"line_end":590,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287911,"byte_end":287964,"line_start":591,"line_end":591,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"Sat, 09 Aug 2013\", \"%a, %d %b %Y\").is_err());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":287969,"byte_end":288042,"line_start":592,"line_end":592,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":288047,"byte_end":288054,"line_start":593,"line_end":593,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1191},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":288908,"byte_end":288926,"line_start":617,"line_end":617,"column_start":12,"column_end":30},"name":"checked_add_months","qualname":"<NaiveDate>::checked_add_months","value":"fn checked_add_months(Self, Months) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Add a duration in [`Months`] to the date","sig":null,"attributes":[{"value":"/ Add a duration in [`Months`] to the date","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":288268,"byte_end":288312,"line_start":600,"line_end":600,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":288317,"byte_end":288320,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ If the day would be out of range for the resulting month, use the last day for that month.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":288325,"byte_end":288419,"line_start":602,"line_end":602,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":288424,"byte_end":288427,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the resulting date would be out of range.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":288432,"byte_end":288495,"line_start":604,"line_end":604,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":288500,"byte_end":288503,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":288508,"byte_end":288515,"line_start":606,"line_end":606,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{NaiveDate, Months};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":288520,"byte_end":288558,"line_start":607,"line_end":607,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":288563,"byte_end":288578,"line_start":608,"line_end":608,"column_start":5,"column_end":20}},{"value":"/     NaiveDate::from_ymd(2022, 2, 20).checked_add_months(Months::new(6)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":288583,"byte_end":288659,"line_start":609,"line_end":609,"column_start":5,"column_end":81}},{"value":"/     Some(NaiveDate::from_ymd(2022, 8, 20))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":288664,"byte_end":288710,"line_start":610,"line_end":610,"column_start":5,"column_end":51}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":288715,"byte_end":288721,"line_start":611,"line_end":611,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":288726,"byte_end":288741,"line_start":612,"line_end":612,"column_start":5,"column_end":20}},{"value":"/     NaiveDate::from_ymd(2022, 7, 31).checked_add_months(Months::new(2)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":288746,"byte_end":288822,"line_start":613,"line_end":613,"column_start":5,"column_end":81}},{"value":"/     Some(NaiveDate::from_ymd(2022, 9, 30))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":288827,"byte_end":288873,"line_start":614,"line_end":614,"column_start":5,"column_end":51}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":288878,"byte_end":288884,"line_start":615,"line_end":615,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":288889,"byte_end":288896,"line_start":616,"line_end":616,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":289673,"byte_end":289691,"line_start":641,"line_end":641,"column_start":12,"column_end":30},"name":"checked_sub_months","qualname":"<NaiveDate>::checked_sub_months","value":"fn checked_sub_months(Self, Months) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Subtract a duration in [`Months`] from the date","sig":null,"attributes":[{"value":"/ Subtract a duration in [`Months`] from the date","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":289189,"byte_end":289240,"line_start":628,"line_end":628,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":289245,"byte_end":289248,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ If the day would be out of range for the resulting month, use the last day for that month.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":289253,"byte_end":289347,"line_start":630,"line_end":630,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":289352,"byte_end":289355,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the resulting date would be out of range.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":289360,"byte_end":289423,"line_start":632,"line_end":632,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":289428,"byte_end":289431,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":289436,"byte_end":289443,"line_start":634,"line_end":634,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{NaiveDate, Months};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":289448,"byte_end":289486,"line_start":635,"line_end":635,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":289491,"byte_end":289506,"line_start":636,"line_end":636,"column_start":5,"column_end":20}},{"value":"/     NaiveDate::from_ymd(2022, 2, 20).checked_sub_months(Months::new(6)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":289511,"byte_end":289587,"line_start":637,"line_end":637,"column_start":5,"column_end":81}},{"value":"/     Some(NaiveDate::from_ymd(2021, 8, 20))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":289592,"byte_end":289638,"line_start":638,"line_end":638,"column_start":5,"column_end":51}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":289643,"byte_end":289649,"line_start":639,"line_end":639,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":289654,"byte_end":289661,"line_start":640,"line_end":640,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1194},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":291735,"byte_end":291743,"line_start":710,"line_end":710,"column_start":12,"column_end":20},"name":"and_time","qualname":"<NaiveDate>::and_time","value":"fn and_time<'_>(&'_ Self, NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":291276,"byte_end":291352,"line_start":695,"line_end":695,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":291357,"byte_end":291360,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":291365,"byte_end":291378,"line_start":697,"line_end":697,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":291383,"byte_end":291386,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":291391,"byte_end":291398,"line_start":699,"line_end":699,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveTime, NaiveDateTime};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":291403,"byte_end":291457,"line_start":700,"line_end":700,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":291462,"byte_end":291465,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":291470,"byte_end":291514,"line_start":702,"line_end":702,"column_start":5,"column_end":49}},{"value":"/ let t = NaiveTime::from_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":291519,"byte_end":291574,"line_start":703,"line_end":703,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":291579,"byte_end":291582,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_time(t);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":291587,"byte_end":291629,"line_start":705,"line_end":705,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(dt.date(), d);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":291634,"byte_end":291663,"line_start":706,"line_end":706,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dt.time(), t);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":291668,"byte_end":291697,"line_start":707,"line_end":707,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":291702,"byte_end":291709,"line_start":708,"line_end":708,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":291714,"byte_end":291723,"line_start":709,"line_end":709,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1195},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":292557,"byte_end":292564,"line_start":734,"line_end":734,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<NaiveDate>::and_hms","value":"fn and_hms<'_>(&'_ Self, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":291838,"byte_end":291917,"line_start":714,"line_end":714,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":291922,"byte_end":291925,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":291930,"byte_end":292013,"line_start":716,"line_end":716,"column_start":5,"column_end":88}},{"value":"/ use `NaiveDate::and_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":292018,"byte_end":292092,"line_start":717,"line_end":717,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":292097,"byte_end":292100,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":292105,"byte_end":292154,"line_start":719,"line_end":719,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":292159,"byte_end":292162,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":292167,"byte_end":292180,"line_start":721,"line_end":721,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":292185,"byte_end":292188,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":292193,"byte_end":292200,"line_start":723,"line_end":723,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":292205,"byte_end":292277,"line_start":724,"line_end":724,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":292282,"byte_end":292285,"line_start":725,"line_end":725,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":292290,"byte_end":292334,"line_start":726,"line_end":726,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":292339,"byte_end":292342,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":292347,"byte_end":292397,"line_start":728,"line_end":728,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":292402,"byte_end":292434,"line_start":729,"line_end":729,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":292439,"byte_end":292482,"line_start":730,"line_end":730,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":292487,"byte_end":292519,"line_start":731,"line_end":731,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":292524,"byte_end":292531,"line_start":732,"line_end":732,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":292536,"byte_end":292545,"line_start":733,"line_end":733,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1196},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":293448,"byte_end":293459,"line_start":757,"line_end":757,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<NaiveDate>::and_hms_opt","value":"fn and_hms_opt<'_>(&'_ Self, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":292697,"byte_end":292776,"line_start":738,"line_end":738,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":292781,"byte_end":292784,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":292789,"byte_end":292872,"line_start":740,"line_end":740,"column_start":5,"column_end":88}},{"value":"/ use `NaiveDate::and_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":292877,"byte_end":292955,"line_start":741,"line_end":741,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":292960,"byte_end":292963,"line_start":742,"line_end":742,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":292968,"byte_end":293025,"line_start":743,"line_end":743,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":293030,"byte_end":293033,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":293038,"byte_end":293051,"line_start":745,"line_end":745,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":293056,"byte_end":293059,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":293064,"byte_end":293071,"line_start":747,"line_end":747,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":293076,"byte_end":293102,"line_start":748,"line_end":748,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":293107,"byte_end":293110,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":293115,"byte_end":293159,"line_start":750,"line_end":750,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_opt(12, 34, 56).is_some());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":293164,"byte_end":293213,"line_start":751,"line_end":751,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(12, 34, 60).is_none()); // use `and_hms_milli_opt` instead","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":293218,"byte_end":293302,"line_start":752,"line_end":752,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_opt(12, 60, 56).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":293307,"byte_end":293356,"line_start":753,"line_end":753,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(24, 34, 56).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":293361,"byte_end":293410,"line_start":754,"line_end":754,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":293415,"byte_end":293422,"line_start":755,"line_end":755,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":293427,"byte_end":293436,"line_start":756,"line_end":756,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1198},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":294396,"byte_end":294409,"line_start":782,"line_end":782,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<NaiveDate>::and_hms_milli","value":"fn and_hms_milli<'_>(&'_ Self, u32, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":293616,"byte_end":293708,"line_start":761,"line_end":761,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":293713,"byte_end":293716,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":293721,"byte_end":293762,"line_start":763,"line_end":763,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":293767,"byte_end":293857,"line_start":764,"line_end":764,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":293862,"byte_end":293865,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":293870,"byte_end":293932,"line_start":766,"line_end":766,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":293937,"byte_end":293940,"line_start":767,"line_end":767,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":293945,"byte_end":293958,"line_start":768,"line_end":768,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":293963,"byte_end":293966,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":293971,"byte_end":293978,"line_start":770,"line_end":770,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":293983,"byte_end":294055,"line_start":771,"line_end":771,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":294060,"byte_end":294063,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":294068,"byte_end":294112,"line_start":773,"line_end":773,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":294117,"byte_end":294120,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":294125,"byte_end":294186,"line_start":775,"line_end":775,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":294191,"byte_end":294223,"line_start":776,"line_end":776,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":294228,"byte_end":294271,"line_start":777,"line_end":777,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":294276,"byte_end":294308,"line_start":778,"line_end":778,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_000_000);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":294313,"byte_end":294358,"line_start":779,"line_end":779,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":294363,"byte_end":294370,"line_start":780,"line_end":780,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":294375,"byte_end":294384,"line_start":781,"line_end":781,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1199},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":295480,"byte_end":295497,"line_start":807,"line_end":807,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<NaiveDate>::and_hms_milli_opt","value":"fn and_hms_milli_opt<'_>(&'_ Self, u32, u32, u32, u32)\n-> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":294567,"byte_end":294659,"line_start":786,"line_end":786,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":294664,"byte_end":294667,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":294672,"byte_end":294713,"line_start":788,"line_end":788,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":294718,"byte_end":294808,"line_start":789,"line_end":789,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":294813,"byte_end":294816,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":294821,"byte_end":294891,"line_start":791,"line_end":791,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":294896,"byte_end":294899,"line_start":792,"line_end":792,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":294904,"byte_end":294917,"line_start":793,"line_end":793,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":294922,"byte_end":294925,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":294930,"byte_end":294937,"line_start":795,"line_end":795,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":294942,"byte_end":294968,"line_start":796,"line_end":796,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":294973,"byte_end":294976,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":294981,"byte_end":295025,"line_start":798,"line_end":798,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 56,   789).is_some());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":295030,"byte_end":295092,"line_start":799,"line_end":799,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 1_789).is_some()); // leap second","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":295097,"byte_end":295174,"line_start":800,"line_end":800,"column_start":5,"column_end":82}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 2_789).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":295179,"byte_end":295241,"line_start":801,"line_end":801,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 60,   789).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":295246,"byte_end":295308,"line_start":802,"line_end":802,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 60, 56,   789).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":295313,"byte_end":295375,"line_start":803,"line_end":803,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(24, 34, 56,   789).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":295380,"byte_end":295442,"line_start":804,"line_end":804,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":295447,"byte_end":295454,"line_start":805,"line_end":805,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":295459,"byte_end":295468,"line_start":806,"line_end":806,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1201},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":296514,"byte_end":296527,"line_start":838,"line_end":838,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<NaiveDate>::and_hms_micro","value":"fn and_hms_micro<'_>(&'_ Self, u32, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":295726,"byte_end":295818,"line_start":817,"line_end":817,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":295823,"byte_end":295826,"line_start":818,"line_end":818,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":295831,"byte_end":295876,"line_start":819,"line_end":819,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":295881,"byte_end":295971,"line_start":820,"line_end":820,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":295976,"byte_end":295979,"line_start":821,"line_end":821,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":295984,"byte_end":296046,"line_start":822,"line_end":822,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":296051,"byte_end":296054,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":296059,"byte_end":296072,"line_start":824,"line_end":824,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":296077,"byte_end":296080,"line_start":825,"line_end":825,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":296085,"byte_end":296092,"line_start":826,"line_end":826,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":296097,"byte_end":296169,"line_start":827,"line_end":827,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":296174,"byte_end":296177,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":296182,"byte_end":296226,"line_start":829,"line_end":829,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":296231,"byte_end":296234,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_micro(12, 34, 56, 789_012);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":296239,"byte_end":296304,"line_start":831,"line_end":831,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":296309,"byte_end":296341,"line_start":832,"line_end":832,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":296346,"byte_end":296389,"line_start":833,"line_end":833,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":296394,"byte_end":296426,"line_start":834,"line_end":834,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_000);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":296431,"byte_end":296476,"line_start":835,"line_end":835,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":296481,"byte_end":296488,"line_start":836,"line_end":836,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":296493,"byte_end":296502,"line_start":837,"line_end":837,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1202},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":297626,"byte_end":297643,"line_start":863,"line_end":863,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<NaiveDate>::and_hms_micro_opt","value":"fn and_hms_micro_opt<'_>(&'_ Self, u32, u32, u32, u32)\n-> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":296685,"byte_end":296777,"line_start":842,"line_end":842,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":296782,"byte_end":296785,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":296790,"byte_end":296835,"line_start":844,"line_end":844,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":296840,"byte_end":296930,"line_start":845,"line_end":845,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":296935,"byte_end":296938,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":296943,"byte_end":297013,"line_start":847,"line_end":847,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":297018,"byte_end":297021,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":297026,"byte_end":297039,"line_start":849,"line_end":849,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":297044,"byte_end":297047,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":297052,"byte_end":297059,"line_start":851,"line_end":851,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":297064,"byte_end":297090,"line_start":852,"line_end":852,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":297095,"byte_end":297098,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":297103,"byte_end":297147,"line_start":854,"line_end":854,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 56,   789_012).is_some());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":297152,"byte_end":297218,"line_start":855,"line_end":855,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 1_789_012).is_some()); // leap second","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":297223,"byte_end":297304,"line_start":856,"line_end":856,"column_start":5,"column_end":86}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 2_789_012).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":297309,"byte_end":297375,"line_start":857,"line_end":857,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 60,   789_012).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":297380,"byte_end":297446,"line_start":858,"line_end":858,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 60, 56,   789_012).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":297451,"byte_end":297517,"line_start":859,"line_end":859,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(24, 34, 56,   789_012).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":297522,"byte_end":297588,"line_start":860,"line_end":860,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":297593,"byte_end":297600,"line_start":861,"line_end":861,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":297605,"byte_end":297614,"line_start":862,"line_end":862,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1204},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":298664,"byte_end":298676,"line_start":894,"line_end":894,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<NaiveDate>::and_hms_nano","value":"fn and_hms_nano<'_>(&'_ Self, u32, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":297872,"byte_end":297963,"line_start":873,"line_end":873,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":297968,"byte_end":297971,"line_start":874,"line_end":874,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":297976,"byte_end":298024,"line_start":875,"line_end":875,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":298029,"byte_end":298119,"line_start":876,"line_end":876,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":298124,"byte_end":298127,"line_start":877,"line_end":877,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":298132,"byte_end":298193,"line_start":878,"line_end":878,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":298198,"byte_end":298201,"line_start":879,"line_end":879,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":298206,"byte_end":298219,"line_start":880,"line_end":880,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":298224,"byte_end":298227,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":298232,"byte_end":298239,"line_start":882,"line_end":882,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":298244,"byte_end":298316,"line_start":883,"line_end":883,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":298321,"byte_end":298324,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":298329,"byte_end":298373,"line_start":885,"line_end":885,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":298378,"byte_end":298381,"line_start":886,"line_end":886,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_nano(12, 34, 56, 789_012_345);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":298386,"byte_end":298454,"line_start":887,"line_end":887,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":298459,"byte_end":298491,"line_start":888,"line_end":888,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":298496,"byte_end":298539,"line_start":889,"line_end":889,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":298544,"byte_end":298576,"line_start":890,"line_end":890,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_345);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":298581,"byte_end":298626,"line_start":891,"line_end":891,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":298631,"byte_end":298638,"line_start":892,"line_end":892,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":298643,"byte_end":298652,"line_start":893,"line_end":893,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1205},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":299791,"byte_end":299807,"line_start":919,"line_end":919,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<NaiveDate>::and_hms_nano_opt","value":"fn and_hms_nano_opt<'_>(&'_ Self, u32, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":298831,"byte_end":298922,"line_start":898,"line_end":898,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":298927,"byte_end":298930,"line_start":899,"line_end":899,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":298935,"byte_end":298983,"line_start":900,"line_end":900,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":298988,"byte_end":299078,"line_start":901,"line_end":901,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":299083,"byte_end":299086,"line_start":902,"line_end":902,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":299091,"byte_end":299160,"line_start":903,"line_end":903,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":299165,"byte_end":299168,"line_start":904,"line_end":904,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":299173,"byte_end":299186,"line_start":905,"line_end":905,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":299191,"byte_end":299194,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":299199,"byte_end":299206,"line_start":907,"line_end":907,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":299211,"byte_end":299237,"line_start":908,"line_end":908,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":299242,"byte_end":299245,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":299250,"byte_end":299294,"line_start":910,"line_end":910,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 56,   789_012_345).is_some());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":299299,"byte_end":299368,"line_start":911,"line_end":911,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 1_789_012_345).is_some()); // leap second","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":299373,"byte_end":299457,"line_start":912,"line_end":912,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 2_789_012_345).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":299462,"byte_end":299531,"line_start":913,"line_end":913,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 60,   789_012_345).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":299536,"byte_end":299605,"line_start":914,"line_end":914,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 60, 56,   789_012_345).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":299610,"byte_end":299679,"line_start":915,"line_end":915,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(24, 34, 56,   789_012_345).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":299684,"byte_end":299753,"line_start":916,"line_end":916,"column_start":5,"column_end":74}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":299758,"byte_end":299765,"line_start":917,"line_end":917,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":299770,"byte_end":299779,"line_start":918,"line_end":918,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1211},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301497,"byte_end":301501,"line_start":976,"line_end":976,"column_start":12,"column_end":16},"name":"succ","qualname":"<NaiveDate>::succ","value":"fn succ<'_>(&'_ Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":300967,"byte_end":301022,"line_start":962,"line_end":962,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301027,"byte_end":301030,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301035,"byte_end":301089,"line_start":964,"line_end":964,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301094,"byte_end":301097,"line_start":965,"line_end":965,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301102,"byte_end":301115,"line_start":966,"line_end":966,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301120,"byte_end":301123,"line_start":967,"line_end":967,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301128,"byte_end":301135,"line_start":968,"line_end":968,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301140,"byte_end":301166,"line_start":969,"line_end":969,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301171,"byte_end":301174,"line_start":970,"line_end":970,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6,  3).succ(), NaiveDate::from_ymd(2015, 6, 4));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301179,"byte_end":301269,"line_start":971,"line_end":971,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6, 30).succ(), NaiveDate::from_ymd(2015, 7, 1));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301274,"byte_end":301364,"line_start":972,"line_end":972,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 12, 31).succ(), NaiveDate::from_ymd(2016, 1, 1));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301369,"byte_end":301459,"line_start":973,"line_end":973,"column_start":5,"column_end":95}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301464,"byte_end":301471,"line_start":974,"line_end":974,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301476,"byte_end":301485,"line_start":975,"line_end":975,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1212},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":302010,"byte_end":302018,"line_start":994,"line_end":994,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<NaiveDate>::succ_opt","value":"fn succ_opt<'_>(&'_ Self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301582,"byte_end":301637,"line_start":980,"line_end":980,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301642,"byte_end":301645,"line_start":981,"line_end":981,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301650,"byte_end":301712,"line_start":982,"line_end":982,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301717,"byte_end":301720,"line_start":983,"line_end":983,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301725,"byte_end":301738,"line_start":984,"line_end":984,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301743,"byte_end":301746,"line_start":985,"line_end":985,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301751,"byte_end":301758,"line_start":986,"line_end":986,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301763,"byte_end":301789,"line_start":987,"line_end":987,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301794,"byte_end":301797,"line_start":988,"line_end":988,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).succ_opt(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301802,"byte_end":301860,"line_start":989,"line_end":989,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 4)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301865,"byte_end":301919,"line_start":990,"line_end":990,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(NaiveDate::MAX.succ_opt(), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301924,"byte_end":301972,"line_start":991,"line_end":991,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301977,"byte_end":301984,"line_start":992,"line_end":992,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":301989,"byte_end":301998,"line_start":993,"line_end":993,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1214},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":302693,"byte_end":302697,"line_start":1012,"line_end":1012,"column_start":12,"column_end":16},"name":"pred","qualname":"<NaiveDate>::pred","value":"fn pred<'_>(&'_ Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":302158,"byte_end":302217,"line_start":998,"line_end":998,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":302222,"byte_end":302225,"line_start":999,"line_end":999,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":302230,"byte_end":302285,"line_start":1000,"line_end":1000,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":302290,"byte_end":302293,"line_start":1001,"line_end":1001,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":302298,"byte_end":302311,"line_start":1002,"line_end":1002,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":302316,"byte_end":302319,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":302324,"byte_end":302331,"line_start":1004,"line_end":1004,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":302336,"byte_end":302362,"line_start":1005,"line_end":1005,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":302367,"byte_end":302370,"line_start":1006,"line_end":1006,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred(), NaiveDate::from_ymd(2015,  6,  2));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":302375,"byte_end":302465,"line_start":1007,"line_end":1007,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 1).pred(), NaiveDate::from_ymd(2015,  5, 31));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":302470,"byte_end":302560,"line_start":1008,"line_end":1008,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 1, 1).pred(), NaiveDate::from_ymd(2014, 12, 31));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":302565,"byte_end":302655,"line_start":1009,"line_end":1009,"column_start":5,"column_end":95}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":302660,"byte_end":302667,"line_start":1010,"line_end":1010,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":302672,"byte_end":302681,"line_start":1011,"line_end":1011,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1215},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":303211,"byte_end":303219,"line_start":1030,"line_end":1030,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<NaiveDate>::pred_opt","value":"fn pred_opt<'_>(&'_ Self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":302778,"byte_end":302837,"line_start":1016,"line_end":1016,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":302842,"byte_end":302845,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":302850,"byte_end":302913,"line_start":1018,"line_end":1018,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":302918,"byte_end":302921,"line_start":1019,"line_end":1019,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":302926,"byte_end":302939,"line_start":1020,"line_end":1020,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":302944,"byte_end":302947,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":302952,"byte_end":302959,"line_start":1022,"line_end":1022,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":302964,"byte_end":302990,"line_start":1023,"line_end":1023,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":302995,"byte_end":302998,"line_start":1024,"line_end":1024,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred_opt(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":303003,"byte_end":303061,"line_start":1025,"line_end":1025,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 2)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":303066,"byte_end":303120,"line_start":1026,"line_end":1026,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(NaiveDate::MIN.pred_opt(), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":303125,"byte_end":303173,"line_start":1027,"line_end":1027,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":303178,"byte_end":303185,"line_start":1028,"line_end":1028,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":303190,"byte_end":303199,"line_start":1029,"line_end":1029,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1217},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":304143,"byte_end":304161,"line_start":1052,"line_end":1052,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDate>::checked_add_signed","value":"fn checked_add_signed(Self, OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Adds the `days` part of given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds the `days` part of given `Duration` to the current date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":303361,"byte_end":303426,"line_start":1034,"line_end":1034,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":303431,"byte_end":303434,"line_start":1035,"line_end":1035,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":303439,"byte_end":303490,"line_start":1036,"line_end":1036,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":303495,"byte_end":303498,"line_start":1037,"line_end":1037,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":303503,"byte_end":303516,"line_start":1038,"line_end":1038,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":303521,"byte_end":303524,"line_start":1039,"line_end":1039,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":303529,"byte_end":303536,"line_start":1040,"line_end":1040,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":303541,"byte_end":303579,"line_start":1041,"line_end":1041,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":303584,"byte_end":303587,"line_start":1042,"line_end":1042,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":303592,"byte_end":303636,"line_start":1043,"line_end":1043,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(40)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":303641,"byte_end":303697,"line_start":1044,"line_end":1044,"column_start":5,"column_end":61}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":303702,"byte_end":303758,"line_start":1045,"line_end":1045,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(-40)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":303763,"byte_end":303820,"line_start":1046,"line_end":1046,"column_start":5,"column_end":62}},{"value":"/            Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":303825,"byte_end":303880,"line_start":1047,"line_end":1047,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":303885,"byte_end":303959,"line_start":1048,"line_end":1048,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(-1_000_000_000)), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":303964,"byte_end":304039,"line_start":1049,"line_end":1049,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(NaiveDate::MAX.checked_add_signed(Duration::days(1)), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":304044,"byte_end":304119,"line_start":1050,"line_end":1050,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":304124,"byte_end":304131,"line_start":1051,"line_end":1051,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1218},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":305626,"byte_end":305644,"line_start":1083,"line_end":1083,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDate>::checked_sub_signed","value":"fn checked_sub_signed(Self, OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts the `days` part of given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts the `days` part of given `Duration` from the current date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":304837,"byte_end":304909,"line_start":1065,"line_end":1065,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":304914,"byte_end":304917,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":304922,"byte_end":304973,"line_start":1067,"line_end":1067,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":304978,"byte_end":304981,"line_start":1068,"line_end":1068,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":304986,"byte_end":304999,"line_start":1069,"line_end":1069,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":305004,"byte_end":305007,"line_start":1070,"line_end":1070,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":305012,"byte_end":305019,"line_start":1071,"line_end":1071,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":305024,"byte_end":305062,"line_start":1072,"line_end":1072,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":305067,"byte_end":305070,"line_start":1073,"line_end":1073,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":305075,"byte_end":305119,"line_start":1074,"line_end":1074,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(40)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":305124,"byte_end":305180,"line_start":1075,"line_end":1075,"column_start":5,"column_end":61}},{"value":"/            Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":305185,"byte_end":305240,"line_start":1076,"line_end":1076,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(-40)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":305245,"byte_end":305302,"line_start":1077,"line_end":1077,"column_start":5,"column_end":62}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":305307,"byte_end":305363,"line_start":1078,"line_end":1078,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":305368,"byte_end":305442,"line_start":1079,"line_end":1079,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(-1_000_000_000)), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":305447,"byte_end":305522,"line_start":1080,"line_end":1080,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(NaiveDate::MIN.checked_sub_signed(Duration::days(1)), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":305527,"byte_end":305602,"line_start":1081,"line_end":1081,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":305607,"byte_end":305614,"line_start":1082,"line_end":1082,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1219},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":307433,"byte_end":307454,"line_start":1118,"line_end":1118,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDate>::signed_duration_since","value":"fn signed_duration_since(Self, NaiveDate) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDate` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveDate` from the current date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":306320,"byte_end":306376,"line_start":1096,"line_end":1096,"column_start":5,"column_end":61}},{"value":"/ Returns a `Duration` of integral numbers.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":306381,"byte_end":306426,"line_start":1097,"line_end":1097,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":306431,"byte_end":306434,"line_start":1098,"line_end":1098,"column_start":5,"column_end":8}},{"value":"/ This does not overflow or underflow at all,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":306439,"byte_end":306486,"line_start":1099,"line_end":1099,"column_start":5,"column_end":52}},{"value":"/ as all possible output fits in the range of `Duration`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":306491,"byte_end":306550,"line_start":1100,"line_end":1100,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":306555,"byte_end":306558,"line_start":1101,"line_end":1101,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":306563,"byte_end":306576,"line_start":1102,"line_end":1102,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":306581,"byte_end":306584,"line_start":1103,"line_end":1103,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":306589,"byte_end":306596,"line_start":1104,"line_end":1104,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":306601,"byte_end":306639,"line_start":1105,"line_end":1105,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":306644,"byte_end":306647,"line_start":1106,"line_end":1106,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":306652,"byte_end":306691,"line_start":1107,"line_end":1107,"column_start":5,"column_end":44}},{"value":"/ let since = NaiveDate::signed_duration_since;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":306696,"byte_end":306745,"line_start":1108,"line_end":1108,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":306750,"byte_end":306753,"line_start":1109,"line_end":1109,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 1)), Duration::zero());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":306758,"byte_end":306842,"line_start":1110,"line_end":1110,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 12, 31)), Duration::days(1));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":306847,"byte_end":306934,"line_start":1111,"line_end":1111,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 2)), Duration::days(-1));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":306939,"byte_end":307025,"line_start":1112,"line_end":1112,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 9, 23)), Duration::days(100));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":307030,"byte_end":307118,"line_start":1113,"line_end":1113,"column_start":5,"column_end":93}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 1, 1)), Duration::days(365));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":307123,"byte_end":307210,"line_start":1114,"line_end":1114,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2010, 1, 1)), Duration::days(365*4 + 1));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":307215,"byte_end":307308,"line_start":1115,"line_end":1115,"column_start":5,"column_end":98}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(1614, 1, 1)), Duration::days(365*400 + 97));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":307313,"byte_end":307409,"line_start":1116,"line_end":1116,"column_start":5,"column_end":101}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":307414,"byte_end":307421,"line_start":1117,"line_end":1117,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1220},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":309210,"byte_end":309227,"line_start":1159,"line_end":1159,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDate>::format_with_items","value":"fn format_with_items<'a, I, B, '_>(&'_ Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n Otherwise it is the same as the ordinary `format` method.","sig":null,"attributes":[{"value":"/ Formats the date with the specified formatting items.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":308045,"byte_end":308102,"line_start":1130,"line_end":1130,"column_start":5,"column_end":62}},{"value":"/ Otherwise it is the same as the ordinary `format` method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":308107,"byte_end":308168,"line_start":1131,"line_end":1131,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":308173,"byte_end":308176,"line_start":1132,"line_end":1132,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":308181,"byte_end":308231,"line_start":1133,"line_end":1133,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":308236,"byte_end":308314,"line_start":1134,"line_end":1134,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":308319,"byte_end":308322,"line_start":1135,"line_end":1135,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":308327,"byte_end":308340,"line_start":1136,"line_end":1136,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":308345,"byte_end":308348,"line_start":1137,"line_end":1137,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":308353,"byte_end":308360,"line_start":1138,"line_end":1138,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":308365,"byte_end":308391,"line_start":1139,"line_end":1139,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":308396,"byte_end":308444,"line_start":1140,"line_end":1140,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":308449,"byte_end":308452,"line_start":1141,"line_end":1141,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%Y-%m-%d\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":308457,"byte_end":308502,"line_start":1142,"line_end":1142,"column_start":5,"column_end":50}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":308507,"byte_end":308551,"line_start":1143,"line_end":1143,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.format_with_items(fmt.clone()).to_string(), \"2015-09-05\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":308556,"byte_end":308631,"line_start":1144,"line_end":1144,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(d.format(\"%Y-%m-%d\").to_string(),             \"2015-09-05\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":308636,"byte_end":308711,"line_start":1145,"line_end":1145,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":308716,"byte_end":308723,"line_start":1146,"line_end":1146,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":308728,"byte_end":308731,"line_start":1147,"line_end":1147,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":308736,"byte_end":308820,"line_start":1148,"line_end":1148,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":308825,"byte_end":308828,"line_start":1149,"line_end":1149,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":308833,"byte_end":308840,"line_start":1150,"line_end":1150,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":308845,"byte_end":308873,"line_start":1151,"line_end":1151,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":308878,"byte_end":308928,"line_start":1152,"line_end":1152,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%Y-%m-%d\").clone();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":308933,"byte_end":308988,"line_start":1153,"line_end":1153,"column_start":5,"column_end":60}},{"value":"/ # let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":308993,"byte_end":309039,"line_start":1154,"line_end":1154,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(format!(\"{}\", d.format_with_items(fmt)), \"2015-09-05\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":309044,"byte_end":309114,"line_start":1155,"line_end":1155,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":309119,"byte_end":309126,"line_start":1156,"line_end":1156,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":309131,"byte_end":309184,"line_start":1157,"line_end":1157,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":309189,"byte_end":309198,"line_start":1158,"line_end":1158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1224},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":310911,"byte_end":310917,"line_start":1201,"line_end":1201,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDate>::format","value":"fn format<'a, '_>(&'_ Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the date with the specified format string.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":309423,"byte_end":309477,"line_start":1167,"line_end":1167,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":309482,"byte_end":309552,"line_start":1168,"line_end":1168,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":309557,"byte_end":309595,"line_start":1169,"line_end":1169,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":309600,"byte_end":309603,"line_start":1170,"line_end":1170,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":309608,"byte_end":309643,"line_start":1171,"line_end":1171,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":309648,"byte_end":309721,"line_start":1172,"line_end":1172,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":309726,"byte_end":309783,"line_start":1173,"line_end":1173,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":309788,"byte_end":309850,"line_start":1174,"line_end":1174,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":309855,"byte_end":309915,"line_start":1175,"line_end":1175,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":309920,"byte_end":309923,"line_start":1176,"line_end":1176,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":309928,"byte_end":309992,"line_start":1177,"line_end":1177,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":309997,"byte_end":310060,"line_start":1178,"line_end":1178,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":310065,"byte_end":310140,"line_start":1179,"line_end":1179,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":310145,"byte_end":310148,"line_start":1180,"line_end":1180,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":310153,"byte_end":310166,"line_start":1181,"line_end":1181,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":310171,"byte_end":310174,"line_start":1182,"line_end":1182,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":310179,"byte_end":310186,"line_start":1183,"line_end":1183,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":310191,"byte_end":310217,"line_start":1184,"line_end":1184,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":310222,"byte_end":310225,"line_start":1185,"line_end":1185,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":310230,"byte_end":310274,"line_start":1186,"line_end":1186,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.format(\"%Y-%m-%d\").to_string(), \"2015-09-05\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":310279,"byte_end":310342,"line_start":1187,"line_end":1187,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(d.format(\"%A, %-d %B, %C%y\").to_string(), \"Saturday, 5 September, 2015\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":310347,"byte_end":310435,"line_start":1188,"line_end":1188,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":310440,"byte_end":310447,"line_start":1189,"line_end":1189,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":310452,"byte_end":310455,"line_start":1190,"line_end":1190,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":310460,"byte_end":310544,"line_start":1191,"line_end":1191,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":310549,"byte_end":310552,"line_start":1192,"line_end":1192,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":310557,"byte_end":310564,"line_start":1193,"line_end":1193,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":310569,"byte_end":310597,"line_start":1194,"line_end":1194,"column_start":5,"column_end":33}},{"value":"/ # let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":310602,"byte_end":310648,"line_start":1195,"line_end":1195,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(format!(\"{}\", d.format(\"%Y-%m-%d\")), \"2015-09-05\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":310653,"byte_end":310719,"line_start":1196,"line_end":1196,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", d.format(\"%A, %-d %B, %C%y\")), \"Saturday, 5 September, 2015\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":310724,"byte_end":310815,"line_start":1197,"line_end":1197,"column_start":5,"column_end":96}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":310820,"byte_end":310827,"line_start":1198,"line_end":1198,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":310832,"byte_end":310885,"line_start":1199,"line_end":1199,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":310890,"byte_end":310899,"line_start":1200,"line_end":1200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1226},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311859,"byte_end":311868,"line_start":1232,"line_end":1232,"column_start":12,"column_end":21},"name":"iter_days","qualname":"<NaiveDate>::iter_days","value":"fn iter_days<'_>(&'_ Self) -> NaiveDateDaysIterator","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that steps by days across all representable dates.","sig":null,"attributes":[{"value":"/ Returns an iterator that steps by days across all representable dates.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311048,"byte_end":311122,"line_start":1205,"line_end":1205,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311127,"byte_end":311130,"line_start":1206,"line_end":1206,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311135,"byte_end":311148,"line_start":1207,"line_end":1207,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311153,"byte_end":311156,"line_start":1208,"line_end":1208,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311161,"byte_end":311168,"line_start":1209,"line_end":1209,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311173,"byte_end":311201,"line_start":1210,"line_end":1210,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311206,"byte_end":311209,"line_start":1211,"line_end":1211,"column_start":5,"column_end":8}},{"value":"/ let expected = [","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311214,"byte_end":311234,"line_start":1212,"line_end":1212,"column_start":5,"column_end":25}},{"value":"/     NaiveDate::from_ymd(2016, 2, 27),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311239,"byte_end":311280,"line_start":1213,"line_end":1213,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 2, 28),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311285,"byte_end":311326,"line_start":1214,"line_end":1214,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 2, 29),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311331,"byte_end":311372,"line_start":1215,"line_end":1215,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 3, 1),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311377,"byte_end":311417,"line_start":1216,"line_end":1216,"column_start":5,"column_end":45}},{"value":"/ ];","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311422,"byte_end":311428,"line_start":1217,"line_end":1217,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311433,"byte_end":311436,"line_start":1218,"line_end":1218,"column_start":5,"column_end":8}},{"value":"/ let mut count = 0;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311441,"byte_end":311463,"line_start":1219,"line_end":1219,"column_start":5,"column_end":27}},{"value":"/ for (idx, d) in NaiveDate::from_ymd(2016, 2, 27).iter_days().take(4).enumerate() {","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311468,"byte_end":311554,"line_start":1220,"line_end":1220,"column_start":5,"column_end":91}},{"value":"/    assert_eq!(d, expected[idx]);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311559,"byte_end":311595,"line_start":1221,"line_end":1221,"column_start":5,"column_end":41}},{"value":"/    count += 1;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311600,"byte_end":311618,"line_start":1222,"line_end":1222,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311623,"byte_end":311628,"line_start":1223,"line_end":1223,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(count, 4);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311633,"byte_end":311658,"line_start":1224,"line_end":1224,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311663,"byte_end":311666,"line_start":1225,"line_end":1225,"column_start":5,"column_end":8}},{"value":"/ for d in NaiveDate::from_ymd(2016, 3, 1).iter_days().rev().take(4) {","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311671,"byte_end":311743,"line_start":1226,"line_end":1226,"column_start":5,"column_end":77}},{"value":"/     count -= 1;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311748,"byte_end":311767,"line_start":1227,"line_end":1227,"column_start":5,"column_end":24}},{"value":"/     assert_eq!(d, expected[count]);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311772,"byte_end":311811,"line_start":1228,"line_end":1228,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311816,"byte_end":311821,"line_start":1229,"line_end":1229,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311826,"byte_end":311833,"line_start":1230,"line_end":1230,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311838,"byte_end":311847,"line_start":1231,"line_end":1231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1227},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312776,"byte_end":312786,"line_start":1263,"line_end":1263,"column_start":12,"column_end":22},"name":"iter_weeks","qualname":"<NaiveDate>::iter_weeks","value":"fn iter_weeks<'_>(&'_ Self) -> NaiveDateWeeksIterator","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that steps by weeks across all representable dates.","sig":null,"attributes":[{"value":"/ Returns an iterator that steps by weeks across all representable dates.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":311961,"byte_end":312036,"line_start":1236,"line_end":1236,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312041,"byte_end":312044,"line_start":1237,"line_end":1237,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312049,"byte_end":312062,"line_start":1238,"line_end":1238,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312067,"byte_end":312070,"line_start":1239,"line_end":1239,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312075,"byte_end":312082,"line_start":1240,"line_end":1240,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312087,"byte_end":312115,"line_start":1241,"line_end":1241,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312120,"byte_end":312123,"line_start":1242,"line_end":1242,"column_start":5,"column_end":8}},{"value":"/ let expected = [","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312128,"byte_end":312148,"line_start":1243,"line_end":1243,"column_start":5,"column_end":25}},{"value":"/     NaiveDate::from_ymd(2016, 2, 27),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312153,"byte_end":312194,"line_start":1244,"line_end":1244,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 3, 5),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312199,"byte_end":312239,"line_start":1245,"line_end":1245,"column_start":5,"column_end":45}},{"value":"/     NaiveDate::from_ymd(2016, 3, 12),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312244,"byte_end":312285,"line_start":1246,"line_end":1246,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 3, 19),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312290,"byte_end":312331,"line_start":1247,"line_end":1247,"column_start":5,"column_end":46}},{"value":"/ ];","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312336,"byte_end":312342,"line_start":1248,"line_end":1248,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312347,"byte_end":312350,"line_start":1249,"line_end":1249,"column_start":5,"column_end":8}},{"value":"/ let mut count = 0;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312355,"byte_end":312377,"line_start":1250,"line_end":1250,"column_start":5,"column_end":27}},{"value":"/ for (idx, d) in NaiveDate::from_ymd(2016, 2, 27).iter_weeks().take(4).enumerate() {","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312382,"byte_end":312469,"line_start":1251,"line_end":1251,"column_start":5,"column_end":92}},{"value":"/    assert_eq!(d, expected[idx]);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312474,"byte_end":312510,"line_start":1252,"line_end":1252,"column_start":5,"column_end":41}},{"value":"/    count += 1;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312515,"byte_end":312533,"line_start":1253,"line_end":1253,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312538,"byte_end":312543,"line_start":1254,"line_end":1254,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(count, 4);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312548,"byte_end":312573,"line_start":1255,"line_end":1255,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312578,"byte_end":312581,"line_start":1256,"line_end":1256,"column_start":5,"column_end":8}},{"value":"/ for d in NaiveDate::from_ymd(2016, 3, 19).iter_weeks().rev().take(4) {","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312586,"byte_end":312660,"line_start":1257,"line_end":1257,"column_start":5,"column_end":79}},{"value":"/     count -= 1;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312665,"byte_end":312684,"line_start":1258,"line_end":1258,"column_start":5,"column_end":24}},{"value":"/     assert_eq!(d, expected[count]);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312689,"byte_end":312728,"line_start":1259,"line_end":1259,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312733,"byte_end":312738,"line_start":1260,"line_end":1260,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312743,"byte_end":312750,"line_start":1261,"line_end":1261,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312755,"byte_end":312764,"line_start":1262,"line_end":1262,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313011,"byte_end":313015,"line_start":1270,"line_end":1270,"column_start":12,"column_end":16},"name":"week","qualname":"<NaiveDate>::week","value":"fn week<'_>(&'_ Self, Weekday) -> NaiveWeek","parent":null,"children":[],"decl_id":null,"docs":" Returns the [`NaiveWeek`] that the date belongs to, starting with the [`Weekday`]\n specified.\n","sig":null,"attributes":[{"value":"/ Returns the [`NaiveWeek`] that the date belongs to, starting with the [`Weekday`]","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312881,"byte_end":312966,"line_start":1267,"line_end":1267,"column_start":5,"column_end":90}},{"value":"/ specified.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312971,"byte_end":312985,"line_start":1268,"line_end":1268,"column_start":5,"column_end":19}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":312990,"byte_end":312999,"line_start":1269,"line_end":1269,"column_start":5,"column_end":14}}]},{"kind":"Const","id":{"krate":0,"index":1229},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313182,"byte_end":313185,"line_start":1275,"line_end":1275,"column_start":15,"column_end":18},"name":"MIN","qualname":"::naive::date::NaiveDate::MIN","value":"NaiveDate","parent":{"krate":0,"index":1177},"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDate` (January 1, 262145 BCE).\n","sig":null,"attributes":[{"value":"/ The minimum possible `NaiveDate` (January 1, 262145 BCE).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313106,"byte_end":313167,"line_start":1274,"line_end":1274,"column_start":5,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":1230},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313343,"byte_end":313346,"line_start":1277,"line_end":1277,"column_start":15,"column_end":18},"name":"MAX","qualname":"::naive::date::NaiveDate::MAX","value":"NaiveDate","parent":{"krate":0,"index":1177},"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDate` (December 31, 262143 CE).\n","sig":null,"attributes":[{"value":"/ The maximum possible `NaiveDate` (December 31, 262143 CE).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313266,"byte_end":313328,"line_start":1276,"line_end":1276,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1232},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313803,"byte_end":313807,"line_start":1292,"line_end":1292,"column_start":8,"column_end":12},"name":"year","qualname":"<NaiveDate as traits::Datelike>::year","value":"fn year<'_>(&'_ Self) -> i32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2267},"docs":" Returns the year number in the [calendar date](#calendar-date).","sig":null,"attributes":[{"value":"/ Returns the year number in the [calendar date](#calendar-date).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313461,"byte_end":313528,"line_start":1281,"line_end":1281,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313533,"byte_end":313536,"line_start":1282,"line_end":1282,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313541,"byte_end":313554,"line_start":1283,"line_end":1283,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313559,"byte_end":313562,"line_start":1284,"line_end":1284,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313567,"byte_end":313574,"line_start":1285,"line_end":1285,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313579,"byte_end":313617,"line_start":1286,"line_end":1286,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313622,"byte_end":313625,"line_start":1287,"line_end":1287,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).year(), 2015);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313630,"byte_end":313691,"line_start":1288,"line_end":1288,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(NaiveDate::from_ymd(-308, 3, 14).year(), -308); // 309 BCE","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313696,"byte_end":313769,"line_start":1289,"line_end":1289,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313774,"byte_end":313781,"line_start":1290,"line_end":1290,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313786,"byte_end":313795,"line_start":1291,"line_end":1291,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1233},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314218,"byte_end":314223,"line_start":1309,"line_end":1309,"column_start":8,"column_end":13},"name":"month","qualname":"<NaiveDate as traits::Datelike>::month","value":"fn month<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2269},"docs":" Returns the month number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 1.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313859,"byte_end":313904,"line_start":1296,"line_end":1296,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313909,"byte_end":313912,"line_start":1297,"line_end":1297,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 12.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313917,"byte_end":313958,"line_start":1298,"line_end":1298,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313963,"byte_end":313966,"line_start":1299,"line_end":1299,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313971,"byte_end":313984,"line_start":1300,"line_end":1300,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313989,"byte_end":313992,"line_start":1301,"line_end":1301,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313997,"byte_end":314004,"line_start":1302,"line_end":1302,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314009,"byte_end":314047,"line_start":1303,"line_end":1303,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314052,"byte_end":314055,"line_start":1304,"line_end":1304,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).month(), 9);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314060,"byte_end":314119,"line_start":1305,"line_end":1305,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(NaiveDate::from_ymd(-308, 3, 14).month(), 3);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314124,"byte_end":314184,"line_start":1306,"line_end":1306,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314189,"byte_end":314196,"line_start":1307,"line_end":1307,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314201,"byte_end":314210,"line_start":1308,"line_end":1308,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1234},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314639,"byte_end":314645,"line_start":1326,"line_end":1326,"column_start":8,"column_end":14},"name":"month0","qualname":"<NaiveDate as traits::Datelike>::month0","value":"fn month0<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2270},"docs":" Returns the month number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 0.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314278,"byte_end":314323,"line_start":1313,"line_end":1313,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314328,"byte_end":314331,"line_start":1314,"line_end":1314,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 11.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314336,"byte_end":314377,"line_start":1315,"line_end":1315,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314382,"byte_end":314385,"line_start":1316,"line_end":1316,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314390,"byte_end":314403,"line_start":1317,"line_end":1317,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314408,"byte_end":314411,"line_start":1318,"line_end":1318,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314416,"byte_end":314423,"line_start":1319,"line_end":1319,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314428,"byte_end":314466,"line_start":1320,"line_end":1320,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314471,"byte_end":314474,"line_start":1321,"line_end":1321,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).month0(), 8);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314479,"byte_end":314539,"line_start":1322,"line_end":1322,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(NaiveDate::from_ymd(-308, 3, 14).month0(), 2);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314544,"byte_end":314605,"line_start":1323,"line_end":1323,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314610,"byte_end":314617,"line_start":1324,"line_end":1324,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314622,"byte_end":314631,"line_start":1325,"line_end":1325,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1235},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315991,"byte_end":315994,"line_start":1366,"line_end":1366,"column_start":8,"column_end":11},"name":"day","qualname":"<NaiveDate as traits::Datelike>::day","value":"fn day<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2271},"docs":" Returns the day of month starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 1.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314704,"byte_end":314749,"line_start":1330,"line_end":1330,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314754,"byte_end":314757,"line_start":1331,"line_end":1331,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 31. (The last day of month differs by months.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314762,"byte_end":314846,"line_start":1332,"line_end":1332,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314851,"byte_end":314854,"line_start":1333,"line_end":1333,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314859,"byte_end":314872,"line_start":1334,"line_end":1334,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314877,"byte_end":314880,"line_start":1335,"line_end":1335,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314885,"byte_end":314892,"line_start":1336,"line_end":1336,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314897,"byte_end":314935,"line_start":1337,"line_end":1337,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314940,"byte_end":314943,"line_start":1338,"line_end":1338,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).day(), 8);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":314948,"byte_end":315005,"line_start":1339,"line_end":1339,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(NaiveDate::from_ymd(-308, 3, 14).day(), 14);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315010,"byte_end":315069,"line_start":1340,"line_end":1340,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315074,"byte_end":315081,"line_start":1341,"line_end":1341,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315086,"byte_end":315089,"line_start":1342,"line_end":1342,"column_start":5,"column_end":8}},{"value":"/ Combined with [`NaiveDate::pred`](#method.pred),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315094,"byte_end":315146,"line_start":1343,"line_end":1343,"column_start":5,"column_end":57}},{"value":"/ one can determine the number of days in a particular month.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315151,"byte_end":315214,"line_start":1344,"line_end":1344,"column_start":5,"column_end":68}},{"value":"/ (Note that this panics when `year` is out of range.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315219,"byte_end":315275,"line_start":1345,"line_end":1345,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315280,"byte_end":315283,"line_start":1346,"line_end":1346,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315288,"byte_end":315295,"line_start":1347,"line_end":1347,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315300,"byte_end":315338,"line_start":1348,"line_end":1348,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315343,"byte_end":315346,"line_start":1349,"line_end":1349,"column_start":5,"column_end":8}},{"value":"/ fn ndays_in_month(year: i32, month: u32) -> u32 {","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315351,"byte_end":315404,"line_start":1350,"line_end":1350,"column_start":5,"column_end":58}},{"value":"/     // the first day of the next month...","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315409,"byte_end":315454,"line_start":1351,"line_end":1351,"column_start":5,"column_end":50}},{"value":"/     let (y, m) = if month == 12 { (year + 1, 1) } else { (year, month + 1) };","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315459,"byte_end":315540,"line_start":1352,"line_end":1352,"column_start":5,"column_end":86}},{"value":"/     let d = NaiveDate::from_ymd(y, m, 1);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315545,"byte_end":315590,"line_start":1353,"line_end":1353,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315595,"byte_end":315598,"line_start":1354,"line_end":1354,"column_start":5,"column_end":8}},{"value":"/     // ...is preceded by the last day of the original month","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315603,"byte_end":315666,"line_start":1355,"line_end":1355,"column_start":5,"column_end":68}},{"value":"/     d.pred().day()","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315671,"byte_end":315693,"line_start":1356,"line_end":1356,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315698,"byte_end":315703,"line_start":1357,"line_end":1357,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315708,"byte_end":315711,"line_start":1358,"line_end":1358,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(ndays_in_month(2015, 8), 31);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315716,"byte_end":315760,"line_start":1359,"line_end":1359,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(ndays_in_month(2015, 9), 30);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315765,"byte_end":315809,"line_start":1360,"line_end":1360,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(ndays_in_month(2015, 12), 31);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315814,"byte_end":315859,"line_start":1361,"line_end":1361,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(ndays_in_month(2016, 2), 29);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315864,"byte_end":315908,"line_start":1362,"line_end":1362,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(ndays_in_month(2017, 2), 28);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315913,"byte_end":315957,"line_start":1363,"line_end":1363,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315962,"byte_end":315969,"line_start":1364,"line_end":1364,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":315974,"byte_end":315983,"line_start":1365,"line_end":1365,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1236},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316448,"byte_end":316452,"line_start":1383,"line_end":1383,"column_start":8,"column_end":12},"name":"day0","qualname":"<NaiveDate as traits::Datelike>::day0","value":"fn day0<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2272},"docs":" Returns the day of month starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 0.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316047,"byte_end":316092,"line_start":1370,"line_end":1370,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316097,"byte_end":316100,"line_start":1371,"line_end":1371,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 30. (The last day of month differs by months.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316105,"byte_end":316189,"line_start":1372,"line_end":1372,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316194,"byte_end":316197,"line_start":1373,"line_end":1373,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316202,"byte_end":316215,"line_start":1374,"line_end":1374,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316220,"byte_end":316223,"line_start":1375,"line_end":1375,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316228,"byte_end":316235,"line_start":1376,"line_end":1376,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316240,"byte_end":316278,"line_start":1377,"line_end":1377,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316283,"byte_end":316286,"line_start":1378,"line_end":1378,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).day0(), 7);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316291,"byte_end":316349,"line_start":1379,"line_end":1379,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(NaiveDate::from_ymd(-308, 3, 14).day0(), 13);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316354,"byte_end":316414,"line_start":1380,"line_end":1380,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316419,"byte_end":316426,"line_start":1381,"line_end":1381,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316431,"byte_end":316440,"line_start":1382,"line_end":1382,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1237},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317697,"byte_end":317704,"line_start":1422,"line_end":1422,"column_start":8,"column_end":15},"name":"ordinal","qualname":"<NaiveDate as traits::Datelike>::ordinal","value":"fn ordinal<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2273},"docs":" Returns the day of year starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 1.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316509,"byte_end":316553,"line_start":1387,"line_end":1387,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316558,"byte_end":316561,"line_start":1388,"line_end":1388,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 366. (The last day of year differs by years.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316566,"byte_end":316649,"line_start":1389,"line_end":1389,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316654,"byte_end":316657,"line_start":1390,"line_end":1390,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316662,"byte_end":316675,"line_start":1391,"line_end":1391,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316680,"byte_end":316683,"line_start":1392,"line_end":1392,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316688,"byte_end":316695,"line_start":1393,"line_end":1393,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316700,"byte_end":316738,"line_start":1394,"line_end":1394,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316743,"byte_end":316746,"line_start":1395,"line_end":1395,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).ordinal(), 251);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316751,"byte_end":316814,"line_start":1396,"line_end":1396,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(NaiveDate::from_ymd(-308, 3, 14).ordinal(), 74);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316819,"byte_end":316882,"line_start":1397,"line_end":1397,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316887,"byte_end":316894,"line_start":1398,"line_end":1398,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316899,"byte_end":316902,"line_start":1399,"line_end":1399,"column_start":5,"column_end":8}},{"value":"/ Combined with [`NaiveDate::pred`](#method.pred),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316907,"byte_end":316959,"line_start":1400,"line_end":1400,"column_start":5,"column_end":57}},{"value":"/ one can determine the number of days in a particular year.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":316964,"byte_end":317026,"line_start":1401,"line_end":1401,"column_start":5,"column_end":67}},{"value":"/ (Note that this panics when `year` is out of range.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317031,"byte_end":317087,"line_start":1402,"line_end":1402,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317092,"byte_end":317095,"line_start":1403,"line_end":1403,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317100,"byte_end":317107,"line_start":1404,"line_end":1404,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317112,"byte_end":317150,"line_start":1405,"line_end":1405,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317155,"byte_end":317158,"line_start":1406,"line_end":1406,"column_start":5,"column_end":8}},{"value":"/ fn ndays_in_year(year: i32) -> u32 {","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317163,"byte_end":317203,"line_start":1407,"line_end":1407,"column_start":5,"column_end":45}},{"value":"/     // the first day of the next year...","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317208,"byte_end":317252,"line_start":1408,"line_end":1408,"column_start":5,"column_end":49}},{"value":"/     let d = NaiveDate::from_ymd(year + 1, 1, 1);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317257,"byte_end":317309,"line_start":1409,"line_end":1409,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317314,"byte_end":317317,"line_start":1410,"line_end":1410,"column_start":5,"column_end":8}},{"value":"/     // ...is preceded by the last day of the original year","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317322,"byte_end":317384,"line_start":1411,"line_end":1411,"column_start":5,"column_end":67}},{"value":"/     d.pred().ordinal()","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317389,"byte_end":317415,"line_start":1412,"line_end":1412,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317420,"byte_end":317425,"line_start":1413,"line_end":1413,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317430,"byte_end":317433,"line_start":1414,"line_end":1414,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(ndays_in_year(2015), 365);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317438,"byte_end":317479,"line_start":1415,"line_end":1415,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(ndays_in_year(2016), 366);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317484,"byte_end":317525,"line_start":1416,"line_end":1416,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(ndays_in_year(2017), 365);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317530,"byte_end":317571,"line_start":1417,"line_end":1417,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(ndays_in_year(2000), 366);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317576,"byte_end":317617,"line_start":1418,"line_end":1418,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(ndays_in_year(2100), 365);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317622,"byte_end":317663,"line_start":1419,"line_end":1419,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317668,"byte_end":317675,"line_start":1420,"line_end":1420,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317680,"byte_end":317689,"line_start":1421,"line_end":1421,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1238},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318169,"byte_end":318177,"line_start":1439,"line_end":1439,"column_start":8,"column_end":16},"name":"ordinal0","qualname":"<NaiveDate as traits::Datelike>::ordinal0","value":"fn ordinal0<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2274},"docs":" Returns the day of year starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 0.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317760,"byte_end":317804,"line_start":1426,"line_end":1426,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317809,"byte_end":317812,"line_start":1427,"line_end":1427,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 365. (The last day of year differs by years.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317817,"byte_end":317900,"line_start":1428,"line_end":1428,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317905,"byte_end":317908,"line_start":1429,"line_end":1429,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317913,"byte_end":317926,"line_start":1430,"line_end":1430,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317931,"byte_end":317934,"line_start":1431,"line_end":1431,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317939,"byte_end":317946,"line_start":1432,"line_end":1432,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317951,"byte_end":317989,"line_start":1433,"line_end":1433,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":317994,"byte_end":317997,"line_start":1434,"line_end":1434,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).ordinal0(), 250);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318002,"byte_end":318066,"line_start":1435,"line_end":1435,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(NaiveDate::from_ymd(-308, 3, 14).ordinal0(), 73);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318071,"byte_end":318135,"line_start":1436,"line_end":1436,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318140,"byte_end":318147,"line_start":1437,"line_end":1437,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318152,"byte_end":318161,"line_start":1438,"line_end":1438,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1239},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318560,"byte_end":318567,"line_start":1454,"line_end":1454,"column_start":8,"column_end":15},"name":"weekday","qualname":"<NaiveDate as traits::Datelike>::weekday","value":"fn weekday<'_>(&'_ Self) -> Weekday","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2275},"docs":" Returns the day of week.","sig":null,"attributes":[{"value":"/ Returns the day of week.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318237,"byte_end":318265,"line_start":1443,"line_end":1443,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318270,"byte_end":318273,"line_start":1444,"line_end":1444,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318278,"byte_end":318291,"line_start":1445,"line_end":1445,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318296,"byte_end":318299,"line_start":1446,"line_end":1446,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318304,"byte_end":318311,"line_start":1447,"line_end":1447,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318316,"byte_end":318363,"line_start":1448,"line_end":1448,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318368,"byte_end":318371,"line_start":1449,"line_end":1449,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).weekday(), Weekday::Tue);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318376,"byte_end":318448,"line_start":1450,"line_end":1450,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(NaiveDate::from_ymd(-308, 3, 14).weekday(), Weekday::Fri);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318453,"byte_end":318526,"line_start":1451,"line_end":1451,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318531,"byte_end":318538,"line_start":1452,"line_end":1452,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318543,"byte_end":318552,"line_start":1453,"line_end":1453,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1240},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318644,"byte_end":318652,"line_start":1459,"line_end":1459,"column_start":8,"column_end":16},"name":"iso_week","qualname":"<NaiveDate as traits::Datelike>::iso_week","value":"fn iso_week<'_>(&'_ Self) -> IsoWeek","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2276},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318627,"byte_end":318636,"line_start":1458,"line_end":1458,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1241},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":319591,"byte_end":319600,"line_start":1486,"line_end":1486,"column_start":8,"column_end":17},"name":"with_year","qualname":"<NaiveDate as traits::Datelike>::with_year","value":"fn with_year<'_>(&'_ Self, i32) -> Option<NaiveDate>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2277},"docs":" Makes a new `NaiveDate` with the year number changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` with the year number changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318743,"byte_end":318800,"line_start":1463,"line_end":1463,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318805,"byte_end":318808,"line_start":1464,"line_end":1464,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDate` would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318813,"byte_end":318880,"line_start":1465,"line_end":1465,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318885,"byte_end":318888,"line_start":1466,"line_end":1466,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318893,"byte_end":318906,"line_start":1467,"line_end":1467,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318911,"byte_end":318914,"line_start":1468,"line_end":1468,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318919,"byte_end":318926,"line_start":1469,"line_end":1469,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318931,"byte_end":318969,"line_start":1470,"line_end":1470,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318974,"byte_end":318977,"line_start":1471,"line_end":1471,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).with_year(2016),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":318982,"byte_end":319045,"line_start":1472,"line_end":1472,"column_start":5,"column_end":68}},{"value":"/            Some(NaiveDate::from_ymd(2016, 9, 8)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":319050,"byte_end":319104,"line_start":1473,"line_end":1473,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).with_year(-308),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":319109,"byte_end":319172,"line_start":1474,"line_end":1474,"column_start":5,"column_end":68}},{"value":"/            Some(NaiveDate::from_ymd(-308, 9, 8)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":319177,"byte_end":319231,"line_start":1475,"line_end":1475,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":319236,"byte_end":319243,"line_start":1476,"line_end":1476,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":319248,"byte_end":319251,"line_start":1477,"line_end":1477,"column_start":5,"column_end":8}},{"value":"/ A leap day (February 29) is a good example that this method can return `None`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":319256,"byte_end":319338,"line_start":1478,"line_end":1478,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":319343,"byte_end":319346,"line_start":1479,"line_end":1479,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":319351,"byte_end":319358,"line_start":1480,"line_end":1480,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":319363,"byte_end":319403,"line_start":1481,"line_end":1481,"column_start":5,"column_end":45}},{"value":"/ assert!(NaiveDate::from_ymd(2016, 2, 29).with_year(2015).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":319408,"byte_end":319480,"line_start":1482,"line_end":1482,"column_start":5,"column_end":77}},{"value":"/ assert!(NaiveDate::from_ymd(2016, 2, 29).with_year(2020).is_some());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":319485,"byte_end":319557,"line_start":1483,"line_end":1483,"column_start":5,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":319562,"byte_end":319569,"line_start":1484,"line_end":1484,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":319574,"byte_end":319583,"line_start":1485,"line_end":1485,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1242},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320539,"byte_end":320549,"line_start":1512,"line_end":1512,"column_start":8,"column_end":18},"name":"with_month","qualname":"<NaiveDate as traits::Datelike>::with_month","value":"fn with_month<'_>(&'_ Self, u32) -> Option<NaiveDate>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2278},"docs":" Makes a new `NaiveDate` with the month number (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` with the month number (starting from 1) changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":319944,"byte_end":320020,"line_start":1497,"line_end":1497,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320025,"byte_end":320028,"line_start":1498,"line_end":1498,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDate` would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320033,"byte_end":320100,"line_start":1499,"line_end":1499,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320105,"byte_end":320108,"line_start":1500,"line_end":1500,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320113,"byte_end":320126,"line_start":1501,"line_end":1501,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320131,"byte_end":320134,"line_start":1502,"line_end":1502,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320139,"byte_end":320146,"line_start":1503,"line_end":1503,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320151,"byte_end":320189,"line_start":1504,"line_end":1504,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320194,"byte_end":320197,"line_start":1505,"line_end":1505,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).with_month(10),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320202,"byte_end":320264,"line_start":1506,"line_end":1506,"column_start":5,"column_end":67}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 8)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320269,"byte_end":320324,"line_start":1507,"line_end":1507,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).with_month(13), None); // no month 13","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320329,"byte_end":320413,"line_start":1508,"line_end":1508,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 30).with_month(2), None); // no February 30","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320418,"byte_end":320505,"line_start":1509,"line_end":1509,"column_start":5,"column_end":92}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320510,"byte_end":320517,"line_start":1510,"line_end":1510,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320522,"byte_end":320531,"line_start":1511,"line_end":1511,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1243},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":321252,"byte_end":321263,"line_start":1531,"line_end":1531,"column_start":8,"column_end":19},"name":"with_month0","qualname":"<NaiveDate as traits::Datelike>::with_month0","value":"fn with_month0<'_>(&'_ Self, u32) -> Option<NaiveDate>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2279},"docs":" Makes a new `NaiveDate` with the month number (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` with the month number (starting from 0) changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320655,"byte_end":320731,"line_start":1516,"line_end":1516,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320736,"byte_end":320739,"line_start":1517,"line_end":1517,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDate` would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320744,"byte_end":320811,"line_start":1518,"line_end":1518,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320816,"byte_end":320819,"line_start":1519,"line_end":1519,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320824,"byte_end":320837,"line_start":1520,"line_end":1520,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320842,"byte_end":320845,"line_start":1521,"line_end":1521,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320850,"byte_end":320857,"line_start":1522,"line_end":1522,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320862,"byte_end":320900,"line_start":1523,"line_end":1523,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320905,"byte_end":320908,"line_start":1524,"line_end":1524,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).with_month0(9),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320913,"byte_end":320975,"line_start":1525,"line_end":1525,"column_start":5,"column_end":67}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 8)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":320980,"byte_end":321035,"line_start":1526,"line_end":1526,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).with_month0(12), None); // no month 13","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":321040,"byte_end":321125,"line_start":1527,"line_end":1527,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 30).with_month0(1), None); // no February 30","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":321130,"byte_end":321218,"line_start":1528,"line_end":1528,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":321223,"byte_end":321230,"line_start":1529,"line_end":1529,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":321235,"byte_end":321244,"line_start":1530,"line_end":1530,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1244},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":321897,"byte_end":321905,"line_start":1550,"line_end":1550,"column_start":8,"column_end":16},"name":"with_day","qualname":"<NaiveDate as traits::Datelike>::with_day","value":"fn with_day<'_>(&'_ Self, u32) -> Option<NaiveDate>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2280},"docs":" Makes a new `NaiveDate` with the day of month (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` with the day of month (starting from 1) changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":321375,"byte_end":321451,"line_start":1535,"line_end":1535,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":321456,"byte_end":321459,"line_start":1536,"line_end":1536,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDate` would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":321464,"byte_end":321531,"line_start":1537,"line_end":1537,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":321536,"byte_end":321539,"line_start":1538,"line_end":1538,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":321544,"byte_end":321557,"line_start":1539,"line_end":1539,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":321562,"byte_end":321565,"line_start":1540,"line_end":1540,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":321570,"byte_end":321577,"line_start":1541,"line_end":1541,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":321582,"byte_end":321620,"line_start":1542,"line_end":1542,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":321625,"byte_end":321628,"line_start":1543,"line_end":1543,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).with_day(30),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":321633,"byte_end":321693,"line_start":1544,"line_end":1544,"column_start":5,"column_end":65}},{"value":"/            Some(NaiveDate::from_ymd(2015, 9, 30)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":321698,"byte_end":321753,"line_start":1545,"line_end":1545,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).with_day(31),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":321758,"byte_end":321818,"line_start":1546,"line_end":1546,"column_start":5,"column_end":65}},{"value":"/            None); // no September 31","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":321823,"byte_end":321863,"line_start":1547,"line_end":1547,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":321868,"byte_end":321875,"line_start":1548,"line_end":1548,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":321880,"byte_end":321889,"line_start":1549,"line_end":1549,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1245},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322529,"byte_end":322538,"line_start":1569,"line_end":1569,"column_start":8,"column_end":17},"name":"with_day0","qualname":"<NaiveDate as traits::Datelike>::with_day0","value":"fn with_day0<'_>(&'_ Self, u32) -> Option<NaiveDate>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2281},"docs":" Makes a new `NaiveDate` with the day of month (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` with the day of month (starting from 0) changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322005,"byte_end":322081,"line_start":1554,"line_end":1554,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322086,"byte_end":322089,"line_start":1555,"line_end":1555,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDate` would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322094,"byte_end":322161,"line_start":1556,"line_end":1556,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322166,"byte_end":322169,"line_start":1557,"line_end":1557,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322174,"byte_end":322187,"line_start":1558,"line_end":1558,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322192,"byte_end":322195,"line_start":1559,"line_end":1559,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322200,"byte_end":322207,"line_start":1560,"line_end":1560,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322212,"byte_end":322250,"line_start":1561,"line_end":1561,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322255,"byte_end":322258,"line_start":1562,"line_end":1562,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).with_day0(29),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322263,"byte_end":322324,"line_start":1563,"line_end":1563,"column_start":5,"column_end":66}},{"value":"/            Some(NaiveDate::from_ymd(2015, 9, 30)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322329,"byte_end":322384,"line_start":1564,"line_end":1564,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 9, 8).with_day0(30),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322389,"byte_end":322450,"line_start":1565,"line_end":1565,"column_start":5,"column_end":66}},{"value":"/            None); // no September 31","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322455,"byte_end":322495,"line_start":1566,"line_end":1566,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322500,"byte_end":322507,"line_start":1567,"line_end":1567,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322512,"byte_end":322521,"line_start":1568,"line_end":1568,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1246},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":323448,"byte_end":323460,"line_start":1593,"line_end":1593,"column_start":8,"column_end":20},"name":"with_ordinal","qualname":"<NaiveDate as traits::Datelike>::with_ordinal","value":"fn with_ordinal<'_>(&'_ Self, u32) -> Option<NaiveDate>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2282},"docs":" Makes a new `NaiveDate` with the day of year (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` with the day of year (starting from 1) changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322644,"byte_end":322719,"line_start":1573,"line_end":1573,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322724,"byte_end":322727,"line_start":1574,"line_end":1574,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDate` would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322732,"byte_end":322799,"line_start":1575,"line_end":1575,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322804,"byte_end":322807,"line_start":1576,"line_end":1576,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322812,"byte_end":322825,"line_start":1577,"line_end":1577,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322830,"byte_end":322833,"line_start":1578,"line_end":1578,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322838,"byte_end":322845,"line_start":1579,"line_end":1579,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322850,"byte_end":322888,"line_start":1580,"line_end":1580,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322893,"byte_end":322896,"line_start":1581,"line_end":1581,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 1, 1).with_ordinal(60),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322901,"byte_end":322965,"line_start":1582,"line_end":1582,"column_start":5,"column_end":69}},{"value":"/            Some(NaiveDate::from_ymd(2015, 3, 1)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":322970,"byte_end":323024,"line_start":1583,"line_end":1583,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 1, 1).with_ordinal(366),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":323029,"byte_end":323094,"line_start":1584,"line_end":1584,"column_start":5,"column_end":70}},{"value":"/            None); // 2015 had only 365 days","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":323099,"byte_end":323146,"line_start":1585,"line_end":1585,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":323151,"byte_end":323154,"line_start":1586,"line_end":1586,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2016, 1, 1).with_ordinal(60),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":323159,"byte_end":323223,"line_start":1587,"line_end":1587,"column_start":5,"column_end":69}},{"value":"/            Some(NaiveDate::from_ymd(2016, 2, 29)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":323228,"byte_end":323283,"line_start":1588,"line_end":1588,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2016, 1, 1).with_ordinal(366),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":323288,"byte_end":323353,"line_start":1589,"line_end":1589,"column_start":5,"column_end":70}},{"value":"/            Some(NaiveDate::from_ymd(2016, 12, 31)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":323358,"byte_end":323414,"line_start":1590,"line_end":1590,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":323419,"byte_end":323426,"line_start":1591,"line_end":1591,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":323431,"byte_end":323440,"line_start":1592,"line_end":1592,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1247},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":324378,"byte_end":324391,"line_start":1617,"line_end":1617,"column_start":8,"column_end":21},"name":"with_ordinal0","qualname":"<NaiveDate as traits::Datelike>::with_ordinal0","value":"fn with_ordinal0<'_>(&'_ Self, u32) -> Option<NaiveDate>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2283},"docs":" Makes a new `NaiveDate` with the day of year (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` with the day of year (starting from 0) changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":323570,"byte_end":323645,"line_start":1597,"line_end":1597,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":323650,"byte_end":323653,"line_start":1598,"line_end":1598,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDate` would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":323658,"byte_end":323725,"line_start":1599,"line_end":1599,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":323730,"byte_end":323733,"line_start":1600,"line_end":1600,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":323738,"byte_end":323751,"line_start":1601,"line_end":1601,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":323756,"byte_end":323759,"line_start":1602,"line_end":1602,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":323764,"byte_end":323771,"line_start":1603,"line_end":1603,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":323776,"byte_end":323814,"line_start":1604,"line_end":1604,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":323819,"byte_end":323822,"line_start":1605,"line_end":1605,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 1, 1).with_ordinal0(59),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":323827,"byte_end":323892,"line_start":1606,"line_end":1606,"column_start":5,"column_end":70}},{"value":"/            Some(NaiveDate::from_ymd(2015, 3, 1)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":323897,"byte_end":323951,"line_start":1607,"line_end":1607,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 1, 1).with_ordinal0(365),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":323956,"byte_end":324022,"line_start":1608,"line_end":1608,"column_start":5,"column_end":71}},{"value":"/            None); // 2015 had only 365 days","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":324027,"byte_end":324074,"line_start":1609,"line_end":1609,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":324079,"byte_end":324082,"line_start":1610,"line_end":1610,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2016, 1, 1).with_ordinal0(59),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":324087,"byte_end":324152,"line_start":1611,"line_end":1611,"column_start":5,"column_end":70}},{"value":"/            Some(NaiveDate::from_ymd(2016, 2, 29)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":324157,"byte_end":324212,"line_start":1612,"line_end":1612,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2016, 1, 1).with_ordinal0(365),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":324217,"byte_end":324283,"line_start":1613,"line_end":1613,"column_start":5,"column_end":71}},{"value":"/            Some(NaiveDate::from_ymd(2016, 12, 31)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":324288,"byte_end":324344,"line_start":1614,"line_end":1614,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":324349,"byte_end":324356,"line_start":1615,"line_end":1615,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":324361,"byte_end":324370,"line_start":1616,"line_end":1616,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1250},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":325733,"byte_end":325736,"line_start":1648,"line_end":1648,"column_start":8,"column_end":11},"name":"add","qualname":"<NaiveDate as std::ops::Add>::add","value":"fn add(Self, OldDuration) -> NaiveDate","parent":{"krate":2,"index":3331},"children":[],"decl_id":{"krate":2,"index":3334},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":325716,"byte_end":325725,"line_start":1647,"line_end":1647,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1252},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":325931,"byte_end":325941,"line_start":1655,"line_end":1655,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<NaiveDate as std::ops::AddAssign>::add_assign","value":"fn add_assign<'_>(&'_ mut Self, OldDuration)","parent":{"krate":2,"index":3362},"children":[],"decl_id":{"krate":2,"index":3364},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":325914,"byte_end":325923,"line_start":1654,"line_end":1654,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1255},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":326926,"byte_end":326929,"line_start":1683,"line_end":1683,"column_start":8,"column_end":11},"name":"add","qualname":"<NaiveDate as std::ops::Add>::add","value":"fn add(Self, Months) -> Self::Output","parent":{"krate":2,"index":3331},"children":[],"decl_id":{"krate":2,"index":3334},"docs":" An addition of months to `NaiveDate` clamped to valid days in resulting month.","sig":null,"attributes":[{"value":"/ An addition of months to `NaiveDate` clamped to valid days in resulting month.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":326080,"byte_end":326162,"line_start":1663,"line_end":1663,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":326167,"byte_end":326170,"line_start":1664,"line_end":1664,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":326175,"byte_end":326187,"line_start":1665,"line_end":1665,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":326192,"byte_end":326195,"line_start":1666,"line_end":1666,"column_start":5,"column_end":8}},{"value":"/ Panics if the resulting date would be out of range.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":326200,"byte_end":326255,"line_start":1667,"line_end":1667,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":326260,"byte_end":326263,"line_start":1668,"line_end":1668,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":326268,"byte_end":326281,"line_start":1669,"line_end":1669,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":326286,"byte_end":326289,"line_start":1670,"line_end":1670,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":326294,"byte_end":326301,"line_start":1671,"line_end":1671,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Duration, NaiveDate, Months};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":326306,"byte_end":326352,"line_start":1672,"line_end":1672,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":326357,"byte_end":326360,"line_start":1673,"line_end":1673,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":326365,"byte_end":326404,"line_start":1674,"line_end":1674,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":326409,"byte_end":326412,"line_start":1675,"line_end":1675,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_ymd(2014, 1, 1) + Months::new(1), from_ymd(2014, 2, 1));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":326417,"byte_end":326493,"line_start":1676,"line_end":1676,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(from_ymd(2014, 1, 1) + Months::new(11), from_ymd(2014, 12, 1));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":326498,"byte_end":326576,"line_start":1677,"line_end":1677,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(from_ymd(2014, 1, 1) + Months::new(12), from_ymd(2015, 1, 1));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":326581,"byte_end":326658,"line_start":1678,"line_end":1678,"column_start":5,"column_end":82}},{"value":"/ assert_eq!(from_ymd(2014, 1, 1) + Months::new(13), from_ymd(2015, 2, 1));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":326663,"byte_end":326740,"line_start":1679,"line_end":1679,"column_start":5,"column_end":82}},{"value":"/ assert_eq!(from_ymd(2014, 1, 31) + Months::new(1), from_ymd(2014, 2, 28));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":326745,"byte_end":326823,"line_start":1680,"line_end":1680,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(from_ymd(2020, 1, 31) + Months::new(1), from_ymd(2020, 2, 29));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":326828,"byte_end":326906,"line_start":1681,"line_end":1681,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":326911,"byte_end":326918,"line_start":1682,"line_end":1682,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1258},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":327698,"byte_end":327701,"line_start":1708,"line_end":1708,"column_start":8,"column_end":11},"name":"sub","qualname":"<NaiveDate as std::ops::Sub>::sub","value":"fn sub(Self, Months) -> Self::Output","parent":{"krate":2,"index":3336},"children":[],"decl_id":{"krate":2,"index":3339},"docs":" A subtraction of Months from `NaiveDate` clamped to valid days in resulting month.","sig":null,"attributes":[{"value":"/ A subtraction of Months from `NaiveDate` clamped to valid days in resulting month.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":327095,"byte_end":327181,"line_start":1691,"line_end":1691,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":327186,"byte_end":327189,"line_start":1692,"line_end":1692,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":327194,"byte_end":327206,"line_start":1693,"line_end":1693,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":327211,"byte_end":327214,"line_start":1694,"line_end":1694,"column_start":5,"column_end":8}},{"value":"/ Panics if the resulting date would be out of range.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":327219,"byte_end":327274,"line_start":1695,"line_end":1695,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":327279,"byte_end":327282,"line_start":1696,"line_end":1696,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":327287,"byte_end":327300,"line_start":1697,"line_end":1697,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":327305,"byte_end":327308,"line_start":1698,"line_end":1698,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":327313,"byte_end":327320,"line_start":1699,"line_end":1699,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Duration, NaiveDate, Months};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":327325,"byte_end":327371,"line_start":1700,"line_end":1700,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":327376,"byte_end":327379,"line_start":1701,"line_end":1701,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":327384,"byte_end":327423,"line_start":1702,"line_end":1702,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":327428,"byte_end":327431,"line_start":1703,"line_end":1703,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_ymd(2014, 1, 1) - Months::new(11), from_ymd(2013, 2, 1));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":327436,"byte_end":327513,"line_start":1704,"line_end":1704,"column_start":5,"column_end":82}},{"value":"/ assert_eq!(from_ymd(2014, 1, 1) - Months::new(12), from_ymd(2013, 1, 1));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":327518,"byte_end":327595,"line_start":1705,"line_end":1705,"column_start":5,"column_end":82}},{"value":"/ assert_eq!(from_ymd(2014, 1, 1) - Months::new(13), from_ymd(2012, 12, 1));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":327600,"byte_end":327678,"line_start":1706,"line_end":1706,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":327683,"byte_end":327690,"line_start":1707,"line_end":1707,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1261},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":329092,"byte_end":329095,"line_start":1740,"line_end":1740,"column_start":8,"column_end":11},"name":"sub","qualname":"<NaiveDate as std::ops::Sub>::sub","value":"fn sub(Self, OldDuration) -> NaiveDate","parent":{"krate":2,"index":3336},"children":[],"decl_id":{"krate":2,"index":3339},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":329075,"byte_end":329084,"line_start":1739,"line_end":1739,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1263},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":329290,"byte_end":329300,"line_start":1747,"line_end":1747,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<NaiveDate as std::ops::SubAssign>::sub_assign","value":"fn sub_assign<'_>(&'_ mut Self, OldDuration)","parent":{"krate":2,"index":3366},"children":[],"decl_id":{"krate":2,"index":3368},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":329273,"byte_end":329282,"line_start":1746,"line_end":1746,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1266},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330507,"byte_end":330510,"line_start":1780,"line_end":1780,"column_start":8,"column_end":11},"name":"sub","qualname":"<NaiveDate as std::ops::Sub>::sub","value":"fn sub(Self, NaiveDate) -> OldDuration","parent":{"krate":2,"index":3336},"children":[],"decl_id":{"krate":2,"index":3339},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330490,"byte_end":330499,"line_start":1779,"line_end":1779,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2679},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330737,"byte_end":330758,"line_start":1787,"line_end":1787,"column_start":12,"column_end":33},"name":"NaiveDateDaysIterator","qualname":"::naive::date::NaiveDateDaysIterator","value":"NaiveDateDaysIterator {  }","parent":null,"children":[{"krate":0,"index":2680}],"decl_id":null,"docs":" Iterator over `NaiveDate` with a step size of one day.\n","sig":null,"attributes":[{"value":"/ Iterator over `NaiveDate` with a step size of one day.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330599,"byte_end":330657,"line_start":1785,"line_end":1785,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1269},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330863,"byte_end":330867,"line_start":1794,"line_end":1794,"column_start":8,"column_end":12},"name":"next","qualname":"<NaiveDateDaysIterator as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1270},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331202,"byte_end":331211,"line_start":1805,"line_end":1805,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<NaiveDateDaysIterator as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1273},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331512,"byte_end":331521,"line_start":1814,"line_end":1814,"column_start":8,"column_end":17},"name":"next_back","qualname":"<NaiveDateDaysIterator as std::iter::DoubleEndedIterator>::next_back","value":"fn next_back<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8449},"children":[],"decl_id":{"krate":2,"index":8450},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2700},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331815,"byte_end":331837,"line_start":1825,"line_end":1825,"column_start":12,"column_end":34},"name":"NaiveDateWeeksIterator","qualname":"::naive::date::NaiveDateWeeksIterator","value":"NaiveDateWeeksIterator {  }","parent":null,"children":[{"krate":0,"index":2701}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1276},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331943,"byte_end":331947,"line_start":1832,"line_end":1832,"column_start":8,"column_end":12},"name":"next","qualname":"<NaiveDateWeeksIterator as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1277},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":332207,"byte_end":332216,"line_start":1841,"line_end":1841,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<NaiveDateWeeksIterator as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1280},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":332520,"byte_end":332529,"line_start":1850,"line_end":1850,"column_start":8,"column_end":17},"name":"next_back","qualname":"<NaiveDateWeeksIterator as std::iter::DoubleEndedIterator>::next_back","value":"fn next_back<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8449},"children":[],"decl_id":{"krate":2,"index":8450},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1282},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":333841,"byte_end":333844,"line_start":1887,"line_end":1887,"column_start":8,"column_end":11},"name":"fmt","qualname":"<NaiveDate as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10293},"children":[],"decl_id":{"krate":2,"index":10294},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1284},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":335106,"byte_end":335109,"line_start":1922,"line_end":1922,"column_start":8,"column_end":11},"name":"fmt","qualname":"<NaiveDate as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10300},"children":[],"decl_id":{"krate":2,"index":10301},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1287},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":335743,"byte_end":335751,"line_start":1946,"line_end":1946,"column_start":8,"column_end":16},"name":"from_str","qualname":"<NaiveDate as std::str::FromStr>::from_str","value":"fn from_str<'_>(&'_ str) -> ParseResult<NaiveDate>","parent":{"krate":2,"index":12994},"children":[],"decl_id":{"krate":2,"index":12996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1290},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":336559,"byte_end":336566,"line_start":1975,"line_end":1975,"column_start":8,"column_end":15},"name":"default","qualname":"<NaiveDate as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1386},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":370859,"byte_end":370871,"line_start":44,"line_end":44,"column_start":11,"column_end":23},"name":"MIN_DATETIME","qualname":"::naive::datetime::MIN_DATETIME","value":"NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDateTime`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `NaiveDateTime`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":370734,"byte_end":370775,"line_start":42,"line_end":42,"column_start":1,"column_end":42}},{"value":"deprecated(since = \"0.4.20\", note = \"Use NaiveDateTime::MIN instead\")","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":370776,"byte_end":370848,"line_start":43,"line_end":43,"column_start":1,"column_end":73}}]},{"kind":"Const","id":{"krate":0,"index":1387},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371034,"byte_end":371046,"line_start":47,"line_end":47,"column_start":11,"column_end":23},"name":"MAX_DATETIME","qualname":"::naive::datetime::MAX_DATETIME","value":"NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDateTime`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `NaiveDateTime`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":370909,"byte_end":370950,"line_start":45,"line_end":45,"column_start":1,"column_end":42}},{"value":"deprecated(since = \"0.4.20\", note = \"Use NaiveDateTime::MAX instead\")","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":370951,"byte_end":371023,"line_start":46,"line_end":46,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":2721},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":372022,"byte_end":372035,"line_start":76,"line_end":76,"column_start":12,"column_end":25},"name":"NaiveDateTime","qualname":"::naive::datetime::NaiveDateTime","value":"NaiveDateTime {  }","parent":null,"children":[{"krate":0,"index":2722},{"krate":0,"index":2723}],"decl_id":null,"docs":" ISO 8601 combined date and time without timezone.","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time without timezone.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371085,"byte_end":371138,"line_start":49,"line_end":49,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371139,"byte_end":371142,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371143,"byte_end":371156,"line_start":51,"line_end":51,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371157,"byte_end":371160,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ `NaiveDateTime` is commonly created from [`NaiveDate`](./struct.NaiveDate.html).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371161,"byte_end":371245,"line_start":53,"line_end":53,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371246,"byte_end":371249,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371250,"byte_end":371257,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371258,"byte_end":371301,"line_start":56,"line_end":56,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371302,"byte_end":371305,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371306,"byte_end":371385,"line_start":58,"line_end":58,"column_start":1,"column_end":80}},{"value":"/ # let _ = dt;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371386,"byte_end":371403,"line_start":59,"line_end":59,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371404,"byte_end":371411,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371412,"byte_end":371415,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ You can use typical [date-like](../trait.Datelike.html) and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371416,"byte_end":371479,"line_start":62,"line_end":62,"column_start":1,"column_end":64}},{"value":"/ [time-like](../trait.Timelike.html) methods,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371480,"byte_end":371528,"line_start":63,"line_end":63,"column_start":1,"column_end":49}},{"value":"/ provided that relevant traits are in the scope.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371529,"byte_end":371580,"line_start":64,"line_end":64,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371581,"byte_end":371584,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371585,"byte_end":371592,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/ # use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371593,"byte_end":371638,"line_start":67,"line_end":67,"column_start":1,"column_end":46}},{"value":"/ # let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371639,"byte_end":371720,"line_start":68,"line_end":68,"column_start":1,"column_end":82}},{"value":"/ use chrono::{Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371721,"byte_end":371767,"line_start":69,"line_end":69,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371768,"byte_end":371771,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371772,"byte_end":371815,"line_start":71,"line_end":71,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(dt.num_seconds_from_midnight(), 33011);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371816,"byte_end":371870,"line_start":72,"line_end":72,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":371871,"byte_end":371878,"line_start":73,"line_end":73,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1389},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":372695,"byte_end":372698,"line_start":99,"line_end":99,"column_start":12,"column_end":15},"name":"new","qualname":"<NaiveDateTime>::new","value":"fn new(NaiveDate, NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from date and time components.\n Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)\n and many other helper constructors on `NaiveDate`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from date and time components.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":372108,"byte_end":372170,"line_start":82,"line_end":82,"column_start":5,"column_end":67}},{"value":"/ Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":372175,"byte_end":372257,"line_start":83,"line_end":83,"column_start":5,"column_end":87}},{"value":"/ and many other helper constructors on `NaiveDate`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":372262,"byte_end":372316,"line_start":84,"line_end":84,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":372321,"byte_end":372324,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":372329,"byte_end":372342,"line_start":86,"line_end":86,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":372347,"byte_end":372350,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":372355,"byte_end":372362,"line_start":88,"line_end":88,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveTime, NaiveDateTime};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":372367,"byte_end":372421,"line_start":89,"line_end":89,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":372426,"byte_end":372429,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":372434,"byte_end":372478,"line_start":91,"line_end":91,"column_start":5,"column_end":49}},{"value":"/ let t = NaiveTime::from_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":372483,"byte_end":372538,"line_start":92,"line_end":92,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":372543,"byte_end":372546,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::new(d, t);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":372551,"byte_end":372589,"line_start":94,"line_end":94,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(dt.date(), d);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":372594,"byte_end":372623,"line_start":95,"line_end":95,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dt.time(), t);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":372628,"byte_end":372657,"line_start":96,"line_end":96,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":372662,"byte_end":372669,"line_start":97,"line_end":97,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":372674,"byte_end":372683,"line_start":98,"line_end":98,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1390},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":373967,"byte_end":373981,"line_start":129,"line_end":129,"column_start":12,"column_end":26},"name":"from_timestamp","qualname":"<NaiveDateTime>::from_timestamp","value":"fn from_timestamp(i64, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` corresponding to a UTC date and time,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":372800,"byte_end":372869,"line_start":103,"line_end":103,"column_start":5,"column_end":74}},{"value":"/ from the number of non-leap seconds","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":372874,"byte_end":372913,"line_start":104,"line_end":104,"column_start":5,"column_end":44}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":372918,"byte_end":372986,"line_start":105,"line_end":105,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":372991,"byte_end":373062,"line_start":106,"line_end":106,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":373067,"byte_end":373070,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ For a non-naive version of this function see","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":373075,"byte_end":373123,"line_start":108,"line_end":108,"column_start":5,"column_end":53}},{"value":"/ [`TimeZone::timestamp`](../offset/trait.TimeZone.html#method.timestamp).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":373128,"byte_end":373204,"line_start":109,"line_end":109,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":373209,"byte_end":373212,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":373217,"byte_end":373291,"line_start":111,"line_end":111,"column_start":5,"column_end":79}},{"value":"/ [leap second](./struct.NaiveTime.html#leap-second-handling). (The true \"UNIX","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":373296,"byte_end":373376,"line_start":112,"line_end":112,"column_start":5,"column_end":85}},{"value":"/ timestamp\" cannot represent a leap second unambiguously.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":373381,"byte_end":373442,"line_start":113,"line_end":113,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":373447,"byte_end":373450,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":373455,"byte_end":373530,"line_start":115,"line_end":115,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":373535,"byte_end":373538,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":373543,"byte_end":373556,"line_start":117,"line_end":117,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":373561,"byte_end":373564,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":373569,"byte_end":373576,"line_start":119,"line_end":119,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":373581,"byte_end":373624,"line_start":120,"line_end":120,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":373629,"byte_end":373632,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::from_timestamp(0, 42_000_000);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":373637,"byte_end":373695,"line_start":122,"line_end":122,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(dt, NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 0, 42));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":373700,"byte_end":373779,"line_start":123,"line_end":123,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":373784,"byte_end":373787,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::from_timestamp(1_000_000_000, 0);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":373792,"byte_end":373853,"line_start":125,"line_end":125,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt, NaiveDate::from_ymd(2001, 9, 9).and_hms(1, 46, 40));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":373858,"byte_end":373929,"line_start":126,"line_end":126,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":373934,"byte_end":373941,"line_start":127,"line_end":127,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":373946,"byte_end":373955,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1391},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":375321,"byte_end":375339,"line_start":160,"line_end":160,"column_start":12,"column_end":30},"name":"from_timestamp_opt","qualname":"<NaiveDateTime>::from_timestamp_opt","value":"fn from_timestamp_opt(i64, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` corresponding to a UTC date and time,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":374166,"byte_end":374235,"line_start":134,"line_end":134,"column_start":5,"column_end":74}},{"value":"/ from the number of non-leap seconds","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":374240,"byte_end":374279,"line_start":135,"line_end":135,"column_start":5,"column_end":44}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":374284,"byte_end":374352,"line_start":136,"line_end":136,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":374357,"byte_end":374428,"line_start":137,"line_end":137,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":374433,"byte_end":374436,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":374441,"byte_end":374489,"line_start":139,"line_end":139,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":374494,"byte_end":374584,"line_start":140,"line_end":140,"column_start":5,"column_end":95}},{"value":"/ (The true \"UNIX timestamp\" cannot represent a leap second unambiguously.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":374589,"byte_end":374666,"line_start":141,"line_end":141,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":374671,"byte_end":374674,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":374679,"byte_end":374762,"line_start":143,"line_end":143,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":374767,"byte_end":374770,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":374775,"byte_end":374788,"line_start":145,"line_end":145,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":374793,"byte_end":374796,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":374801,"byte_end":374808,"line_start":147,"line_end":147,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":374813,"byte_end":374856,"line_start":148,"line_end":148,"column_start":5,"column_end":48}},{"value":"/ use std::i64;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":374861,"byte_end":374878,"line_start":149,"line_end":149,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":374883,"byte_end":374886,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ let from_timestamp_opt = NaiveDateTime::from_timestamp_opt;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":374891,"byte_end":374954,"line_start":151,"line_end":151,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":374959,"byte_end":374962,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ assert!(from_timestamp_opt(0, 0).is_some());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":374967,"byte_end":375015,"line_start":153,"line_end":153,"column_start":5,"column_end":53}},{"value":"/ assert!(from_timestamp_opt(0, 999_999_999).is_some());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":375020,"byte_end":375078,"line_start":154,"line_end":154,"column_start":5,"column_end":63}},{"value":"/ assert!(from_timestamp_opt(0, 1_500_000_000).is_some()); // leap second","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":375083,"byte_end":375158,"line_start":155,"line_end":155,"column_start":5,"column_end":80}},{"value":"/ assert!(from_timestamp_opt(0, 2_000_000_000).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":375163,"byte_end":375223,"line_start":156,"line_end":156,"column_start":5,"column_end":65}},{"value":"/ assert!(from_timestamp_opt(i64::MAX, 0).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":375228,"byte_end":375283,"line_start":157,"line_end":157,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":375288,"byte_end":375295,"line_start":158,"line_end":158,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":375300,"byte_end":375309,"line_start":159,"line_end":159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1393},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":378702,"byte_end":378716,"line_start":234,"line_end":234,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDateTime>::parse_from_str","value":"fn parse_from_str<'_, '_>(&'_ str, &'_ str) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDateTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDateTime`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":375849,"byte_end":375936,"line_start":173,"line_end":173,"column_start":5,"column_end":92}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":375941,"byte_end":376011,"line_start":174,"line_end":174,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":376016,"byte_end":376054,"line_start":175,"line_end":175,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":376059,"byte_end":376062,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":376067,"byte_end":376080,"line_start":177,"line_end":177,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":376085,"byte_end":376088,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":376093,"byte_end":376100,"line_start":179,"line_end":179,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":376105,"byte_end":376148,"line_start":180,"line_end":180,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":376153,"byte_end":376156,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":376161,"byte_end":376216,"line_start":182,"line_end":182,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":376221,"byte_end":376224,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"2015-09-05 23:56:04\", \"%Y-%m-%d %H:%M:%S\"),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":376229,"byte_end":376303,"line_start":184,"line_end":184,"column_start":5,"column_end":79}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":376308,"byte_end":376379,"line_start":185,"line_end":185,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(parse_from_str(\"5sep2015pm012345.6789\", \"%d%b%Y%p%I%M%S%.f\"),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":376384,"byte_end":376460,"line_start":186,"line_end":186,"column_start":5,"column_end":81}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5).and_hms_micro(13, 23, 45, 678_900)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":376465,"byte_end":376552,"line_start":187,"line_end":187,"column_start":5,"column_end":92}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":376557,"byte_end":376564,"line_start":188,"line_end":188,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":376569,"byte_end":376572,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ Offset is ignored for the purpose of parsing.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":376577,"byte_end":376626,"line_start":190,"line_end":190,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":376631,"byte_end":376634,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":376639,"byte_end":376646,"line_start":192,"line_end":192,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":376651,"byte_end":376696,"line_start":193,"line_end":193,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":376701,"byte_end":376758,"line_start":194,"line_end":194,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":376763,"byte_end":376844,"line_start":195,"line_end":195,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2014, 5, 17).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":376849,"byte_end":376922,"line_start":196,"line_end":196,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":376927,"byte_end":376934,"line_start":197,"line_end":197,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":376939,"byte_end":376942,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ [Leap seconds](./struct.NaiveTime.html#leap-second-handling) are correctly handled by","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":376947,"byte_end":377036,"line_start":199,"line_end":199,"column_start":5,"column_end":94}},{"value":"/ treating any time of the form `hh:mm:60` as a leap second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":377041,"byte_end":377103,"line_start":200,"line_end":200,"column_start":5,"column_end":67}},{"value":"/ (This equally applies to the formatting, so the round trip is possible.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":377108,"byte_end":377184,"line_start":201,"line_end":201,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":377189,"byte_end":377192,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":377197,"byte_end":377204,"line_start":203,"line_end":203,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":377209,"byte_end":377254,"line_start":204,"line_end":204,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":377259,"byte_end":377316,"line_start":205,"line_end":205,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"2015-07-01 08:59:60.123\", \"%Y-%m-%d %H:%M:%S%.f\"),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":377321,"byte_end":377402,"line_start":206,"line_end":206,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 7, 1).and_hms_milli(8, 59, 59, 1_123)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":377407,"byte_end":377491,"line_start":207,"line_end":207,"column_start":5,"column_end":89}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":377496,"byte_end":377503,"line_start":208,"line_end":208,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":377508,"byte_end":377511,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ Missing seconds are assumed to be zero,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":377516,"byte_end":377559,"line_start":210,"line_end":210,"column_start":5,"column_end":48}},{"value":"/ but out-of-bound times or insufficient fields are errors otherwise.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":377564,"byte_end":377635,"line_start":211,"line_end":211,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":377640,"byte_end":377643,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":377648,"byte_end":377655,"line_start":213,"line_end":213,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":377660,"byte_end":377705,"line_start":214,"line_end":214,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":377710,"byte_end":377767,"line_start":215,"line_end":215,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"94/9/4 7:15\", \"%y/%m/%d %H:%M\"),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":377772,"byte_end":377835,"line_start":216,"line_end":216,"column_start":5,"column_end":68}},{"value":"/            Ok(NaiveDate::from_ymd(1994, 9, 4).and_hms(7, 15, 0)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":377840,"byte_end":377910,"line_start":217,"line_end":217,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":377915,"byte_end":377918,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":377923,"byte_end":377980,"line_start":219,"line_end":219,"column_start":5,"column_end":62}},{"value":"/ assert!(parse_from_str(\"94/9/4 12\", \"%y/%m/%d %H\").is_err());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":377985,"byte_end":378050,"line_start":220,"line_end":220,"column_start":5,"column_end":70}},{"value":"/ assert!(parse_from_str(\"94/9/4 17:60\", \"%y/%m/%d %H:%M\").is_err());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":378055,"byte_end":378126,"line_start":221,"line_end":221,"column_start":5,"column_end":76}},{"value":"/ assert!(parse_from_str(\"94/9/4 24:00:00\", \"%y/%m/%d %H:%M:%S\").is_err());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":378131,"byte_end":378208,"line_start":222,"line_end":222,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":378213,"byte_end":378220,"line_start":223,"line_end":223,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":378225,"byte_end":378228,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":378233,"byte_end":378315,"line_start":225,"line_end":225,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":378320,"byte_end":378323,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":378328,"byte_end":378335,"line_start":227,"line_end":227,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDateTime;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":378340,"byte_end":378372,"line_start":228,"line_end":228,"column_start":5,"column_end":37}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":378377,"byte_end":378434,"line_start":229,"line_end":229,"column_start":5,"column_end":62}},{"value":"/ let fmt = \"%Y-%m-%d %H:%M:%S = UNIX timestamp %s\";","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":378439,"byte_end":378493,"line_start":230,"line_end":230,"column_start":5,"column_end":59}},{"value":"/ assert!(parse_from_str(\"2001-09-09 01:46:39 = UNIX timestamp 999999999\", fmt).is_ok());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":378498,"byte_end":378589,"line_start":231,"line_end":231,"column_start":5,"column_end":96}},{"value":"/ assert!(parse_from_str(\"1970-01-01 00:00:00 = UNIX timestamp 1\", fmt).is_err());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":378594,"byte_end":378678,"line_start":232,"line_end":232,"column_start":5,"column_end":89}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":378683,"byte_end":378690,"line_start":233,"line_end":233,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1394},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379236,"byte_end":379240,"line_start":251,"line_end":251,"column_start":12,"column_end":16},"name":"date","qualname":"<NaiveDateTime>::date","value":"fn date<'_>(&'_ Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.","sig":null,"attributes":[{"value":"/ Retrieves a date component.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":378949,"byte_end":378980,"line_start":240,"line_end":240,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":378985,"byte_end":378988,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":378993,"byte_end":379006,"line_start":242,"line_end":242,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379011,"byte_end":379014,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379019,"byte_end":379026,"line_start":244,"line_end":244,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379031,"byte_end":379057,"line_start":245,"line_end":245,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379062,"byte_end":379065,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379070,"byte_end":379134,"line_start":247,"line_end":247,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.date(), NaiveDate::from_ymd(2016, 7, 8));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379139,"byte_end":379198,"line_start":248,"line_end":248,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379203,"byte_end":379210,"line_start":249,"line_end":249,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379215,"byte_end":379224,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1395},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379591,"byte_end":379595,"line_start":266,"line_end":266,"column_start":12,"column_end":16},"name":"time","qualname":"<NaiveDateTime>::time","value":"fn time<'_>(&'_ Self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379292,"byte_end":379323,"line_start":255,"line_end":255,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379328,"byte_end":379331,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379336,"byte_end":379349,"line_start":257,"line_end":257,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379354,"byte_end":379357,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379362,"byte_end":379369,"line_start":259,"line_end":259,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveTime};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379374,"byte_end":379413,"line_start":260,"line_end":260,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379418,"byte_end":379421,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379426,"byte_end":379490,"line_start":262,"line_end":262,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.time(), NaiveTime::from_hms(9, 10, 11));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379495,"byte_end":379553,"line_start":263,"line_end":263,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379558,"byte_end":379565,"line_start":264,"line_end":264,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379570,"byte_end":379579,"line_start":265,"line_end":265,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1396},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":380500,"byte_end":380509,"line_start":293,"line_end":293,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<NaiveDateTime>::timestamp","value":"fn timestamp<'_>(&'_ Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since the midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since the midnight on January 1, 1970.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379647,"byte_end":379728,"line_start":270,"line_end":270,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379733,"byte_end":379736,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379741,"byte_end":379796,"line_start":272,"line_end":272,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379801,"byte_end":379889,"line_start":273,"line_end":273,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379894,"byte_end":379897,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379902,"byte_end":379915,"line_start":275,"line_end":275,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379920,"byte_end":379923,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379928,"byte_end":379935,"line_start":277,"line_end":277,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379940,"byte_end":379966,"line_start":278,"line_end":278,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379971,"byte_end":379974,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 980);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":379979,"byte_end":380052,"line_start":280,"line_end":280,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp(), 1);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":380057,"byte_end":380091,"line_start":281,"line_end":281,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":380096,"byte_end":380099,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms(1, 46, 40);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":380104,"byte_end":380168,"line_start":283,"line_end":283,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.timestamp(), 1_000_000_000);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":380173,"byte_end":380219,"line_start":284,"line_end":284,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":380224,"byte_end":380227,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1969, 12, 31).and_hms(23, 59, 59);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":380232,"byte_end":380299,"line_start":286,"line_end":286,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(dt.timestamp(), -1);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":380304,"byte_end":380339,"line_start":287,"line_end":287,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":380344,"byte_end":380347,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(-1, 1, 1).and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":380352,"byte_end":380412,"line_start":289,"line_end":289,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(dt.timestamp(), -62198755200);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":380417,"byte_end":380462,"line_start":290,"line_end":290,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":380467,"byte_end":380474,"line_start":291,"line_end":291,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":380479,"byte_end":380488,"line_start":292,"line_end":292,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":381885,"byte_end":381901,"line_start":325,"line_end":325,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<NaiveDateTime>::timestamp_millis","value":"fn timestamp_millis<'_>(&'_ Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":380811,"byte_end":380895,"line_start":300,"line_end":300,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":380900,"byte_end":380903,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":380908,"byte_end":380963,"line_start":302,"line_end":302,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":380968,"byte_end":381056,"line_start":303,"line_end":303,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":381061,"byte_end":381064,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ Note also that this does reduce the number of years that can be","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":381069,"byte_end":381136,"line_start":305,"line_end":305,"column_start":5,"column_end":72}},{"value":"/ represented from ~584 Billion to ~584 Million. (If this is a problem,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":381141,"byte_end":381214,"line_start":306,"line_end":306,"column_start":5,"column_end":78}},{"value":"/ please file an issue to let me know what domain needs millisecond","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":381219,"byte_end":381288,"line_start":307,"line_end":307,"column_start":5,"column_end":74}},{"value":"/ precision over billions of years, I'm curious.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":381293,"byte_end":381344,"line_start":308,"line_end":308,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":381349,"byte_end":381352,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":381357,"byte_end":381370,"line_start":310,"line_end":310,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":381375,"byte_end":381378,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":381383,"byte_end":381390,"line_start":312,"line_end":312,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":381395,"byte_end":381421,"line_start":313,"line_end":313,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":381426,"byte_end":381429,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 444);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":381434,"byte_end":381507,"line_start":315,"line_end":315,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_444);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":381512,"byte_end":381557,"line_start":316,"line_end":316,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":381562,"byte_end":381565,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms_milli(1, 46, 40, 555);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":381570,"byte_end":381645,"line_start":318,"line_end":318,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_000_000_000_555);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":381650,"byte_end":381707,"line_start":319,"line_end":319,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":381712,"byte_end":381715,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1969, 12, 31).and_hms_milli(23, 59, 59, 100);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":381720,"byte_end":381798,"line_start":321,"line_end":321,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(dt.timestamp_millis(), -900);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":381803,"byte_end":381847,"line_start":322,"line_end":322,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":381852,"byte_end":381859,"line_start":323,"line_end":323,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":381864,"byte_end":381873,"line_start":324,"line_end":324,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1399},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":382967,"byte_end":382983,"line_start":352,"line_end":352,"column_start":12,"column_end":28},"name":"timestamp_micros","qualname":"<NaiveDateTime>::timestamp_micros","value":"fn timestamp_micros<'_>(&'_ Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *microseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap *microseconds* since midnight on January 1, 1970.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":382032,"byte_end":382116,"line_start":330,"line_end":330,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":382121,"byte_end":382124,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":382129,"byte_end":382184,"line_start":332,"line_end":332,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":382189,"byte_end":382277,"line_start":333,"line_end":333,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":382282,"byte_end":382285,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ Note also that this does reduce the number of years that can be","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":382290,"byte_end":382357,"line_start":335,"line_end":335,"column_start":5,"column_end":72}},{"value":"/ represented from ~584 Billion to ~584 Thousand. (If this is a problem,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":382362,"byte_end":382436,"line_start":336,"line_end":336,"column_start":5,"column_end":79}},{"value":"/ please file an issue to let me know what domain needs microsecond","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":382441,"byte_end":382510,"line_start":337,"line_end":337,"column_start":5,"column_end":74}},{"value":"/ precision over millennia, I'm curious.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":382515,"byte_end":382558,"line_start":338,"line_end":338,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":382563,"byte_end":382566,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":382571,"byte_end":382584,"line_start":340,"line_end":340,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":382589,"byte_end":382592,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":382597,"byte_end":382604,"line_start":342,"line_end":342,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":382609,"byte_end":382635,"line_start":343,"line_end":343,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":382640,"byte_end":382643,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_micro(0, 0, 1, 444);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":382648,"byte_end":382721,"line_start":345,"line_end":345,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp_micros(), 1_000_444);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":382726,"byte_end":382775,"line_start":346,"line_end":346,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":382780,"byte_end":382783,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms_micro(1, 46, 40, 555);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":382788,"byte_end":382863,"line_start":348,"line_end":348,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(dt.timestamp_micros(), 1_000_000_000_000_555);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":382868,"byte_end":382929,"line_start":349,"line_end":349,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":382934,"byte_end":382941,"line_start":350,"line_end":350,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":382946,"byte_end":382955,"line_start":351,"line_end":351,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1400},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":384454,"byte_end":384469,"line_start":391,"line_end":391,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<NaiveDateTime>::timestamp_nanos","value":"fn timestamp_nanos<'_>(&'_ Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":383119,"byte_end":383202,"line_start":357,"line_end":357,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":383207,"byte_end":383210,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":383215,"byte_end":383270,"line_start":359,"line_end":359,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":383275,"byte_end":383363,"line_start":360,"line_end":360,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":383368,"byte_end":383371,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":383376,"byte_end":383388,"line_start":362,"line_end":362,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":383393,"byte_end":383396,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ Note also that this does reduce the number of years that can be","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":383401,"byte_end":383468,"line_start":364,"line_end":364,"column_start":5,"column_end":72}},{"value":"/ represented from ~584 Billion to ~584 years. The dates that can be","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":383473,"byte_end":383543,"line_start":365,"line_end":365,"column_start":5,"column_end":75}},{"value":"/ represented as nanoseconds are between 1677-09-21T00:12:44.0 and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":383548,"byte_end":383616,"line_start":366,"line_end":366,"column_start":5,"column_end":73}},{"value":"/ 2262-04-11T23:47:16.854775804.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":383621,"byte_end":383655,"line_start":367,"line_end":367,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":383660,"byte_end":383663,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ (If this is a problem, please file an issue to let me know what domain","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":383668,"byte_end":383742,"line_start":369,"line_end":369,"column_start":5,"column_end":79}},{"value":"/ needs nanosecond precision over millennia, I'm curious.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":383747,"byte_end":383807,"line_start":370,"line_end":370,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":383812,"byte_end":383815,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":383820,"byte_end":383833,"line_start":372,"line_end":372,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":383838,"byte_end":383841,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":383846,"byte_end":383853,"line_start":374,"line_end":374,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":383858,"byte_end":383901,"line_start":375,"line_end":375,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":383906,"byte_end":383909,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_nano(0, 0, 1, 444);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":383914,"byte_end":383986,"line_start":377,"line_end":377,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_444);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":383991,"byte_end":384043,"line_start":378,"line_end":378,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":384048,"byte_end":384051,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms_nano(1, 46, 40, 555);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":384056,"byte_end":384130,"line_start":380,"line_end":380,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":384135,"byte_end":384138,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ const A_BILLION: i64 = 1_000_000_000;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":384143,"byte_end":384184,"line_start":382,"line_end":382,"column_start":5,"column_end":46}},{"value":"/ let nanos = dt.timestamp_nanos();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":384189,"byte_end":384226,"line_start":383,"line_end":383,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(nanos, 1_000_000_000_000_000_555);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":384231,"byte_end":384280,"line_start":384,"line_end":384,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":384285,"byte_end":384300,"line_start":385,"line_end":385,"column_start":5,"column_end":20}},{"value":"/     dt,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":384305,"byte_end":384316,"line_start":386,"line_end":386,"column_start":5,"column_end":16}},{"value":"/     NaiveDateTime::from_timestamp(nanos / A_BILLION, (nanos % A_BILLION) as u32)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":384321,"byte_end":384405,"line_start":387,"line_end":387,"column_start":5,"column_end":89}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":384410,"byte_end":384416,"line_start":388,"line_end":388,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":384421,"byte_end":384428,"line_start":389,"line_end":389,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":384433,"byte_end":384442,"line_start":390,"line_end":390,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1401},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":385245,"byte_end":385268,"line_start":413,"line_end":413,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<NaiveDateTime>::timestamp_subsec_millis","value":"fn timestamp_subsec_millis<'_>(&'_ Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":384608,"byte_end":384684,"line_start":396,"line_end":396,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":384689,"byte_end":384692,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":384697,"byte_end":384739,"line_start":398,"line_end":398,"column_start":5,"column_end":47}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":384744,"byte_end":384826,"line_start":399,"line_end":399,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":384831,"byte_end":384834,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":384839,"byte_end":384852,"line_start":401,"line_end":401,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":384857,"byte_end":384860,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":384865,"byte_end":384872,"line_start":403,"line_end":403,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":384877,"byte_end":384903,"line_start":404,"line_end":404,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":384908,"byte_end":384911,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":384916,"byte_end":384998,"line_start":406,"line_end":406,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_millis(), 123);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":385003,"byte_end":385053,"line_start":407,"line_end":407,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":385058,"byte_end":385061,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":385066,"byte_end":385150,"line_start":409,"line_end":409,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_millis(), 1_234);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":385155,"byte_end":385207,"line_start":410,"line_end":410,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":385212,"byte_end":385219,"line_start":411,"line_end":411,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":385224,"byte_end":385233,"line_start":412,"line_end":412,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1402},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":385999,"byte_end":386022,"line_start":434,"line_end":434,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<NaiveDateTime>::timestamp_subsec_micros","value":"fn timestamp_subsec_micros<'_>(&'_ Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":385346,"byte_end":385422,"line_start":417,"line_end":417,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":385427,"byte_end":385430,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":385435,"byte_end":385481,"line_start":419,"line_end":419,"column_start":5,"column_end":51}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":385486,"byte_end":385572,"line_start":420,"line_end":420,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":385577,"byte_end":385580,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":385585,"byte_end":385598,"line_start":422,"line_end":422,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":385603,"byte_end":385606,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":385611,"byte_end":385618,"line_start":424,"line_end":424,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":385623,"byte_end":385649,"line_start":425,"line_end":425,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":385654,"byte_end":385657,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":385662,"byte_end":385744,"line_start":427,"line_end":427,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_micros(), 123_456);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":385749,"byte_end":385803,"line_start":428,"line_end":428,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":385808,"byte_end":385811,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":385816,"byte_end":385900,"line_start":430,"line_end":430,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_micros(), 1_234_567);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":385905,"byte_end":385961,"line_start":431,"line_end":431,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":385966,"byte_end":385973,"line_start":432,"line_end":432,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":385978,"byte_end":385987,"line_start":433,"line_end":433,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1403},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":386762,"byte_end":386784,"line_start":455,"line_end":455,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<NaiveDateTime>::timestamp_subsec_nanos","value":"fn timestamp_subsec_nanos<'_>(&'_ Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":386096,"byte_end":386171,"line_start":438,"line_end":438,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":386176,"byte_end":386179,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,999,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":386184,"byte_end":386234,"line_start":440,"line_end":440,"column_start":5,"column_end":55}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999,999.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":386239,"byte_end":386329,"line_start":441,"line_end":441,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":386334,"byte_end":386337,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":386342,"byte_end":386355,"line_start":443,"line_end":443,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":386360,"byte_end":386363,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":386368,"byte_end":386375,"line_start":445,"line_end":445,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":386380,"byte_end":386406,"line_start":446,"line_end":446,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":386411,"byte_end":386414,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":386419,"byte_end":386501,"line_start":448,"line_end":448,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_nanos(), 123_456_789);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":386506,"byte_end":386563,"line_start":449,"line_end":449,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":386568,"byte_end":386571,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":386576,"byte_end":386660,"line_start":451,"line_end":451,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_nanos(), 1_234_567_890);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":386665,"byte_end":386724,"line_start":452,"line_end":452,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":386729,"byte_end":386736,"line_start":453,"line_end":453,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":386741,"byte_end":386750,"line_start":454,"line_end":454,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":389883,"byte_end":389901,"line_start":524,"line_end":524,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDateTime>::checked_add_signed","value":"fn checked_add_signed(Self, OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":386843,"byte_end":386898,"line_start":459,"line_end":459,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":386903,"byte_end":386906,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":386911,"byte_end":387006,"line_start":461,"line_end":461,"column_start":5,"column_end":100}},{"value":"/ the addition assumes that **there is no leap second ever**,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":387011,"byte_end":387074,"line_start":462,"line_end":462,"column_start":5,"column_end":68}},{"value":"/ except when the `NaiveDateTime` itself represents a leap second","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":387079,"byte_end":387146,"line_start":463,"line_end":463,"column_start":5,"column_end":72}},{"value":"/ in which case the assumption becomes that **there is exactly a single leap second ever**.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":387151,"byte_end":387244,"line_start":464,"line_end":464,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":387249,"byte_end":387252,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":387257,"byte_end":387308,"line_start":466,"line_end":466,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":387313,"byte_end":387316,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":387321,"byte_end":387334,"line_start":468,"line_end":468,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":387339,"byte_end":387342,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":387347,"byte_end":387354,"line_start":470,"line_end":470,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":387359,"byte_end":387397,"line_start":471,"line_end":471,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":387402,"byte_end":387405,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":387410,"byte_end":387449,"line_start":473,"line_end":473,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":387454,"byte_end":387457,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":387462,"byte_end":387495,"line_start":475,"line_end":475,"column_start":5,"column_end":38}},{"value":"/ let hms = |h, m, s| d.and_hms(h, m, s);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":387500,"byte_end":387543,"line_start":476,"line_end":476,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::zero()),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":387548,"byte_end":387613,"line_start":477,"line_end":477,"column_start":5,"column_end":70}},{"value":"/            Some(hms(3, 5, 7)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":387618,"byte_end":387653,"line_start":478,"line_end":478,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(1)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":387658,"byte_end":387727,"line_start":479,"line_end":479,"column_start":5,"column_end":74}},{"value":"/            Some(hms(3, 5, 8)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":387732,"byte_end":387767,"line_start":480,"line_end":480,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(-1)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":387772,"byte_end":387842,"line_start":481,"line_end":481,"column_start":5,"column_end":75}},{"value":"/            Some(hms(3, 5, 6)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":387847,"byte_end":387882,"line_start":482,"line_end":482,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(3600 + 60)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":387887,"byte_end":387964,"line_start":483,"line_end":483,"column_start":5,"column_end":82}},{"value":"/            Some(hms(4, 6, 7)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":387969,"byte_end":388004,"line_start":484,"line_end":484,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(86_400)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":388009,"byte_end":388083,"line_start":485,"line_end":485,"column_start":5,"column_end":79}},{"value":"/            Some(from_ymd(2016, 7, 9).and_hms(3, 5, 7)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":388088,"byte_end":388148,"line_start":486,"line_end":486,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":388153,"byte_end":388156,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ let hmsm = |h, m, s, milli| d.and_hms_milli(h, m, s, milli);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":388161,"byte_end":388225,"line_start":488,"line_end":488,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(hmsm(3, 5, 7, 980).checked_add_signed(Duration::milliseconds(450)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":388230,"byte_end":388312,"line_start":489,"line_end":489,"column_start":5,"column_end":87}},{"value":"/            Some(hmsm(3, 5, 8, 430)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":388317,"byte_end":388358,"line_start":490,"line_end":490,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":388363,"byte_end":388370,"line_start":491,"line_end":491,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":388375,"byte_end":388378,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ Overflow returns `None`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":388383,"byte_end":388411,"line_start":493,"line_end":493,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":388416,"byte_end":388419,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":388424,"byte_end":388431,"line_start":495,"line_end":495,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":388436,"byte_end":388476,"line_start":496,"line_end":496,"column_start":5,"column_end":45}},{"value":"/ # let hms = |h, m, s| NaiveDate::from_ymd(2016, 7, 8).and_hms(h, m, s);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":388481,"byte_end":388556,"line_start":497,"line_end":497,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":388561,"byte_end":388646,"line_start":498,"line_end":498,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":388651,"byte_end":388658,"line_start":499,"line_end":499,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":388663,"byte_end":388666,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":388671,"byte_end":388700,"line_start":501,"line_end":501,"column_start":5,"column_end":34}},{"value":"/ but the addition assumes that it is the only leap second happened.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":388705,"byte_end":388775,"line_start":502,"line_end":502,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":388780,"byte_end":388783,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":388788,"byte_end":388795,"line_start":504,"line_end":504,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":388800,"byte_end":388840,"line_start":505,"line_end":505,"column_start":5,"column_end":45}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":388845,"byte_end":388886,"line_start":506,"line_end":506,"column_start":5,"column_end":46}},{"value":"/ # let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli(h, m, s, milli);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":388891,"byte_end":388976,"line_start":507,"line_end":507,"column_start":5,"column_end":90}},{"value":"/ let leap = hmsm(3, 5, 59, 1_300);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":388981,"byte_end":389018,"line_start":508,"line_end":508,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::zero()),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":389023,"byte_end":389080,"line_start":509,"line_end":509,"column_start":5,"column_end":62}},{"value":"/            Some(hmsm(3, 5, 59, 1_300)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":389085,"byte_end":389129,"line_start":510,"line_end":510,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(-500)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":389134,"byte_end":389203,"line_start":511,"line_end":511,"column_start":5,"column_end":74}},{"value":"/            Some(hmsm(3, 5, 59, 800)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":389208,"byte_end":389250,"line_start":512,"line_end":512,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(500)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":389255,"byte_end":389323,"line_start":513,"line_end":513,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 1_800)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":389328,"byte_end":389372,"line_start":514,"line_end":514,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(800)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":389377,"byte_end":389445,"line_start":515,"line_end":515,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 6, 0, 100)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":389450,"byte_end":389491,"line_start":516,"line_end":516,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::seconds(10)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":389496,"byte_end":389558,"line_start":517,"line_end":517,"column_start":5,"column_end":67}},{"value":"/            Some(hmsm(3, 6, 9, 300)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":389563,"byte_end":389604,"line_start":518,"line_end":518,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::seconds(-10)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":389609,"byte_end":389672,"line_start":519,"line_end":519,"column_start":5,"column_end":68}},{"value":"/            Some(hmsm(3, 5, 50, 300)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":389677,"byte_end":389719,"line_start":520,"line_end":520,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::days(1)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":389724,"byte_end":389782,"line_start":521,"line_end":521,"column_start":5,"column_end":63}},{"value":"/            Some(from_ymd(2016, 7, 9).and_hms_milli(3, 5, 59, 300)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":389787,"byte_end":389859,"line_start":522,"line_end":522,"column_start":5,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":389864,"byte_end":389871,"line_start":523,"line_end":523,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1405},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":393144,"byte_end":393162,"line_start":597,"line_end":597,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDateTime>::checked_sub_signed","value":"fn checked_sub_signed(Self, OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":390327,"byte_end":390389,"line_start":536,"line_end":536,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":390394,"byte_end":390397,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":390402,"byte_end":390497,"line_start":538,"line_end":538,"column_start":5,"column_end":100}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":390502,"byte_end":390568,"line_start":539,"line_end":539,"column_start":5,"column_end":71}},{"value":"/ except when the `NaiveDateTime` itself represents a leap second","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":390573,"byte_end":390640,"line_start":540,"line_end":540,"column_start":5,"column_end":72}},{"value":"/ in which case the assumption becomes that **there is exactly a single leap second ever**.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":390645,"byte_end":390738,"line_start":541,"line_end":541,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":390743,"byte_end":390746,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":390751,"byte_end":390802,"line_start":543,"line_end":543,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":390807,"byte_end":390810,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":390815,"byte_end":390828,"line_start":545,"line_end":545,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":390833,"byte_end":390836,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":390841,"byte_end":390848,"line_start":547,"line_end":547,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":390853,"byte_end":390891,"line_start":548,"line_end":548,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":390896,"byte_end":390899,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":390904,"byte_end":390943,"line_start":550,"line_end":550,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":390948,"byte_end":390951,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":390956,"byte_end":390989,"line_start":552,"line_end":552,"column_start":5,"column_end":38}},{"value":"/ let hms = |h, m, s| d.and_hms(h, m, s);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":390994,"byte_end":391037,"line_start":553,"line_end":553,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::zero()),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":391042,"byte_end":391107,"line_start":554,"line_end":554,"column_start":5,"column_end":70}},{"value":"/            Some(hms(3, 5, 7)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":391112,"byte_end":391147,"line_start":555,"line_end":555,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(1)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":391152,"byte_end":391221,"line_start":556,"line_end":556,"column_start":5,"column_end":74}},{"value":"/            Some(hms(3, 5, 6)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":391226,"byte_end":391261,"line_start":557,"line_end":557,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(-1)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":391266,"byte_end":391336,"line_start":558,"line_end":558,"column_start":5,"column_end":75}},{"value":"/            Some(hms(3, 5, 8)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":391341,"byte_end":391376,"line_start":559,"line_end":559,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(3600 + 60)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":391381,"byte_end":391458,"line_start":560,"line_end":560,"column_start":5,"column_end":82}},{"value":"/            Some(hms(2, 4, 7)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":391463,"byte_end":391498,"line_start":561,"line_end":561,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(86_400)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":391503,"byte_end":391577,"line_start":562,"line_end":562,"column_start":5,"column_end":79}},{"value":"/            Some(from_ymd(2016, 7, 7).and_hms(3, 5, 7)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":391582,"byte_end":391642,"line_start":563,"line_end":563,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":391647,"byte_end":391650,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ let hmsm = |h, m, s, milli| d.and_hms_milli(h, m, s, milli);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":391655,"byte_end":391719,"line_start":565,"line_end":565,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(hmsm(3, 5, 7, 450).checked_sub_signed(Duration::milliseconds(670)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":391724,"byte_end":391806,"line_start":566,"line_end":566,"column_start":5,"column_end":87}},{"value":"/            Some(hmsm(3, 5, 6, 780)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":391811,"byte_end":391852,"line_start":567,"line_end":567,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":391857,"byte_end":391864,"line_start":568,"line_end":568,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":391869,"byte_end":391872,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ Overflow returns `None`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":391877,"byte_end":391905,"line_start":570,"line_end":570,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":391910,"byte_end":391913,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":391918,"byte_end":391925,"line_start":572,"line_end":572,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":391930,"byte_end":391970,"line_start":573,"line_end":573,"column_start":5,"column_end":45}},{"value":"/ # let hms = |h, m, s| NaiveDate::from_ymd(2016, 7, 8).and_hms(h, m, s);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":391975,"byte_end":392050,"line_start":574,"line_end":574,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":392055,"byte_end":392140,"line_start":575,"line_end":575,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":392145,"byte_end":392152,"line_start":576,"line_end":576,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":392157,"byte_end":392160,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":392165,"byte_end":392194,"line_start":578,"line_end":578,"column_start":5,"column_end":34}},{"value":"/ but the subtraction assumes that it is the only leap second happened.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":392199,"byte_end":392272,"line_start":579,"line_end":579,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":392277,"byte_end":392280,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":392285,"byte_end":392292,"line_start":581,"line_end":581,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":392297,"byte_end":392337,"line_start":582,"line_end":582,"column_start":5,"column_end":45}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":392342,"byte_end":392383,"line_start":583,"line_end":583,"column_start":5,"column_end":46}},{"value":"/ # let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli(h, m, s, milli);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":392388,"byte_end":392473,"line_start":584,"line_end":584,"column_start":5,"column_end":90}},{"value":"/ let leap = hmsm(3, 5, 59, 1_300);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":392478,"byte_end":392515,"line_start":585,"line_end":585,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::zero()),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":392520,"byte_end":392577,"line_start":586,"line_end":586,"column_start":5,"column_end":62}},{"value":"/            Some(hmsm(3, 5, 59, 1_300)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":392582,"byte_end":392626,"line_start":587,"line_end":587,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::milliseconds(200)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":392631,"byte_end":392699,"line_start":588,"line_end":588,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 1_100)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":392704,"byte_end":392748,"line_start":589,"line_end":589,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::milliseconds(500)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":392753,"byte_end":392821,"line_start":590,"line_end":590,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 800)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":392826,"byte_end":392868,"line_start":591,"line_end":591,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::seconds(60)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":392873,"byte_end":392935,"line_start":592,"line_end":592,"column_start":5,"column_end":67}},{"value":"/            Some(hmsm(3, 5, 0, 300)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":392940,"byte_end":392981,"line_start":593,"line_end":593,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::days(1)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":392986,"byte_end":393044,"line_start":594,"line_end":594,"column_start":5,"column_end":63}},{"value":"/            Some(from_ymd(2016, 7, 7).and_hms_milli(3, 6, 0, 300)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":393049,"byte_end":393120,"line_start":595,"line_end":595,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":393125,"byte_end":393132,"line_start":596,"line_end":596,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1406},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":395364,"byte_end":395385,"line_start":647,"line_end":647,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDateTime>::signed_duration_since","value":"fn signed_duration_since(Self, NaiveDateTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDateTime` from the current date and time.\n This does not overflow or underflow at all.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveDateTime` from the current date and time.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":393588,"byte_end":393657,"line_start":609,"line_end":609,"column_start":5,"column_end":74}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":393662,"byte_end":393709,"line_start":610,"line_end":610,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":393714,"byte_end":393717,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":393722,"byte_end":393817,"line_start":612,"line_end":612,"column_start":5,"column_end":100}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":393822,"byte_end":393888,"line_start":613,"line_end":613,"column_start":5,"column_end":71}},{"value":"/ except when any of the `NaiveDateTime`s themselves represents a leap second","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":393893,"byte_end":393972,"line_start":614,"line_end":614,"column_start":5,"column_end":84}},{"value":"/ in which case the assumption becomes that","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":393977,"byte_end":394022,"line_start":615,"line_end":615,"column_start":5,"column_end":50}},{"value":"/ **there are exactly one (or two) leap second(s) ever**.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394027,"byte_end":394086,"line_start":616,"line_end":616,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394091,"byte_end":394094,"line_start":617,"line_end":617,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394099,"byte_end":394112,"line_start":618,"line_end":618,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394117,"byte_end":394120,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394125,"byte_end":394132,"line_start":620,"line_end":620,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394137,"byte_end":394175,"line_start":621,"line_end":621,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394180,"byte_end":394183,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394188,"byte_end":394227,"line_start":623,"line_end":623,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394232,"byte_end":394235,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394240,"byte_end":394273,"line_start":625,"line_end":625,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(d.and_hms(3, 5, 7).signed_duration_since(d.and_hms(2, 4, 6)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394278,"byte_end":394354,"line_start":626,"line_end":626,"column_start":5,"column_end":81}},{"value":"/            Duration::seconds(3600 + 60 + 1));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394359,"byte_end":394408,"line_start":627,"line_end":627,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394413,"byte_end":394416,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ // July 8 is 190th day in the year 2016","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394421,"byte_end":394464,"line_start":629,"line_end":629,"column_start":5,"column_end":48}},{"value":"/ let d0 = from_ymd(2016, 1, 1);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394469,"byte_end":394503,"line_start":630,"line_end":630,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(d.and_hms_milli(0, 7, 6, 500).signed_duration_since(d0.and_hms(0, 0, 0)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394508,"byte_end":394596,"line_start":631,"line_end":631,"column_start":5,"column_end":93}},{"value":"/            Duration::seconds(189 * 86_400 + 7 * 60 + 6) + Duration::milliseconds(500));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394601,"byte_end":394692,"line_start":632,"line_end":632,"column_start":5,"column_end":96}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394697,"byte_end":394704,"line_start":633,"line_end":633,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394709,"byte_end":394712,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled, but the subtraction assumes that","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394717,"byte_end":394779,"line_start":635,"line_end":635,"column_start":5,"column_end":67}},{"value":"/ there were no other leap seconds happened.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394784,"byte_end":394830,"line_start":636,"line_end":636,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394835,"byte_end":394838,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394843,"byte_end":394850,"line_start":638,"line_end":638,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{Duration, NaiveDate};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394855,"byte_end":394895,"line_start":639,"line_end":639,"column_start":5,"column_end":45}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394900,"byte_end":394941,"line_start":640,"line_end":640,"column_start":5,"column_end":46}},{"value":"/ let leap = from_ymd(2015, 6, 30).and_hms_milli(23, 59, 59, 1_500);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":394946,"byte_end":395016,"line_start":641,"line_end":641,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(leap.signed_duration_since(from_ymd(2015, 6, 30).and_hms(23, 0, 0)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":395021,"byte_end":395104,"line_start":642,"line_end":642,"column_start":5,"column_end":88}},{"value":"/            Duration::seconds(3600) + Duration::milliseconds(500));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":395109,"byte_end":395179,"line_start":643,"line_end":643,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(from_ymd(2015, 7, 1).and_hms(1, 0, 0).signed_duration_since(leap),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":395184,"byte_end":395265,"line_start":644,"line_end":644,"column_start":5,"column_end":86}},{"value":"/            Duration::seconds(3600) - Duration::milliseconds(500));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":395270,"byte_end":395340,"line_start":645,"line_end":645,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":395345,"byte_end":395352,"line_start":646,"line_end":646,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1407},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":396823,"byte_end":396840,"line_start":680,"line_end":680,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDateTime>::format_with_items","value":"fn format_with_items<'a, I, B, '_>(&'_ Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n Otherwise it is the same as the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified formatting items.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":395534,"byte_end":395609,"line_start":651,"line_end":651,"column_start":5,"column_end":80}},{"value":"/ Otherwise it is the same as the ordinary [`format`](#method.format) method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":395614,"byte_end":395693,"line_start":652,"line_end":652,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":395698,"byte_end":395701,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":395706,"byte_end":395756,"line_start":654,"line_end":654,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":395761,"byte_end":395839,"line_start":655,"line_end":655,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":395844,"byte_end":395847,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":395852,"byte_end":395865,"line_start":657,"line_end":657,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":395870,"byte_end":395873,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":395878,"byte_end":395885,"line_start":659,"line_end":659,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":395890,"byte_end":395916,"line_start":660,"line_end":660,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":395921,"byte_end":395969,"line_start":661,"line_end":661,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":395974,"byte_end":395977,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":395982,"byte_end":396036,"line_start":663,"line_end":663,"column_start":5,"column_end":59}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":396041,"byte_end":396105,"line_start":664,"line_end":664,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.format_with_items(fmt.clone()).to_string(), \"2015-09-05 23:56:04\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":396110,"byte_end":396195,"line_start":665,"line_end":665,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(),    \"2015-09-05 23:56:04\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":396200,"byte_end":396285,"line_start":666,"line_end":666,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":396290,"byte_end":396297,"line_start":667,"line_end":667,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":396302,"byte_end":396305,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":396310,"byte_end":396394,"line_start":669,"line_end":669,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":396399,"byte_end":396402,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":396407,"byte_end":396414,"line_start":671,"line_end":671,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":396419,"byte_end":396447,"line_start":672,"line_end":672,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":396452,"byte_end":396502,"line_start":673,"line_end":673,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\").clone();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":396507,"byte_end":396571,"line_start":674,"line_end":674,"column_start":5,"column_end":69}},{"value":"/ # let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":396576,"byte_end":396642,"line_start":675,"line_end":675,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", dt.format_with_items(fmt)), \"2015-09-05 23:56:04\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":396647,"byte_end":396727,"line_start":676,"line_end":676,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":396732,"byte_end":396739,"line_start":677,"line_end":677,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":396744,"byte_end":396797,"line_start":678,"line_end":678,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":396802,"byte_end":396811,"line_start":679,"line_end":679,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1411},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":398637,"byte_end":398643,"line_start":722,"line_end":722,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDateTime>::format","value":"fn format<'a, '_>(&'_ Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified format string.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":397051,"byte_end":397123,"line_start":688,"line_end":688,"column_start":5,"column_end":77}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":397128,"byte_end":397198,"line_start":689,"line_end":689,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":397203,"byte_end":397241,"line_start":690,"line_end":690,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":397246,"byte_end":397249,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":397254,"byte_end":397289,"line_start":692,"line_end":692,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":397294,"byte_end":397367,"line_start":693,"line_end":693,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":397372,"byte_end":397429,"line_start":694,"line_end":694,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":397434,"byte_end":397496,"line_start":695,"line_end":695,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":397501,"byte_end":397561,"line_start":696,"line_end":696,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":397566,"byte_end":397569,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":397574,"byte_end":397638,"line_start":698,"line_end":698,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":397643,"byte_end":397706,"line_start":699,"line_end":699,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":397711,"byte_end":397786,"line_start":700,"line_end":700,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":397791,"byte_end":397794,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":397799,"byte_end":397812,"line_start":702,"line_end":702,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":397817,"byte_end":397820,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":397825,"byte_end":397832,"line_start":704,"line_end":704,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":397837,"byte_end":397863,"line_start":705,"line_end":705,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":397868,"byte_end":397871,"line_start":706,"line_end":706,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":397876,"byte_end":397940,"line_start":707,"line_end":707,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2015-09-05 23:56:04\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":397945,"byte_end":398027,"line_start":708,"line_end":708,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.format(\"around %l %p on %b %-d\").to_string(), \"around 11 PM on Sep 5\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":398032,"byte_end":398121,"line_start":709,"line_end":709,"column_start":5,"column_end":94}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":398126,"byte_end":398133,"line_start":710,"line_end":710,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":398138,"byte_end":398141,"line_start":711,"line_end":711,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":398146,"byte_end":398230,"line_start":712,"line_end":712,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":398235,"byte_end":398238,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":398243,"byte_end":398250,"line_start":714,"line_end":714,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":398255,"byte_end":398283,"line_start":715,"line_end":715,"column_start":5,"column_end":33}},{"value":"/ # let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":398288,"byte_end":398354,"line_start":716,"line_end":716,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", dt.format(\"%Y-%m-%d %H:%M:%S\")), \"2015-09-05 23:56:04\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":398359,"byte_end":398444,"line_start":717,"line_end":717,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(format!(\"{}\", dt.format(\"around %l %p on %b %-d\")), \"around 11 PM on Sep 5\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":398449,"byte_end":398541,"line_start":718,"line_end":718,"column_start":5,"column_end":97}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":398546,"byte_end":398553,"line_start":719,"line_end":719,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":398558,"byte_end":398611,"line_start":720,"line_end":720,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":398616,"byte_end":398625,"line_start":721,"line_end":721,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1413},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":399677,"byte_end":399695,"line_start":743,"line_end":743,"column_start":12,"column_end":30},"name":"and_local_timezone","qualname":"<NaiveDateTime>::and_local_timezone","value":"fn and_local_timezone<Tz, '_>(&'_ Self, Tz) -> LocalResult<DateTime<Tz>> where\nTz: TimeZone","parent":null,"children":[],"decl_id":null,"docs":" Converts the `NaiveDateTime` into the timezone-aware `DateTime<Tz>`\n with the provided timezone, if possible.","sig":null,"attributes":[{"value":"/ Converts the `NaiveDateTime` into the timezone-aware `DateTime<Tz>`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":398774,"byte_end":398845,"line_start":726,"line_end":726,"column_start":5,"column_end":76}},{"value":"/ with the provided timezone, if possible.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":398850,"byte_end":398894,"line_start":727,"line_end":727,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":398899,"byte_end":398902,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ This can fail in cases where the local time represented by the `NaiveDateTime`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":398907,"byte_end":398989,"line_start":729,"line_end":729,"column_start":5,"column_end":87}},{"value":"/ is not a valid local timestamp in the target timezone due to an offset transition","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":398994,"byte_end":399079,"line_start":730,"line_end":730,"column_start":5,"column_end":90}},{"value":"/ for example if the target timezone had a change from +00:00 to +01:00","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":399084,"byte_end":399157,"line_start":731,"line_end":731,"column_start":5,"column_end":78}},{"value":"/ occuring at 2015-09-05 22:59:59, then a local time of 2015-09-05 23:56:04","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":399162,"byte_end":399239,"line_start":732,"line_end":732,"column_start":5,"column_end":82}},{"value":"/ could never occur. Similarly, if the offset transitioned in the opposite direction","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":399244,"byte_end":399330,"line_start":733,"line_end":733,"column_start":5,"column_end":91}},{"value":"/ then there would be two local times of 2015-09-05 23:56:04, one at +00:00 and one","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":399335,"byte_end":399420,"line_start":734,"line_end":734,"column_start":5,"column_end":90}},{"value":"/ at +01:00.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":399425,"byte_end":399439,"line_start":735,"line_end":735,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":399444,"byte_end":399447,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":399452,"byte_end":399465,"line_start":737,"line_end":737,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":399470,"byte_end":399473,"line_start":738,"line_end":738,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":399478,"byte_end":399485,"line_start":739,"line_end":739,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Utc};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":399490,"byte_end":399523,"line_start":740,"line_end":740,"column_start":5,"column_end":38}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4).and_local_timezone(Utc).unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":399528,"byte_end":399625,"line_start":741,"line_end":741,"column_start":5,"column_end":102}},{"value":"/ assert_eq!(dt.timezone(), Utc);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":399630,"byte_end":399665,"line_start":742,"line_end":742,"column_start":5,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":1415},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":399860,"byte_end":399863,"line_start":748,"line_end":748,"column_start":15,"column_end":18},"name":"MIN","qualname":"::naive::datetime::NaiveDateTime::MIN","value":"Self","parent":{"krate":0,"index":1388},"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDateTime`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `NaiveDateTime`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":399804,"byte_end":399845,"line_start":747,"line_end":747,"column_start":5,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":1416},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":399985,"byte_end":399988,"line_start":750,"line_end":750,"column_start":15,"column_end":18},"name":"MAX","qualname":"::naive::datetime::NaiveDateTime::MAX","value":"Self","parent":{"krate":0,"index":1388},"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDateTime`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `NaiveDateTime`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":399929,"byte_end":399970,"line_start":749,"line_end":749,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1418},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400496,"byte_end":400500,"line_start":767,"line_end":767,"column_start":8,"column_end":12},"name":"year","qualname":"<NaiveDateTime as traits::Datelike>::year","value":"fn year<'_>(&'_ Self) -> i32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2267},"docs":" Returns the year number in the [calendar date](./index.html#calendar-date).","sig":null,"attributes":[{"value":"/ Returns the year number in the [calendar date](./index.html#calendar-date).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400091,"byte_end":400170,"line_start":754,"line_end":754,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400175,"byte_end":400178,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::year`] method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400183,"byte_end":400227,"line_start":756,"line_end":756,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400232,"byte_end":400235,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400240,"byte_end":400253,"line_start":758,"line_end":758,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400258,"byte_end":400261,"line_start":759,"line_end":759,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400266,"byte_end":400273,"line_start":760,"line_end":760,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400278,"byte_end":400331,"line_start":761,"line_end":761,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400336,"byte_end":400339,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 25).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400344,"byte_end":400425,"line_start":763,"line_end":763,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400430,"byte_end":400462,"line_start":764,"line_end":764,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400467,"byte_end":400474,"line_start":765,"line_end":765,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400479,"byte_end":400488,"line_start":766,"line_end":766,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1419},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401015,"byte_end":401020,"line_start":786,"line_end":786,"column_start":8,"column_end":13},"name":"month","qualname":"<NaiveDateTime as traits::Datelike>::month","value":"fn month<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2269},"docs":" Returns the month number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 1.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400553,"byte_end":400598,"line_start":771,"line_end":771,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400603,"byte_end":400606,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 12.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400611,"byte_end":400652,"line_start":773,"line_end":773,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400657,"byte_end":400660,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::month`](./struct.NaiveDate.html#method.month) method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400665,"byte_end":400748,"line_start":775,"line_end":775,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400753,"byte_end":400756,"line_start":776,"line_end":776,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400761,"byte_end":400774,"line_start":777,"line_end":777,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400779,"byte_end":400782,"line_start":778,"line_end":778,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400787,"byte_end":400794,"line_start":779,"line_end":779,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400799,"byte_end":400852,"line_start":780,"line_end":780,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400857,"byte_end":400860,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 25).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400865,"byte_end":400946,"line_start":782,"line_end":782,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(dt.month(), 9);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400951,"byte_end":400981,"line_start":783,"line_end":783,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400986,"byte_end":400993,"line_start":784,"line_end":784,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400998,"byte_end":401007,"line_start":785,"line_end":785,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1420},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401539,"byte_end":401545,"line_start":805,"line_end":805,"column_start":8,"column_end":14},"name":"month0","qualname":"<NaiveDateTime as traits::Datelike>::month0","value":"fn month0<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2270},"docs":" Returns the month number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 0.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401074,"byte_end":401119,"line_start":790,"line_end":790,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401124,"byte_end":401127,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 11.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401132,"byte_end":401173,"line_start":792,"line_end":792,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401178,"byte_end":401181,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::month0`](./struct.NaiveDate.html#method.month0) method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401186,"byte_end":401271,"line_start":794,"line_end":794,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401276,"byte_end":401279,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401284,"byte_end":401297,"line_start":796,"line_end":796,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401302,"byte_end":401305,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401310,"byte_end":401317,"line_start":798,"line_end":798,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401322,"byte_end":401375,"line_start":799,"line_end":799,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401380,"byte_end":401383,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 25).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401388,"byte_end":401469,"line_start":801,"line_end":801,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(dt.month0(), 8);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401474,"byte_end":401505,"line_start":802,"line_end":802,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401510,"byte_end":401517,"line_start":803,"line_end":803,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401522,"byte_end":401531,"line_start":804,"line_end":804,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1421},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402100,"byte_end":402103,"line_start":824,"line_end":824,"column_start":8,"column_end":11},"name":"day","qualname":"<NaiveDateTime as traits::Datelike>::day","value":"fn day<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2271},"docs":" Returns the day of month starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 1.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401600,"byte_end":401645,"line_start":809,"line_end":809,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401650,"byte_end":401653,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 31. (The last day of month differs by months.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401658,"byte_end":401742,"line_start":811,"line_end":811,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401747,"byte_end":401750,"line_start":812,"line_end":812,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::day`](./struct.NaiveDate.html#method.day) method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401755,"byte_end":401834,"line_start":813,"line_end":813,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401839,"byte_end":401842,"line_start":814,"line_end":814,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401847,"byte_end":401860,"line_start":815,"line_end":815,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401865,"byte_end":401868,"line_start":816,"line_end":816,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401873,"byte_end":401880,"line_start":817,"line_end":817,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401885,"byte_end":401938,"line_start":818,"line_end":818,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401943,"byte_end":401946,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 25).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":401951,"byte_end":402032,"line_start":820,"line_end":820,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(dt.day(), 25);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402037,"byte_end":402066,"line_start":821,"line_end":821,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402071,"byte_end":402078,"line_start":822,"line_end":822,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402083,"byte_end":402092,"line_start":823,"line_end":823,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1422},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402658,"byte_end":402662,"line_start":843,"line_end":843,"column_start":8,"column_end":12},"name":"day0","qualname":"<NaiveDateTime as traits::Datelike>::day0","value":"fn day0<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2272},"docs":" Returns the day of month starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 0.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402155,"byte_end":402200,"line_start":828,"line_end":828,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402205,"byte_end":402208,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 30. (The last day of month differs by months.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402213,"byte_end":402297,"line_start":830,"line_end":830,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402302,"byte_end":402305,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::day0`](./struct.NaiveDate.html#method.day0) method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402310,"byte_end":402391,"line_start":832,"line_end":832,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402396,"byte_end":402399,"line_start":833,"line_end":833,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402404,"byte_end":402417,"line_start":834,"line_end":834,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402422,"byte_end":402425,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402430,"byte_end":402437,"line_start":836,"line_end":836,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402442,"byte_end":402495,"line_start":837,"line_end":837,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402500,"byte_end":402503,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 25).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402508,"byte_end":402589,"line_start":839,"line_end":839,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(dt.day0(), 24);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402594,"byte_end":402624,"line_start":840,"line_end":840,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402629,"byte_end":402636,"line_start":841,"line_end":841,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402641,"byte_end":402650,"line_start":842,"line_end":842,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1423},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403226,"byte_end":403233,"line_start":862,"line_end":862,"column_start":8,"column_end":15},"name":"ordinal","qualname":"<NaiveDateTime as traits::Datelike>::ordinal","value":"fn ordinal<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2273},"docs":" Returns the day of year starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 1.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402715,"byte_end":402759,"line_start":847,"line_end":847,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402764,"byte_end":402767,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 366. (The last day of year differs by years.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402772,"byte_end":402855,"line_start":849,"line_end":849,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402860,"byte_end":402863,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::ordinal`](./struct.NaiveDate.html#method.ordinal) method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402868,"byte_end":402955,"line_start":851,"line_end":851,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402960,"byte_end":402963,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402968,"byte_end":402981,"line_start":853,"line_end":853,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402986,"byte_end":402989,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":402994,"byte_end":403001,"line_start":855,"line_end":855,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403006,"byte_end":403059,"line_start":856,"line_end":856,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403064,"byte_end":403067,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 25).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403072,"byte_end":403153,"line_start":858,"line_end":858,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(dt.ordinal(), 268);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403158,"byte_end":403192,"line_start":859,"line_end":859,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403197,"byte_end":403204,"line_start":860,"line_end":860,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403209,"byte_end":403218,"line_start":861,"line_end":861,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1424},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403803,"byte_end":403811,"line_start":881,"line_end":881,"column_start":8,"column_end":16},"name":"ordinal0","qualname":"<NaiveDateTime as traits::Datelike>::ordinal0","value":"fn ordinal0<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2274},"docs":" Returns the day of year starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 0.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403289,"byte_end":403333,"line_start":866,"line_end":866,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403338,"byte_end":403341,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 365. (The last day of year differs by years.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403346,"byte_end":403429,"line_start":868,"line_end":868,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403434,"byte_end":403437,"line_start":869,"line_end":869,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::ordinal0`](./struct.NaiveDate.html#method.ordinal0) method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403442,"byte_end":403531,"line_start":870,"line_end":870,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403536,"byte_end":403539,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403544,"byte_end":403557,"line_start":872,"line_end":872,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403562,"byte_end":403565,"line_start":873,"line_end":873,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403570,"byte_end":403577,"line_start":874,"line_end":874,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403582,"byte_end":403635,"line_start":875,"line_end":875,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403640,"byte_end":403643,"line_start":876,"line_end":876,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 25).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403648,"byte_end":403729,"line_start":877,"line_end":877,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(dt.ordinal0(), 267);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403734,"byte_end":403769,"line_start":878,"line_end":878,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403774,"byte_end":403781,"line_start":879,"line_end":879,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403786,"byte_end":403795,"line_start":880,"line_end":880,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1425},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404285,"byte_end":404292,"line_start":898,"line_end":898,"column_start":8,"column_end":15},"name":"weekday","qualname":"<NaiveDateTime as traits::Datelike>::weekday","value":"fn weekday<'_>(&'_ Self) -> Weekday","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2275},"docs":" Returns the day of week.","sig":null,"attributes":[{"value":"/ Returns the day of week.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403868,"byte_end":403896,"line_start":885,"line_end":885,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403901,"byte_end":403904,"line_start":886,"line_end":886,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::weekday`](./struct.NaiveDate.html#method.weekday) method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":403909,"byte_end":403996,"line_start":887,"line_end":887,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404001,"byte_end":404004,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404009,"byte_end":404022,"line_start":889,"line_end":889,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404027,"byte_end":404030,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404035,"byte_end":404042,"line_start":891,"line_end":891,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Weekday};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404047,"byte_end":404109,"line_start":892,"line_end":892,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404114,"byte_end":404117,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 25).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404122,"byte_end":404203,"line_start":894,"line_end":894,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404208,"byte_end":404251,"line_start":895,"line_end":895,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404256,"byte_end":404263,"line_start":896,"line_end":896,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404268,"byte_end":404277,"line_start":897,"line_end":897,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1426},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404369,"byte_end":404377,"line_start":903,"line_end":903,"column_start":8,"column_end":16},"name":"iso_week","qualname":"<NaiveDateTime as traits::Datelike>::iso_week","value":"fn iso_week<'_>(&'_ Self) -> IsoWeek","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2276},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404352,"byte_end":404361,"line_start":902,"line_end":902,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1427},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":405077,"byte_end":405086,"line_start":923,"line_end":923,"column_start":8,"column_end":17},"name":"with_year","qualname":"<NaiveDateTime as traits::Datelike>::with_year","value":"fn with_year<'_>(&'_ Self, i32) -> Option<NaiveDateTime>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2277},"docs":" Makes a new `NaiveDateTime` with the year number changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` with the year number changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404438,"byte_end":404499,"line_start":907,"line_end":907,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404504,"byte_end":404507,"line_start":908,"line_end":908,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDateTime` would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404512,"byte_end":404583,"line_start":909,"line_end":909,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404588,"byte_end":404591,"line_start":910,"line_end":910,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::with_year`] method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404596,"byte_end":404645,"line_start":911,"line_end":911,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404650,"byte_end":404653,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404658,"byte_end":404671,"line_start":913,"line_end":913,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404676,"byte_end":404679,"line_start":914,"line_end":914,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404684,"byte_end":404691,"line_start":915,"line_end":915,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404696,"byte_end":404749,"line_start":916,"line_end":916,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404754,"byte_end":404757,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 25).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404762,"byte_end":404843,"line_start":918,"line_end":918,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(dt.with_year(2016), Some(NaiveDate::from_ymd(2016, 9, 25).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404848,"byte_end":404943,"line_start":919,"line_end":919,"column_start":5,"column_end":100}},{"value":"/ assert_eq!(dt.with_year(-308), Some(NaiveDate::from_ymd(-308, 9, 25).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":404948,"byte_end":405043,"line_start":920,"line_end":920,"column_start":5,"column_end":100}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":405048,"byte_end":405055,"line_start":921,"line_end":921,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":405060,"byte_end":405069,"line_start":922,"line_end":922,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1429},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":405902,"byte_end":405912,"line_start":944,"line_end":944,"column_start":8,"column_end":18},"name":"with_month","qualname":"<NaiveDateTime as traits::Datelike>::with_month","value":"fn with_month<'_>(&'_ Self, u32) -> Option<NaiveDateTime>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2278},"docs":" Makes a new `NaiveDateTime` with the month number (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` with the month number (starting from 1) changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":405221,"byte_end":405301,"line_start":927,"line_end":927,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":405306,"byte_end":405309,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDateTime` would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":405314,"byte_end":405385,"line_start":929,"line_end":929,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":405390,"byte_end":405393,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::with_month`] method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":405398,"byte_end":405448,"line_start":931,"line_end":931,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":405453,"byte_end":405456,"line_start":932,"line_end":932,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":405461,"byte_end":405474,"line_start":933,"line_end":933,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":405479,"byte_end":405482,"line_start":934,"line_end":934,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":405487,"byte_end":405494,"line_start":935,"line_end":935,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":405499,"byte_end":405552,"line_start":936,"line_end":936,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":405557,"byte_end":405560,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 30).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":405565,"byte_end":405646,"line_start":938,"line_end":938,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(dt.with_month(10), Some(NaiveDate::from_ymd(2015, 10, 30).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":405651,"byte_end":405746,"line_start":939,"line_end":939,"column_start":5,"column_end":100}},{"value":"/ assert_eq!(dt.with_month(13), None); // no month 13","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":405751,"byte_end":405806,"line_start":940,"line_end":940,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(dt.with_month(2), None); // no February 30","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":405811,"byte_end":405868,"line_start":941,"line_end":941,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":405873,"byte_end":405880,"line_start":942,"line_end":942,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":405885,"byte_end":405894,"line_start":943,"line_end":943,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1431},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":406734,"byte_end":406745,"line_start":965,"line_end":965,"column_start":8,"column_end":19},"name":"with_month0","qualname":"<NaiveDateTime as traits::Datelike>::with_month0","value":"fn with_month0<'_>(&'_ Self, u32) -> Option<NaiveDateTime>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2279},"docs":" Makes a new `NaiveDateTime` with the month number (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` with the month number (starting from 0) changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":406050,"byte_end":406130,"line_start":948,"line_end":948,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":406135,"byte_end":406138,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDateTime` would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":406143,"byte_end":406214,"line_start":950,"line_end":950,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":406219,"byte_end":406222,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::with_month0`] method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":406227,"byte_end":406278,"line_start":952,"line_end":952,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":406283,"byte_end":406286,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":406291,"byte_end":406304,"line_start":954,"line_end":954,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":406309,"byte_end":406312,"line_start":955,"line_end":955,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":406317,"byte_end":406324,"line_start":956,"line_end":956,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":406329,"byte_end":406382,"line_start":957,"line_end":957,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":406387,"byte_end":406390,"line_start":958,"line_end":958,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 30).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":406395,"byte_end":406476,"line_start":959,"line_end":959,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(dt.with_month0(9), Some(NaiveDate::from_ymd(2015, 10, 30).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":406481,"byte_end":406576,"line_start":960,"line_end":960,"column_start":5,"column_end":100}},{"value":"/ assert_eq!(dt.with_month0(12), None); // no month 13","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":406581,"byte_end":406637,"line_start":961,"line_end":961,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(dt.with_month0(1), None); // no February 30","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":406642,"byte_end":406700,"line_start":962,"line_end":962,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":406705,"byte_end":406712,"line_start":963,"line_end":963,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":406717,"byte_end":406726,"line_start":964,"line_end":964,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1433},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407501,"byte_end":407509,"line_start":985,"line_end":985,"column_start":8,"column_end":16},"name":"with_day","qualname":"<NaiveDateTime as traits::Datelike>::with_day","value":"fn with_day<'_>(&'_ Self, u32) -> Option<NaiveDateTime>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2280},"docs":" Makes a new `NaiveDateTime` with the day of month (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` with the day of month (starting from 1) changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":406886,"byte_end":406966,"line_start":969,"line_end":969,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":406971,"byte_end":406974,"line_start":970,"line_end":970,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDateTime` would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":406979,"byte_end":407050,"line_start":971,"line_end":971,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407055,"byte_end":407058,"line_start":972,"line_end":972,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::with_day`] method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407063,"byte_end":407111,"line_start":973,"line_end":973,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407116,"byte_end":407119,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407124,"byte_end":407137,"line_start":975,"line_end":975,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407142,"byte_end":407145,"line_start":976,"line_end":976,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407150,"byte_end":407157,"line_start":977,"line_end":977,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407162,"byte_end":407215,"line_start":978,"line_end":978,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407220,"byte_end":407223,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 8).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407228,"byte_end":407308,"line_start":980,"line_end":980,"column_start":5,"column_end":85}},{"value":"/ assert_eq!(dt.with_day(30), Some(NaiveDate::from_ymd(2015, 9, 30).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407313,"byte_end":407405,"line_start":981,"line_end":981,"column_start":5,"column_end":97}},{"value":"/ assert_eq!(dt.with_day(31), None); // no September 31","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407410,"byte_end":407467,"line_start":982,"line_end":982,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407472,"byte_end":407479,"line_start":983,"line_end":983,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407484,"byte_end":407493,"line_start":984,"line_end":984,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1435},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":408259,"byte_end":408268,"line_start":1005,"line_end":1005,"column_start":8,"column_end":17},"name":"with_day0","qualname":"<NaiveDateTime as traits::Datelike>::with_day0","value":"fn with_day0<'_>(&'_ Self, u32) -> Option<NaiveDateTime>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2281},"docs":" Makes a new `NaiveDateTime` with the day of month (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` with the day of month (starting from 0) changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407641,"byte_end":407721,"line_start":989,"line_end":989,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407726,"byte_end":407729,"line_start":990,"line_end":990,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDateTime` would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407734,"byte_end":407805,"line_start":991,"line_end":991,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407810,"byte_end":407813,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::with_day0`] method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407818,"byte_end":407867,"line_start":993,"line_end":993,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407872,"byte_end":407875,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407880,"byte_end":407893,"line_start":995,"line_end":995,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407898,"byte_end":407901,"line_start":996,"line_end":996,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407906,"byte_end":407913,"line_start":997,"line_end":997,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407918,"byte_end":407971,"line_start":998,"line_end":998,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407976,"byte_end":407979,"line_start":999,"line_end":999,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 8).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":407984,"byte_end":408064,"line_start":1000,"line_end":1000,"column_start":5,"column_end":85}},{"value":"/ assert_eq!(dt.with_day0(29), Some(NaiveDate::from_ymd(2015, 9, 30).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":408069,"byte_end":408162,"line_start":1001,"line_end":1001,"column_start":5,"column_end":98}},{"value":"/ assert_eq!(dt.with_day0(30), None); // no September 31","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":408167,"byte_end":408225,"line_start":1002,"line_end":1002,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":408230,"byte_end":408237,"line_start":1003,"line_end":1003,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":408242,"byte_end":408251,"line_start":1004,"line_end":1004,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1437},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":409390,"byte_end":409402,"line_start":1032,"line_end":1032,"column_start":8,"column_end":20},"name":"with_ordinal","qualname":"<NaiveDateTime as traits::Datelike>::with_ordinal","value":"fn with_ordinal<'_>(&'_ Self, u32) -> Option<NaiveDateTime>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2282},"docs":" Makes a new `NaiveDateTime` with the day of year (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` with the day of year (starting from 1) changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":408403,"byte_end":408482,"line_start":1009,"line_end":1009,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":408487,"byte_end":408490,"line_start":1010,"line_end":1010,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDateTime` would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":408495,"byte_end":408566,"line_start":1011,"line_end":1011,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":408571,"byte_end":408574,"line_start":1012,"line_end":1012,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::with_ordinal`] method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":408579,"byte_end":408631,"line_start":1013,"line_end":1013,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":408636,"byte_end":408639,"line_start":1014,"line_end":1014,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":408644,"byte_end":408657,"line_start":1015,"line_end":1015,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":408662,"byte_end":408665,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":408670,"byte_end":408677,"line_start":1017,"line_end":1017,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":408682,"byte_end":408735,"line_start":1018,"line_end":1018,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":408740,"byte_end":408743,"line_start":1019,"line_end":1019,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 8).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":408748,"byte_end":408828,"line_start":1020,"line_end":1020,"column_start":5,"column_end":85}},{"value":"/ assert_eq!(dt.with_ordinal(60),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":408833,"byte_end":408868,"line_start":1021,"line_end":1021,"column_start":5,"column_end":40}},{"value":"/            Some(NaiveDate::from_ymd(2015, 3, 1).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":408873,"byte_end":408947,"line_start":1022,"line_end":1022,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(dt.with_ordinal(366), None); // 2015 had only 365 days","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":408952,"byte_end":409021,"line_start":1023,"line_end":1023,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":409026,"byte_end":409029,"line_start":1024,"line_end":1024,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 9, 8).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":409034,"byte_end":409114,"line_start":1025,"line_end":1025,"column_start":5,"column_end":85}},{"value":"/ assert_eq!(dt.with_ordinal(60),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":409119,"byte_end":409154,"line_start":1026,"line_end":1026,"column_start":5,"column_end":40}},{"value":"/            Some(NaiveDate::from_ymd(2016, 2, 29).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":409159,"byte_end":409234,"line_start":1027,"line_end":1027,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(dt.with_ordinal(366),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":409239,"byte_end":409275,"line_start":1028,"line_end":1028,"column_start":5,"column_end":41}},{"value":"/            Some(NaiveDate::from_ymd(2016, 12, 31).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":409280,"byte_end":409356,"line_start":1029,"line_end":1029,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":409361,"byte_end":409368,"line_start":1030,"line_end":1030,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":409373,"byte_end":409382,"line_start":1031,"line_end":1031,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1439},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":410538,"byte_end":410551,"line_start":1059,"line_end":1059,"column_start":8,"column_end":21},"name":"with_ordinal0","qualname":"<NaiveDateTime as traits::Datelike>::with_ordinal0","value":"fn with_ordinal0<'_>(&'_ Self, u32) -> Option<NaiveDateTime>","parent":{"krate":0,"index":2266},"children":[],"decl_id":{"krate":0,"index":2283},"docs":" Makes a new `NaiveDateTime` with the day of year (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` with the day of year (starting from 0) changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":409546,"byte_end":409625,"line_start":1036,"line_end":1036,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":409630,"byte_end":409633,"line_start":1037,"line_end":1037,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDateTime` would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":409638,"byte_end":409709,"line_start":1038,"line_end":1038,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":409714,"byte_end":409717,"line_start":1039,"line_end":1039,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveDate::with_ordinal0`] method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":409722,"byte_end":409775,"line_start":1040,"line_end":1040,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":409780,"byte_end":409783,"line_start":1041,"line_end":1041,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":409788,"byte_end":409801,"line_start":1042,"line_end":1042,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":409806,"byte_end":409809,"line_start":1043,"line_end":1043,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":409814,"byte_end":409821,"line_start":1044,"line_end":1044,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":409826,"byte_end":409879,"line_start":1045,"line_end":1045,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":409884,"byte_end":409887,"line_start":1046,"line_end":1046,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 8).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":409892,"byte_end":409972,"line_start":1047,"line_end":1047,"column_start":5,"column_end":85}},{"value":"/ assert_eq!(dt.with_ordinal0(59),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":409977,"byte_end":410013,"line_start":1048,"line_end":1048,"column_start":5,"column_end":41}},{"value":"/            Some(NaiveDate::from_ymd(2015, 3, 1).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":410018,"byte_end":410092,"line_start":1049,"line_end":1049,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(dt.with_ordinal0(365), None); // 2015 had only 365 days","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":410097,"byte_end":410167,"line_start":1050,"line_end":1050,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":410172,"byte_end":410175,"line_start":1051,"line_end":1051,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 9, 8).and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":410180,"byte_end":410260,"line_start":1052,"line_end":1052,"column_start":5,"column_end":85}},{"value":"/ assert_eq!(dt.with_ordinal0(59),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":410265,"byte_end":410301,"line_start":1053,"line_end":1053,"column_start":5,"column_end":41}},{"value":"/            Some(NaiveDate::from_ymd(2016, 2, 29).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":410306,"byte_end":410381,"line_start":1054,"line_end":1054,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(dt.with_ordinal0(365),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":410386,"byte_end":410423,"line_start":1055,"line_end":1055,"column_start":5,"column_end":42}},{"value":"/            Some(NaiveDate::from_ymd(2016, 12, 31).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":410428,"byte_end":410504,"line_start":1056,"line_end":1056,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":410509,"byte_end":410516,"line_start":1057,"line_end":1057,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":410521,"byte_end":410530,"line_start":1058,"line_end":1058,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1442},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411109,"byte_end":411113,"line_start":1078,"line_end":1078,"column_start":8,"column_end":12},"name":"hour","qualname":"<NaiveDateTime as traits::Timelike>::hour","value":"fn hour<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2285},"children":[],"decl_id":{"krate":0,"index":2286},"docs":" Returns the hour number from 0 to 23.","sig":null,"attributes":[{"value":"/ Returns the hour number from 0 to 23.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":410734,"byte_end":410775,"line_start":1065,"line_end":1065,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":410780,"byte_end":410783,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveTime::hour`] method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":410788,"byte_end":410832,"line_start":1067,"line_end":1067,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":410837,"byte_end":410840,"line_start":1068,"line_end":1068,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":410845,"byte_end":410858,"line_start":1069,"line_end":1069,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":410863,"byte_end":410866,"line_start":1070,"line_end":1070,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":410871,"byte_end":410878,"line_start":1071,"line_end":1071,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Timelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":410883,"byte_end":410936,"line_start":1072,"line_end":1072,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":410941,"byte_end":410944,"line_start":1073,"line_end":1073,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 8).and_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":410949,"byte_end":411040,"line_start":1074,"line_end":1074,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(dt.hour(), 12);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411045,"byte_end":411075,"line_start":1075,"line_end":1075,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411080,"byte_end":411087,"line_start":1076,"line_end":1076,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411092,"byte_end":411101,"line_start":1077,"line_end":1077,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1443},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411547,"byte_end":411553,"line_start":1095,"line_end":1095,"column_start":8,"column_end":14},"name":"minute","qualname":"<NaiveDateTime as traits::Timelike>::minute","value":"fn minute<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2285},"children":[],"decl_id":{"krate":0,"index":2288},"docs":" Returns the minute number from 0 to 59.","sig":null,"attributes":[{"value":"/ Returns the minute number from 0 to 59.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411166,"byte_end":411209,"line_start":1082,"line_end":1082,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411214,"byte_end":411217,"line_start":1083,"line_end":1083,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveTime::minute`] method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411222,"byte_end":411268,"line_start":1084,"line_end":1084,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411273,"byte_end":411276,"line_start":1085,"line_end":1085,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411281,"byte_end":411294,"line_start":1086,"line_end":1086,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411299,"byte_end":411302,"line_start":1087,"line_end":1087,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411307,"byte_end":411314,"line_start":1088,"line_end":1088,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Timelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411319,"byte_end":411372,"line_start":1089,"line_end":1089,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411377,"byte_end":411380,"line_start":1090,"line_end":1090,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 8).and_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411385,"byte_end":411476,"line_start":1091,"line_end":1091,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(dt.minute(), 34);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411481,"byte_end":411513,"line_start":1092,"line_end":1092,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411518,"byte_end":411525,"line_start":1093,"line_end":1093,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411530,"byte_end":411539,"line_start":1094,"line_end":1094,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1444},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411989,"byte_end":411995,"line_start":1112,"line_end":1112,"column_start":8,"column_end":14},"name":"second","qualname":"<NaiveDateTime as traits::Timelike>::second","value":"fn second<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2285},"children":[],"decl_id":{"krate":0,"index":2289},"docs":" Returns the second number from 0 to 59.","sig":null,"attributes":[{"value":"/ Returns the second number from 0 to 59.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411608,"byte_end":411651,"line_start":1099,"line_end":1099,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411656,"byte_end":411659,"line_start":1100,"line_end":1100,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveTime::second`] method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411664,"byte_end":411710,"line_start":1101,"line_end":1101,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411715,"byte_end":411718,"line_start":1102,"line_end":1102,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411723,"byte_end":411736,"line_start":1103,"line_end":1103,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411741,"byte_end":411744,"line_start":1104,"line_end":1104,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411749,"byte_end":411756,"line_start":1105,"line_end":1105,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Timelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411761,"byte_end":411814,"line_start":1106,"line_end":1106,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411819,"byte_end":411822,"line_start":1107,"line_end":1107,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 8).and_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411827,"byte_end":411918,"line_start":1108,"line_end":1108,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411923,"byte_end":411955,"line_start":1109,"line_end":1109,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411960,"byte_end":411967,"line_start":1110,"line_end":1110,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":411972,"byte_end":411981,"line_start":1111,"line_end":1111,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1445},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412613,"byte_end":412623,"line_start":1131,"line_end":1131,"column_start":8,"column_end":18},"name":"nanosecond","qualname":"<NaiveDateTime as traits::Timelike>::nanosecond","value":"fn nanosecond<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2285},"children":[],"decl_id":{"krate":0,"index":2290},"docs":" Returns the number of nanoseconds since the whole non-leap second.\n The range from 1,000,000,000 to 1,999,999,999 represents\n the [leap second](./struct.NaiveTime.html#leap-second-handling).","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the whole non-leap second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412050,"byte_end":412120,"line_start":1116,"line_end":1116,"column_start":5,"column_end":75}},{"value":"/ The range from 1,000,000,000 to 1,999,999,999 represents","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412125,"byte_end":412185,"line_start":1117,"line_end":1117,"column_start":5,"column_end":65}},{"value":"/ the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412190,"byte_end":412258,"line_start":1118,"line_end":1118,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412263,"byte_end":412266,"line_start":1119,"line_end":1119,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveTime::nanosecond`] method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412271,"byte_end":412321,"line_start":1120,"line_end":1120,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412326,"byte_end":412329,"line_start":1121,"line_end":1121,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412334,"byte_end":412347,"line_start":1122,"line_end":1122,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412352,"byte_end":412355,"line_start":1123,"line_end":1123,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412360,"byte_end":412367,"line_start":1124,"line_end":1124,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Timelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412372,"byte_end":412425,"line_start":1125,"line_end":1125,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412430,"byte_end":412433,"line_start":1126,"line_end":1126,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 8).and_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412438,"byte_end":412529,"line_start":1127,"line_end":1127,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(dt.nanosecond(), 789_000_000);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412534,"byte_end":412579,"line_start":1128,"line_end":1128,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412584,"byte_end":412591,"line_start":1129,"line_end":1129,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412596,"byte_end":412605,"line_start":1130,"line_end":1130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1446},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":413300,"byte_end":413309,"line_start":1152,"line_end":1152,"column_start":8,"column_end":17},"name":"with_hour","qualname":"<NaiveDateTime as traits::Timelike>::with_hour","value":"fn with_hour<'_>(&'_ Self, u32) -> Option<NaiveDateTime>","parent":{"krate":0,"index":2285},"children":[],"decl_id":{"krate":0,"index":2291},"docs":" Makes a new `NaiveDateTime` with the hour number changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` with the hour number changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412682,"byte_end":412743,"line_start":1135,"line_end":1135,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412748,"byte_end":412751,"line_start":1136,"line_end":1136,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDateTime` would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412756,"byte_end":412827,"line_start":1137,"line_end":1137,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412832,"byte_end":412835,"line_start":1138,"line_end":1138,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveTime::with_hour`] method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412840,"byte_end":412889,"line_start":1139,"line_end":1139,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412894,"byte_end":412897,"line_start":1140,"line_end":1140,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412902,"byte_end":412915,"line_start":1141,"line_end":1141,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412920,"byte_end":412923,"line_start":1142,"line_end":1142,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412928,"byte_end":412935,"line_start":1143,"line_end":1143,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Timelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412940,"byte_end":412993,"line_start":1144,"line_end":1144,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":412998,"byte_end":413001,"line_start":1145,"line_end":1145,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 8).and_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":413006,"byte_end":413097,"line_start":1146,"line_end":1146,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(dt.with_hour(7),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":413102,"byte_end":413133,"line_start":1147,"line_end":1147,"column_start":5,"column_end":36}},{"value":"/            Some(NaiveDate::from_ymd(2015, 9, 8).and_hms_milli(7, 34, 56, 789)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":413138,"byte_end":413222,"line_start":1148,"line_end":1148,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.with_hour(24), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":413227,"byte_end":413266,"line_start":1149,"line_end":1149,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":413271,"byte_end":413278,"line_start":1150,"line_end":1150,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":413283,"byte_end":413292,"line_start":1151,"line_end":1151,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1448},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":414080,"byte_end":414091,"line_start":1174,"line_end":1174,"column_start":8,"column_end":19},"name":"with_minute","qualname":"<NaiveDateTime as traits::Timelike>::with_minute","value":"fn with_minute<'_>(&'_ Self, u32) -> Option<NaiveDateTime>","parent":{"krate":0,"index":2285},"children":[],"decl_id":{"krate":0,"index":2292},"docs":" Makes a new `NaiveDateTime` with the minute number changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` with the minute number changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":413444,"byte_end":413507,"line_start":1156,"line_end":1156,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":413512,"byte_end":413515,"line_start":1157,"line_end":1157,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDateTime` would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":413520,"byte_end":413591,"line_start":1158,"line_end":1158,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":413596,"byte_end":413599,"line_start":1159,"line_end":1159,"column_start":5,"column_end":8}},{"value":"/ See also the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":413604,"byte_end":413620,"line_start":1160,"line_end":1160,"column_start":5,"column_end":21}},{"value":"/ [`NaiveTime::with_minute`] method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":413625,"byte_end":413663,"line_start":1161,"line_end":1161,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":413668,"byte_end":413671,"line_start":1162,"line_end":1162,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":413676,"byte_end":413689,"line_start":1163,"line_end":1163,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":413694,"byte_end":413697,"line_start":1164,"line_end":1164,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":413702,"byte_end":413709,"line_start":1165,"line_end":1165,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Timelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":413714,"byte_end":413767,"line_start":1166,"line_end":1166,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":413772,"byte_end":413775,"line_start":1167,"line_end":1167,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 8).and_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":413780,"byte_end":413871,"line_start":1168,"line_end":1168,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(dt.with_minute(45),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":413876,"byte_end":413910,"line_start":1169,"line_end":1169,"column_start":5,"column_end":39}},{"value":"/            Some(NaiveDate::from_ymd(2015, 9, 8).and_hms_milli(12, 45, 56, 789)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":413915,"byte_end":414000,"line_start":1170,"line_end":1170,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(dt.with_minute(60), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":414005,"byte_end":414046,"line_start":1171,"line_end":1171,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":414051,"byte_end":414058,"line_start":1172,"line_end":1172,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":414063,"byte_end":414072,"line_start":1173,"line_end":1173,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1450},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":414963,"byte_end":414974,"line_start":1197,"line_end":1197,"column_start":8,"column_end":19},"name":"with_second","qualname":"<NaiveDateTime as traits::Timelike>::with_second","value":"fn with_second<'_>(&'_ Self, u32) -> Option<NaiveDateTime>","parent":{"krate":0,"index":2285},"children":[],"decl_id":{"krate":0,"index":2293},"docs":" Makes a new `NaiveDateTime` with the second number changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` with the second number changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":414226,"byte_end":414289,"line_start":1178,"line_end":1178,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":414294,"byte_end":414297,"line_start":1179,"line_end":1179,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDateTime` would be invalid. As","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":414302,"byte_end":414376,"line_start":1180,"line_end":1180,"column_start":5,"column_end":79}},{"value":"/ with the [`NaiveDateTime::second`] method, the input range is","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":414381,"byte_end":414446,"line_start":1181,"line_end":1181,"column_start":5,"column_end":70}},{"value":"/ restricted to 0 through 59.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":414451,"byte_end":414482,"line_start":1182,"line_end":1182,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":414487,"byte_end":414490,"line_start":1183,"line_end":1183,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveTime::with_second`] method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":414495,"byte_end":414546,"line_start":1184,"line_end":1184,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":414551,"byte_end":414554,"line_start":1185,"line_end":1185,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":414559,"byte_end":414572,"line_start":1186,"line_end":1186,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":414577,"byte_end":414580,"line_start":1187,"line_end":1187,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":414585,"byte_end":414592,"line_start":1188,"line_end":1188,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Timelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":414597,"byte_end":414650,"line_start":1189,"line_end":1189,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":414655,"byte_end":414658,"line_start":1190,"line_end":1190,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 8).and_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":414663,"byte_end":414754,"line_start":1191,"line_end":1191,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(dt.with_second(17),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":414759,"byte_end":414793,"line_start":1192,"line_end":1192,"column_start":5,"column_end":39}},{"value":"/            Some(NaiveDate::from_ymd(2015, 9, 8).and_hms_milli(12, 34, 17, 789)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":414798,"byte_end":414883,"line_start":1193,"line_end":1193,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(dt.with_second(60), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":414888,"byte_end":414929,"line_start":1194,"line_end":1194,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":414934,"byte_end":414941,"line_start":1195,"line_end":1195,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":414946,"byte_end":414955,"line_start":1196,"line_end":1196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1452},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":416095,"byte_end":416110,"line_start":1222,"line_end":1222,"column_start":8,"column_end":23},"name":"with_nanosecond","qualname":"<NaiveDateTime as traits::Timelike>::with_nanosecond","value":"fn with_nanosecond<'_>(&'_ Self, u32) -> Option<NaiveDateTime>","parent":{"krate":0,"index":2285},"children":[],"decl_id":{"krate":0,"index":2294},"docs":" Makes a new `NaiveDateTime` with nanoseconds since the whole non-leap second changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` with nanoseconds since the whole non-leap second changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":415109,"byte_end":415198,"line_start":1201,"line_end":1201,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":415203,"byte_end":415206,"line_start":1202,"line_end":1202,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveDateTime` would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":415211,"byte_end":415282,"line_start":1203,"line_end":1203,"column_start":5,"column_end":76}},{"value":"/ As with the [`NaiveDateTime::nanosecond`] method,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":415287,"byte_end":415340,"line_start":1204,"line_end":1204,"column_start":5,"column_end":58}},{"value":"/ the input range can exceed 1,000,000,000 for leap seconds.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":415345,"byte_end":415407,"line_start":1205,"line_end":1205,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":415412,"byte_end":415415,"line_start":1206,"line_end":1206,"column_start":5,"column_end":8}},{"value":"/ See also the [`NaiveTime::with_nanosecond`] method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":415420,"byte_end":415475,"line_start":1207,"line_end":1207,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":415480,"byte_end":415483,"line_start":1208,"line_end":1208,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":415488,"byte_end":415501,"line_start":1209,"line_end":1209,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":415506,"byte_end":415509,"line_start":1210,"line_end":1210,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":415514,"byte_end":415521,"line_start":1211,"line_end":1211,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Timelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":415526,"byte_end":415579,"line_start":1212,"line_end":1212,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":415584,"byte_end":415587,"line_start":1213,"line_end":1213,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2015, 9, 8).and_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":415592,"byte_end":415683,"line_start":1214,"line_end":1214,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(dt.with_nanosecond(333_333_333),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":415688,"byte_end":415735,"line_start":1215,"line_end":1215,"column_start":5,"column_end":52}},{"value":"/            Some(NaiveDate::from_ymd(2015, 9, 8).and_hms_nano(12, 34, 56, 333_333_333)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":415740,"byte_end":415832,"line_start":1216,"line_end":1216,"column_start":5,"column_end":97}},{"value":"/ assert_eq!(dt.with_nanosecond(1_333_333_333), // leap second","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":415837,"byte_end":415901,"line_start":1217,"line_end":1217,"column_start":5,"column_end":69}},{"value":"/            Some(NaiveDate::from_ymd(2015, 9, 8).and_hms_nano(12, 34, 56, 1_333_333_333)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":415906,"byte_end":416000,"line_start":1218,"line_end":1218,"column_start":5,"column_end":99}},{"value":"/ assert_eq!(dt.with_nanosecond(2_000_000_000), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":416005,"byte_end":416061,"line_start":1219,"line_end":1219,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":416066,"byte_end":416073,"line_start":1220,"line_end":1220,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":416078,"byte_end":416087,"line_start":1221,"line_end":1221,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1456},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":418618,"byte_end":418621,"line_start":1280,"line_end":1280,"column_start":8,"column_end":11},"name":"add","qualname":"<NaiveDateTime as std::ops::Add>::add","value":"fn add(Self, OldDuration) -> NaiveDateTime","parent":{"krate":2,"index":3331},"children":[],"decl_id":{"krate":2,"index":3334},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":418601,"byte_end":418610,"line_start":1279,"line_end":1279,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1458},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":418828,"byte_end":418838,"line_start":1287,"line_end":1287,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<NaiveDateTime as std::ops::AddAssign>::add_assign","value":"fn add_assign<'_>(&'_ mut Self, OldDuration)","parent":{"krate":2,"index":3362},"children":[],"decl_id":{"krate":2,"index":3364},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":418811,"byte_end":418820,"line_start":1286,"line_end":1286,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1461},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":421196,"byte_end":421199,"line_start":1344,"line_end":1344,"column_start":8,"column_end":11},"name":"sub","qualname":"<NaiveDateTime as std::ops::Sub>::sub","value":"fn sub(Self, OldDuration) -> NaiveDateTime","parent":{"krate":2,"index":3336},"children":[],"decl_id":{"krate":2,"index":3339},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":421179,"byte_end":421188,"line_start":1343,"line_end":1343,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1463},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":421406,"byte_end":421416,"line_start":1351,"line_end":1351,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<NaiveDateTime as std::ops::SubAssign>::sub_assign","value":"fn sub_assign<'_>(&'_ mut Self, OldDuration)","parent":{"krate":2,"index":3366},"children":[],"decl_id":{"krate":2,"index":3368},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":421389,"byte_end":421398,"line_start":1350,"line_end":1350,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1466},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":423181,"byte_end":423184,"line_start":1399,"line_end":1399,"column_start":8,"column_end":11},"name":"sub","qualname":"<NaiveDateTime as std::ops::Sub>::sub","value":"fn sub(Self, NaiveDateTime) -> OldDuration","parent":{"krate":2,"index":3336},"children":[],"decl_id":{"krate":2,"index":3339},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":423164,"byte_end":423173,"line_start":1398,"line_end":1398,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1468},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":424346,"byte_end":424349,"line_start":1432,"line_end":1432,"column_start":8,"column_end":11},"name":"fmt","qualname":"<NaiveDateTime as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10293},"children":[],"decl_id":{"krate":2,"index":10294},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1470},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":425447,"byte_end":425450,"line_start":1463,"line_end":1463,"column_start":8,"column_end":11},"name":"fmt","qualname":"<NaiveDateTime as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10300},"children":[],"decl_id":{"krate":2,"index":10301},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1473},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":426218,"byte_end":426226,"line_start":1487,"line_end":1487,"column_start":8,"column_end":16},"name":"from_str","qualname":"<NaiveDateTime as std::str::FromStr>::from_str","value":"fn from_str<'_>(&'_ str) -> ParseResult<NaiveDateTime>","parent":{"krate":2,"index":12994},"children":[],"decl_id":{"krate":2,"index":12996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1476},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":427550,"byte_end":427557,"line_start":1527,"line_end":1527,"column_start":8,"column_end":15},"name":"default","qualname":"<NaiveDateTime as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2778},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":464987,"byte_end":464994,"line_start":21,"line_end":21,"column_start":12,"column_end":19},"name":"IsoWeek","qualname":"::naive::isoweek::IsoWeek","value":"IsoWeek {  }","parent":null,"children":[{"krate":0,"index":2779}],"decl_id":null,"docs":" ISO 8601 week.","sig":null,"attributes":[{"value":"/ ISO 8601 week.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":464509,"byte_end":464527,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":464528,"byte_end":464531,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This type, combined with [`Weekday`](../enum.Weekday.html),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":464532,"byte_end":464595,"line_start":15,"line_end":15,"column_start":1,"column_end":64}},{"value":"/ constitutes the ISO 8601 [week date](./struct.NaiveDate.html#week-date).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":464596,"byte_end":464672,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ One can retrieve this type from the existing [`Datelike`](../trait.Datelike.html) types","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":464673,"byte_end":464764,"line_start":17,"line_end":17,"column_start":1,"column_end":92}},{"value":"/ via the [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":464765,"byte_end":464849,"line_start":18,"line_end":18,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1581},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":466955,"byte_end":466959,"line_start":74,"line_end":74,"column_start":12,"column_end":16},"name":"year","qualname":"<IsoWeek>::year","value":"fn year<'_>(&'_ Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the year number for this ISO week.","sig":null,"attributes":[{"value":"/ Returns the year number for this ISO week.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":466301,"byte_end":466347,"line_start":53,"line_end":53,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":466352,"byte_end":466355,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":466360,"byte_end":466373,"line_start":55,"line_end":55,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":466378,"byte_end":466381,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":466386,"byte_end":466393,"line_start":57,"line_end":57,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":466398,"byte_end":466445,"line_start":58,"line_end":58,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":466450,"byte_end":466453,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 1, Weekday::Mon);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":466458,"byte_end":466516,"line_start":60,"line_end":60,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":466521,"byte_end":466563,"line_start":61,"line_end":61,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":466568,"byte_end":466575,"line_start":62,"line_end":62,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":466580,"byte_end":466583,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ This year number might not match the calendar year number.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":466588,"byte_end":466650,"line_start":64,"line_end":64,"column_start":5,"column_end":67}},{"value":"/ Continuing the example...","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":466655,"byte_end":466684,"line_start":65,"line_end":65,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":466689,"byte_end":466692,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":466697,"byte_end":466704,"line_start":67,"line_end":67,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":466709,"byte_end":466758,"line_start":68,"line_end":68,"column_start":5,"column_end":54}},{"value":"/ # let d = NaiveDate::from_isoywd(2015, 1, Weekday::Mon);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":466763,"byte_end":466823,"line_start":69,"line_end":69,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(d.year(), 2014);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":466828,"byte_end":466859,"line_start":70,"line_end":70,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d, NaiveDate::from_ymd(2014, 12, 29));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":466864,"byte_end":466917,"line_start":71,"line_end":71,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":466922,"byte_end":466929,"line_start":72,"line_end":72,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":466934,"byte_end":466943,"line_start":73,"line_end":73,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1582},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467407,"byte_end":467411,"line_start":91,"line_end":91,"column_start":12,"column_end":16},"name":"week","qualname":"<IsoWeek>::week","value":"fn week<'_>(&'_ Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the ISO week number starting from 1.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467010,"byte_end":467058,"line_start":78,"line_end":78,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467063,"byte_end":467066,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 53. (The last week of year differs by years.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467071,"byte_end":467154,"line_start":80,"line_end":80,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467159,"byte_end":467162,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467167,"byte_end":467180,"line_start":82,"line_end":82,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467185,"byte_end":467188,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467193,"byte_end":467200,"line_start":84,"line_end":84,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467205,"byte_end":467252,"line_start":85,"line_end":85,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467257,"byte_end":467260,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 15, Weekday::Mon);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467265,"byte_end":467324,"line_start":87,"line_end":87,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().week(), 15);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467329,"byte_end":467369,"line_start":88,"line_end":88,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467374,"byte_end":467381,"line_start":89,"line_end":89,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467386,"byte_end":467395,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1583},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467877,"byte_end":467882,"line_start":108,"line_end":108,"column_start":12,"column_end":17},"name":"week0","qualname":"<IsoWeek>::week0","value":"fn week0<'_>(&'_ Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the ISO week number starting from 0.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467479,"byte_end":467527,"line_start":95,"line_end":95,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467532,"byte_end":467535,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 52. (The last week of year differs by years.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467540,"byte_end":467623,"line_start":97,"line_end":97,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467628,"byte_end":467631,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467636,"byte_end":467649,"line_start":99,"line_end":99,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467654,"byte_end":467657,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467662,"byte_end":467669,"line_start":101,"line_end":101,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467674,"byte_end":467721,"line_start":102,"line_end":102,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467726,"byte_end":467729,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 15, Weekday::Mon);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467734,"byte_end":467793,"line_start":104,"line_end":104,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().week0(), 14);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467798,"byte_end":467839,"line_start":105,"line_end":105,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467844,"byte_end":467851,"line_start":106,"line_end":106,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":467856,"byte_end":467865,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1585},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":468845,"byte_end":468848,"line_start":135,"line_end":135,"column_start":8,"column_end":11},"name":"fmt","qualname":"<IsoWeek as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10293},"children":[],"decl_id":{"krate":2,"index":10294},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2794},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":477972,"byte_end":477981,"line_start":192,"line_end":192,"column_start":12,"column_end":21},"name":"NaiveTime","qualname":"::naive::time::NaiveTime","value":"NaiveTime {  }","parent":null,"children":[{"krate":0,"index":2795},{"krate":0,"index":2796}],"decl_id":null,"docs":" ISO 8601 time without timezone.\n Allows for the nanosecond precision and optional leap second representation.","sig":null,"attributes":[{"value":"/ ISO 8601 time without timezone.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":470690,"byte_end":470725,"line_start":31,"line_end":31,"column_start":1,"column_end":36}},{"value":"/ Allows for the nanosecond precision and optional leap second representation.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":470726,"byte_end":470806,"line_start":32,"line_end":32,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":470807,"byte_end":470810,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ # Leap Second Handling","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":470811,"byte_end":470837,"line_start":34,"line_end":34,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":470838,"byte_end":470841,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Since 1960s, the manmade atomic clock has been so accurate that","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":470842,"byte_end":470909,"line_start":36,"line_end":36,"column_start":1,"column_end":68}},{"value":"/ it is much more accurate than Earth's own motion.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":470910,"byte_end":470963,"line_start":37,"line_end":37,"column_start":1,"column_end":54}},{"value":"/ It became desirable to define the civil time in terms of the atomic clock,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":470964,"byte_end":471042,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/ but that risks the desynchronization of the civil time from Earth.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":471043,"byte_end":471113,"line_start":39,"line_end":39,"column_start":1,"column_end":71}},{"value":"/ To account for this, the designers of the Coordinated Universal Time (UTC)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":471114,"byte_end":471192,"line_start":40,"line_end":40,"column_start":1,"column_end":79}},{"value":"/ made that the UTC should be kept within 0.9 seconds of the observed Earth-bound time.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":471193,"byte_end":471282,"line_start":41,"line_end":41,"column_start":1,"column_end":90}},{"value":"/ When the mean solar day is longer than the ideal (86,400 seconds),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":471283,"byte_end":471353,"line_start":42,"line_end":42,"column_start":1,"column_end":71}},{"value":"/ the error slowly accumulates and it is necessary to add a **leap second**","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":471354,"byte_end":471431,"line_start":43,"line_end":43,"column_start":1,"column_end":78}},{"value":"/ to slow the UTC down a bit.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":471432,"byte_end":471463,"line_start":44,"line_end":44,"column_start":1,"column_end":32}},{"value":"/ (We may also remove a second to speed the UTC up a bit, but it never happened.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":471464,"byte_end":471547,"line_start":45,"line_end":45,"column_start":1,"column_end":84}},{"value":"/ The leap second, if any, follows 23:59:59 of June 30 or December 31 in the UTC.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":471548,"byte_end":471631,"line_start":46,"line_end":46,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":471632,"byte_end":471635,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Fast forward to the 21st century,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":471636,"byte_end":471673,"line_start":48,"line_end":48,"column_start":1,"column_end":38}},{"value":"/ we have seen 26 leap seconds from January 1972 to December 2015.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":471674,"byte_end":471742,"line_start":49,"line_end":49,"column_start":1,"column_end":69}},{"value":"/ Yes, 26 seconds. Probably you can read this paragraph within 26 seconds.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":471743,"byte_end":471819,"line_start":50,"line_end":50,"column_start":1,"column_end":77}},{"value":"/ But those 26 seconds, and possibly more in the future, are never predictable,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":471820,"byte_end":471901,"line_start":51,"line_end":51,"column_start":1,"column_end":82}},{"value":"/ and whether to add a leap second or not is known only before 6 months.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":471902,"byte_end":471976,"line_start":52,"line_end":52,"column_start":1,"column_end":75}},{"value":"/ Internet-based clocks (via NTP) do account for known leap seconds,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":471977,"byte_end":472047,"line_start":53,"line_end":53,"column_start":1,"column_end":71}},{"value":"/ but the system API normally doesn't (and often can't, with no network connection)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":472048,"byte_end":472133,"line_start":54,"line_end":54,"column_start":1,"column_end":86}},{"value":"/ and there is no reliable way to retrieve leap second information.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":472134,"byte_end":472203,"line_start":55,"line_end":55,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":472204,"byte_end":472207,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ Chrono does not try to accurately implement leap seconds; it is impossible.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":472208,"byte_end":472287,"line_start":57,"line_end":57,"column_start":1,"column_end":80}},{"value":"/ Rather, **it allows for leap seconds but behaves as if there are *no other* leap seconds.**","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":472288,"byte_end":472383,"line_start":58,"line_end":58,"column_start":1,"column_end":96}},{"value":"/ Various operations will ignore any possible leap second(s)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":472384,"byte_end":472446,"line_start":59,"line_end":59,"column_start":1,"column_end":63}},{"value":"/ except when any of the operands were actually leap seconds.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":472447,"byte_end":472510,"line_start":60,"line_end":60,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":472511,"byte_end":472514,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ If you cannot tolerate this behavior,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":472515,"byte_end":472556,"line_start":62,"line_end":62,"column_start":1,"column_end":42}},{"value":"/ you must use a separate `TimeZone` for the International Atomic Time (TAI).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":472557,"byte_end":472636,"line_start":63,"line_end":63,"column_start":1,"column_end":80}},{"value":"/ TAI is like UTC but has no leap seconds, and thus slightly differs from UTC.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":472637,"byte_end":472717,"line_start":64,"line_end":64,"column_start":1,"column_end":81}},{"value":"/ Chrono does not yet provide such implementation, but it is planned.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":472718,"byte_end":472789,"line_start":65,"line_end":65,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":472790,"byte_end":472793,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ ## Representing Leap Seconds","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":472794,"byte_end":472826,"line_start":67,"line_end":67,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":472827,"byte_end":472830,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ The leap second is indicated via fractional seconds more than 1 second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":472831,"byte_end":472906,"line_start":69,"line_end":69,"column_start":1,"column_end":76}},{"value":"/ This makes possible to treat a leap second as the prior non-leap second","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":472907,"byte_end":472982,"line_start":70,"line_end":70,"column_start":1,"column_end":76}},{"value":"/ if you don't care about sub-second accuracy.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":472983,"byte_end":473031,"line_start":71,"line_end":71,"column_start":1,"column_end":49}},{"value":"/ You should use the proper formatting to get the raw leap second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":473032,"byte_end":473100,"line_start":72,"line_end":72,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":473101,"byte_end":473104,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ All methods accepting fractional seconds will accept such values.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":473105,"byte_end":473174,"line_start":74,"line_end":74,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":473175,"byte_end":473178,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":473179,"byte_end":473186,"line_start":76,"line_end":76,"column_start":1,"column_end":8}},{"value":"/ use chrono::{NaiveDate, NaiveTime, Utc, TimeZone};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":473187,"byte_end":473241,"line_start":77,"line_end":77,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":473242,"byte_end":473245,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ let t = NaiveTime::from_hms_milli(8, 59, 59, 1_000);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":473246,"byte_end":473302,"line_start":79,"line_end":79,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":473303,"byte_end":473306,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ let dt1 = NaiveDate::from_ymd(2015, 7, 1).and_hms_micro(8, 59, 59, 1_000_000);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":473307,"byte_end":473389,"line_start":81,"line_end":81,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":473390,"byte_end":473393,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ let dt2 = Utc.ymd(2015, 6, 30).and_hms_nano(23, 59, 59, 1_000_000_000);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":473394,"byte_end":473469,"line_start":83,"line_end":83,"column_start":1,"column_end":76}},{"value":"/ # let _ = (t, dt1, dt2);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":473470,"byte_end":473498,"line_start":84,"line_end":84,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":473499,"byte_end":473506,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":473507,"byte_end":473510,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ Note that the leap second can happen anytime given an appropriate time zone;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":473511,"byte_end":473591,"line_start":87,"line_end":87,"column_start":1,"column_end":81}},{"value":"/ 2015-07-01 01:23:60 would be a proper leap second if UTC+01:24 had existed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":473592,"byte_end":473671,"line_start":88,"line_end":88,"column_start":1,"column_end":80}},{"value":"/ Practically speaking, though, by the time of the first leap second on 1972-06-30,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":473672,"byte_end":473757,"line_start":89,"line_end":89,"column_start":1,"column_end":86}},{"value":"/ every time zone offset around the world has standardized to the 5-minute alignment.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":473758,"byte_end":473845,"line_start":90,"line_end":90,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":473846,"byte_end":473849,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ ## Date And Time Arithmetics","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":473850,"byte_end":473882,"line_start":92,"line_end":92,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":473883,"byte_end":473886,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ As a concrete example, let's assume that `03:00:60` and `04:00:60` are leap seconds.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":473887,"byte_end":473975,"line_start":94,"line_end":94,"column_start":1,"column_end":89}},{"value":"/ In reality, of course, leap seconds are separated by at least 6 months.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":473976,"byte_end":474051,"line_start":95,"line_end":95,"column_start":1,"column_end":76}},{"value":"/ We will also use some intuitive concise notations for the explanation.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474052,"byte_end":474126,"line_start":96,"line_end":96,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474127,"byte_end":474130,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ `Time + Duration`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474131,"byte_end":474152,"line_start":98,"line_end":98,"column_start":1,"column_end":22}},{"value":"/ (short for [`NaiveTime::overflowing_add_signed`](#method.overflowing_add_signed)):","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474153,"byte_end":474239,"line_start":99,"line_end":99,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474240,"byte_end":474243,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ - `03:00:00 + 1s = 03:00:01`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474244,"byte_end":474277,"line_start":101,"line_end":101,"column_start":1,"column_end":34}},{"value":"/ - `03:00:59 + 60s = 03:02:00`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474278,"byte_end":474312,"line_start":102,"line_end":102,"column_start":1,"column_end":35}},{"value":"/ - `03:00:59 + 1s = 03:01:00`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474313,"byte_end":474346,"line_start":103,"line_end":103,"column_start":1,"column_end":34}},{"value":"/ - `03:00:60 + 1s = 03:01:00`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474347,"byte_end":474380,"line_start":104,"line_end":104,"column_start":1,"column_end":34}},{"value":"/   Note that the sum is identical to the previous.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474381,"byte_end":474434,"line_start":105,"line_end":105,"column_start":1,"column_end":54}},{"value":"/ - `03:00:60 + 60s = 03:01:59`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474435,"byte_end":474469,"line_start":106,"line_end":106,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 + 61s = 03:02:00`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474470,"byte_end":474504,"line_start":107,"line_end":107,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60.1 + 0.8s = 03:00:60.9`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474505,"byte_end":474544,"line_start":108,"line_end":108,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474545,"byte_end":474548,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ `Time - Duration`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474549,"byte_end":474570,"line_start":110,"line_end":110,"column_start":1,"column_end":22}},{"value":"/ (short for [`NaiveTime::overflowing_sub_signed`](#method.overflowing_sub_signed)):","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474571,"byte_end":474657,"line_start":111,"line_end":111,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474658,"byte_end":474661,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ - `03:00:00 - 1s = 02:59:59`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474662,"byte_end":474695,"line_start":113,"line_end":113,"column_start":1,"column_end":34}},{"value":"/ - `03:01:00 - 1s = 03:00:59`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474696,"byte_end":474729,"line_start":114,"line_end":114,"column_start":1,"column_end":34}},{"value":"/ - `03:01:00 - 60s = 03:00:00`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474730,"byte_end":474764,"line_start":115,"line_end":115,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 - 60s = 03:00:00`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474765,"byte_end":474799,"line_start":116,"line_end":116,"column_start":1,"column_end":35}},{"value":"/   Note that the result is identical to the previous.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474800,"byte_end":474856,"line_start":117,"line_end":117,"column_start":1,"column_end":57}},{"value":"/ - `03:00:60.7 - 0.4s = 03:00:60.3`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474857,"byte_end":474896,"line_start":118,"line_end":118,"column_start":1,"column_end":40}},{"value":"/ - `03:00:60.7 - 0.9s = 03:00:59.8`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474897,"byte_end":474936,"line_start":119,"line_end":119,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474937,"byte_end":474940,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ `Time - Time`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474941,"byte_end":474958,"line_start":121,"line_end":121,"column_start":1,"column_end":18}},{"value":"/ (short for [`NaiveTime::signed_duration_since`](#method.signed_duration_since)):","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":474959,"byte_end":475043,"line_start":122,"line_end":122,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":475044,"byte_end":475047,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ - `04:00:00 - 03:00:00 = 3600s`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":475048,"byte_end":475084,"line_start":124,"line_end":124,"column_start":1,"column_end":37}},{"value":"/ - `03:01:00 - 03:00:00 = 60s`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":475085,"byte_end":475119,"line_start":125,"line_end":125,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 - 03:00:00 = 60s`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":475120,"byte_end":475154,"line_start":126,"line_end":126,"column_start":1,"column_end":35}},{"value":"/   Note that the difference is identical to the previous.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":475155,"byte_end":475215,"line_start":127,"line_end":127,"column_start":1,"column_end":61}},{"value":"/ - `03:00:60.6 - 03:00:59.4 = 1.2s`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":475216,"byte_end":475255,"line_start":128,"line_end":128,"column_start":1,"column_end":40}},{"value":"/ - `03:01:00 - 03:00:59.8 = 0.2s`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":475256,"byte_end":475293,"line_start":129,"line_end":129,"column_start":1,"column_end":38}},{"value":"/ - `03:01:00 - 03:00:60.5 = 0.5s`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":475294,"byte_end":475331,"line_start":130,"line_end":130,"column_start":1,"column_end":38}},{"value":"/   Note that the difference is larger than the previous,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":475332,"byte_end":475391,"line_start":131,"line_end":131,"column_start":1,"column_end":60}},{"value":"/   even though the leap second clearly follows the previous whole second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":475392,"byte_end":475468,"line_start":132,"line_end":132,"column_start":1,"column_end":77}},{"value":"/ - `04:00:60.9 - 03:00:60.1 =","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":475469,"byte_end":475501,"line_start":133,"line_end":133,"column_start":1,"column_end":33}},{"value":"/   (04:00:60.9 - 04:00:00) + (04:00:00 - 03:01:00) + (03:01:00 - 03:00:60.1) =","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":475502,"byte_end":475583,"line_start":134,"line_end":134,"column_start":1,"column_end":82}},{"value":"/   60.9s + 3540s + 0.9s = 3601.8s`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":475584,"byte_end":475622,"line_start":135,"line_end":135,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":475623,"byte_end":475626,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ In general,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":475627,"byte_end":475642,"line_start":137,"line_end":137,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":475643,"byte_end":475646,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ - `Time + Duration` unconditionally equals to `Duration + Time`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":475647,"byte_end":475715,"line_start":139,"line_end":139,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":475716,"byte_end":475719,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ - `Time - Duration` unconditionally equals to `Time + (-Duration)`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":475720,"byte_end":475791,"line_start":141,"line_end":141,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":475792,"byte_end":475795,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ - `Time1 - Time2` unconditionally equals to `-(Time2 - Time1)`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":475796,"byte_end":475863,"line_start":143,"line_end":143,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":475864,"byte_end":475867,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ - Associativity does not generally hold, because","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":475868,"byte_end":475920,"line_start":145,"line_end":145,"column_start":1,"column_end":53}},{"value":"/   `(Time + Duration1) - Duration2` no longer equals to `Time + (Duration1 - Duration2)`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":475921,"byte_end":476012,"line_start":146,"line_end":146,"column_start":1,"column_end":92}},{"value":"/   for two positive durations.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476013,"byte_end":476046,"line_start":147,"line_end":147,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476047,"byte_end":476050,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/     - As a special case, `(Time + Duration) - Duration` also does not equal to `Time`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476051,"byte_end":476141,"line_start":149,"line_end":149,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476142,"byte_end":476145,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/     - If you can assume that all durations have the same sign, however,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476146,"byte_end":476221,"line_start":151,"line_end":151,"column_start":1,"column_end":76}},{"value":"/       then the associativity holds:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476222,"byte_end":476261,"line_start":152,"line_end":152,"column_start":1,"column_end":40}},{"value":"/       `(Time + Duration1) + Duration2` equals to `Time + (Duration1 + Duration2)`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476262,"byte_end":476347,"line_start":153,"line_end":153,"column_start":1,"column_end":86}},{"value":"/       for two positive durations.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476348,"byte_end":476385,"line_start":154,"line_end":154,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476386,"byte_end":476389,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ ## Reading And Writing Leap Seconds","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476390,"byte_end":476429,"line_start":156,"line_end":156,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476430,"byte_end":476433,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ The \"typical\" leap seconds on the minute boundary are","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476434,"byte_end":476491,"line_start":158,"line_end":158,"column_start":1,"column_end":58}},{"value":"/ correctly handled both in the formatting and parsing.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476492,"byte_end":476549,"line_start":159,"line_end":159,"column_start":1,"column_end":58}},{"value":"/ The leap second in the human-readable representation","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476550,"byte_end":476606,"line_start":160,"line_end":160,"column_start":1,"column_end":57}},{"value":"/ will be represented as the second part being 60, as required by ISO 8601.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476607,"byte_end":476684,"line_start":161,"line_end":161,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476685,"byte_end":476688,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476689,"byte_end":476696,"line_start":163,"line_end":163,"column_start":1,"column_end":8}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476697,"byte_end":476729,"line_start":164,"line_end":164,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476730,"byte_end":476733,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms_milli(23, 59, 59, 1_000);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476734,"byte_end":476801,"line_start":166,"line_end":166,"column_start":1,"column_end":68}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:59:60Z\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476802,"byte_end":476862,"line_start":167,"line_end":167,"column_start":1,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476863,"byte_end":476870,"line_start":168,"line_end":168,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476871,"byte_end":476874,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ There are hypothetical leap seconds not on the minute boundary","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476875,"byte_end":476941,"line_start":170,"line_end":170,"column_start":1,"column_end":67}},{"value":"/ nevertheless supported by Chrono.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476942,"byte_end":476979,"line_start":171,"line_end":171,"column_start":1,"column_end":38}},{"value":"/ They are allowed for the sake of completeness and consistency;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":476980,"byte_end":477046,"line_start":172,"line_end":172,"column_start":1,"column_end":67}},{"value":"/ there were several \"exotic\" time zone offsets with fractional minutes prior to UTC after all.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":477047,"byte_end":477144,"line_start":173,"line_end":173,"column_start":1,"column_end":98}},{"value":"/ For such cases the human-readable representation is ambiguous","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":477145,"byte_end":477210,"line_start":174,"line_end":174,"column_start":1,"column_end":66}},{"value":"/ and would be read back to the next non-leap second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":477211,"byte_end":477266,"line_start":175,"line_end":175,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":477267,"byte_end":477270,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":477271,"byte_end":477278,"line_start":177,"line_end":177,"column_start":1,"column_end":8}},{"value":"/ use chrono::{DateTime, Utc, TimeZone};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":477279,"byte_end":477321,"line_start":178,"line_end":178,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":477322,"byte_end":477325,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms_milli(23, 56, 4, 1_000);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":477326,"byte_end":477392,"line_start":180,"line_end":180,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:56:05Z\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":477393,"byte_end":477453,"line_start":181,"line_end":181,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":477454,"byte_end":477457,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms(23, 56, 5);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":477458,"byte_end":477511,"line_start":183,"line_end":183,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:56:05Z\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":477512,"byte_end":477572,"line_start":184,"line_end":184,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(DateTime::parse_from_rfc3339(\"2015-06-30T23:56:05Z\").unwrap(), dt);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":477573,"byte_end":477655,"line_start":185,"line_end":185,"column_start":1,"column_end":83}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":477656,"byte_end":477663,"line_start":186,"line_end":186,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":477664,"byte_end":477667,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ Since Chrono alone cannot determine any existence of leap seconds,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":477668,"byte_end":477738,"line_start":188,"line_end":188,"column_start":1,"column_end":71}},{"value":"/ **there is absolutely no guarantee that the leap second read has actually happened**.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":477739,"byte_end":477828,"line_start":189,"line_end":189,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1652},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478637,"byte_end":478645,"line_start":217,"line_end":217,"column_start":12,"column_end":20},"name":"from_hms","qualname":"<NaiveTime>::from_hms","value":"fn from_hms(u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478038,"byte_end":478095,"line_start":198,"line_end":198,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478100,"byte_end":478103,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ No [leap second](#leap-second-handling) is allowed here;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478108,"byte_end":478168,"line_start":200,"line_end":200,"column_start":5,"column_end":65}},{"value":"/ use `NaiveTime::from_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478173,"byte_end":478248,"line_start":201,"line_end":201,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478253,"byte_end":478256,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478261,"byte_end":478310,"line_start":203,"line_end":203,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478315,"byte_end":478318,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478323,"byte_end":478336,"line_start":205,"line_end":205,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478341,"byte_end":478344,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478349,"byte_end":478356,"line_start":207,"line_end":207,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478361,"byte_end":478399,"line_start":208,"line_end":208,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478404,"byte_end":478407,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478412,"byte_end":478455,"line_start":210,"line_end":210,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478460,"byte_end":478489,"line_start":211,"line_end":211,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478494,"byte_end":478525,"line_start":212,"line_end":212,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478530,"byte_end":478560,"line_start":213,"line_end":213,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 0);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478565,"byte_end":478599,"line_start":214,"line_end":214,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478604,"byte_end":478611,"line_start":215,"line_end":215,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478616,"byte_end":478625,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1653},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479500,"byte_end":479512,"line_start":242,"line_end":242,"column_start":12,"column_end":24},"name":"from_hms_opt","qualname":"<NaiveTime>::from_hms_opt","value":"fn from_hms_opt(u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478774,"byte_end":478831,"line_start":221,"line_end":221,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478836,"byte_end":478839,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ No [leap second](#leap-second-handling) is allowed here;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478844,"byte_end":478904,"line_start":223,"line_end":223,"column_start":5,"column_end":65}},{"value":"/ use `NaiveTime::from_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478909,"byte_end":478988,"line_start":224,"line_end":224,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478993,"byte_end":478996,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479001,"byte_end":479058,"line_start":226,"line_end":226,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479063,"byte_end":479066,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479071,"byte_end":479084,"line_start":228,"line_end":228,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479089,"byte_end":479092,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479097,"byte_end":479104,"line_start":230,"line_end":230,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479109,"byte_end":479135,"line_start":231,"line_end":231,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479140,"byte_end":479143,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ let from_hms_opt = NaiveTime::from_hms_opt;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479148,"byte_end":479195,"line_start":233,"line_end":233,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479200,"byte_end":479203,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hms_opt(0, 0, 0).is_some());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479208,"byte_end":479253,"line_start":235,"line_end":235,"column_start":5,"column_end":50}},{"value":"/ assert!(from_hms_opt(23, 59, 59).is_some());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479258,"byte_end":479306,"line_start":236,"line_end":236,"column_start":5,"column_end":53}},{"value":"/ assert!(from_hms_opt(24, 0, 0).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479311,"byte_end":479357,"line_start":237,"line_end":237,"column_start":5,"column_end":51}},{"value":"/ assert!(from_hms_opt(23, 60, 0).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479362,"byte_end":479409,"line_start":238,"line_end":238,"column_start":5,"column_end":52}},{"value":"/ assert!(from_hms_opt(23, 59, 60).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479414,"byte_end":479462,"line_start":239,"line_end":239,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479467,"byte_end":479474,"line_start":240,"line_end":240,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479479,"byte_end":479488,"line_start":241,"line_end":241,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1654},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":480251,"byte_end":480265,"line_start":265,"line_end":265,"column_start":12,"column_end":26},"name":"from_hms_milli","qualname":"<NaiveTime>::from_hms_milli","value":"fn from_hms_milli(u32, u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479634,"byte_end":479704,"line_start":246,"line_end":246,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479709,"byte_end":479712,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479717,"byte_end":479758,"line_start":248,"line_end":248,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479763,"byte_end":479830,"line_start":249,"line_end":249,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479835,"byte_end":479838,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479843,"byte_end":479905,"line_start":251,"line_end":251,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479910,"byte_end":479913,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479918,"byte_end":479931,"line_start":253,"line_end":253,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479936,"byte_end":479939,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479944,"byte_end":479951,"line_start":255,"line_end":255,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479956,"byte_end":479994,"line_start":256,"line_end":256,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":479999,"byte_end":480002,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_milli(23, 56, 4, 12);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":480007,"byte_end":480060,"line_start":258,"line_end":258,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":480065,"byte_end":480094,"line_start":259,"line_end":259,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":480099,"byte_end":480130,"line_start":260,"line_end":260,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":480135,"byte_end":480165,"line_start":261,"line_end":261,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_000_000);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":480170,"byte_end":480213,"line_start":262,"line_end":262,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":480218,"byte_end":480225,"line_start":263,"line_end":263,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":480230,"byte_end":480239,"line_start":264,"line_end":264,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1655},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":481323,"byte_end":481341,"line_start":292,"line_end":292,"column_start":12,"column_end":30},"name":"from_hms_milli_opt","qualname":"<NaiveTime>::from_hms_milli_opt","value":"fn from_hms_milli_opt(u32, u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":480419,"byte_end":480489,"line_start":269,"line_end":269,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":480494,"byte_end":480497,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":480502,"byte_end":480543,"line_start":271,"line_end":271,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":480548,"byte_end":480615,"line_start":272,"line_end":272,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":480620,"byte_end":480623,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":480628,"byte_end":480698,"line_start":274,"line_end":274,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":480703,"byte_end":480706,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":480711,"byte_end":480724,"line_start":276,"line_end":276,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":480729,"byte_end":480732,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":480737,"byte_end":480744,"line_start":278,"line_end":278,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":480749,"byte_end":480775,"line_start":279,"line_end":279,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":480780,"byte_end":480783,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ let from_hmsm_opt = NaiveTime::from_hms_milli_opt;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":480788,"byte_end":480842,"line_start":281,"line_end":281,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":480847,"byte_end":480850,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsm_opt(0, 0, 0, 0).is_some());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":480855,"byte_end":480904,"line_start":283,"line_end":283,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 999).is_some());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":480909,"byte_end":480963,"line_start":284,"line_end":284,"column_start":5,"column_end":59}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 1_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":480968,"byte_end":481056,"line_start":285,"line_end":285,"column_start":5,"column_end":93}},{"value":"/ assert!(from_hmsm_opt(24, 0, 0, 0).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":481061,"byte_end":481111,"line_start":286,"line_end":286,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsm_opt(23, 60, 0, 0).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":481116,"byte_end":481167,"line_start":287,"line_end":287,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsm_opt(23, 59, 60, 0).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":481172,"byte_end":481224,"line_start":288,"line_end":288,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 2_000).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":481229,"byte_end":481285,"line_start":289,"line_end":289,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":481290,"byte_end":481297,"line_start":290,"line_end":290,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":481302,"byte_end":481311,"line_start":291,"line_end":291,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1657},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":482175,"byte_end":482189,"line_start":317,"line_end":317,"column_start":12,"column_end":26},"name":"from_hms_micro","qualname":"<NaiveTime>::from_hms_micro","value":"fn from_hms_micro(u32, u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":481550,"byte_end":481620,"line_start":298,"line_end":298,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":481625,"byte_end":481628,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":481633,"byte_end":481678,"line_start":300,"line_end":300,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":481683,"byte_end":481750,"line_start":301,"line_end":301,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":481755,"byte_end":481758,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":481763,"byte_end":481825,"line_start":303,"line_end":303,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":481830,"byte_end":481833,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":481838,"byte_end":481851,"line_start":305,"line_end":305,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":481856,"byte_end":481859,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":481864,"byte_end":481871,"line_start":307,"line_end":307,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":481876,"byte_end":481914,"line_start":308,"line_end":308,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":481919,"byte_end":481922,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_micro(23, 56, 4, 12_345);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":481927,"byte_end":481984,"line_start":310,"line_end":310,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":481989,"byte_end":482018,"line_start":311,"line_end":311,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":482023,"byte_end":482054,"line_start":312,"line_end":312,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":482059,"byte_end":482089,"line_start":313,"line_end":313,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_000);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":482094,"byte_end":482137,"line_start":314,"line_end":314,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":482142,"byte_end":482149,"line_start":315,"line_end":315,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":482154,"byte_end":482163,"line_start":316,"line_end":316,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1658},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":483263,"byte_end":483281,"line_start":344,"line_end":344,"column_start":12,"column_end":30},"name":"from_hms_micro_opt","qualname":"<NaiveTime>::from_hms_micro_opt","value":"fn from_hms_micro_opt(u32, u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":482343,"byte_end":482413,"line_start":321,"line_end":321,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":482418,"byte_end":482421,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":482426,"byte_end":482471,"line_start":323,"line_end":323,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":482476,"byte_end":482543,"line_start":324,"line_end":324,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":482548,"byte_end":482551,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":482556,"byte_end":482626,"line_start":326,"line_end":326,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":482631,"byte_end":482634,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":482639,"byte_end":482652,"line_start":328,"line_end":328,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":482657,"byte_end":482660,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":482665,"byte_end":482672,"line_start":330,"line_end":330,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":482677,"byte_end":482703,"line_start":331,"line_end":331,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":482708,"byte_end":482711,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ let from_hmsu_opt = NaiveTime::from_hms_micro_opt;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":482716,"byte_end":482770,"line_start":333,"line_end":333,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":482775,"byte_end":482778,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsu_opt(0, 0, 0, 0).is_some());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":482783,"byte_end":482832,"line_start":335,"line_end":335,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 999_999).is_some());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":482837,"byte_end":482895,"line_start":336,"line_end":336,"column_start":5,"column_end":63}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 1_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":482900,"byte_end":482992,"line_start":337,"line_end":337,"column_start":5,"column_end":97}},{"value":"/ assert!(from_hmsu_opt(24, 0, 0, 0).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":482997,"byte_end":483047,"line_start":338,"line_end":338,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsu_opt(23, 60, 0, 0).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":483052,"byte_end":483103,"line_start":339,"line_end":339,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsu_opt(23, 59, 60, 0).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":483108,"byte_end":483160,"line_start":340,"line_end":340,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 2_000_000).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":483165,"byte_end":483225,"line_start":341,"line_end":341,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":483230,"byte_end":483237,"line_start":342,"line_end":342,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":483242,"byte_end":483251,"line_start":343,"line_end":343,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1660},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":484089,"byte_end":484102,"line_start":367,"line_end":367,"column_start":12,"column_end":25},"name":"from_hms_nano","qualname":"<NaiveTime>::from_hms_nano","value":"fn from_hms_nano(u32, u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":483460,"byte_end":483529,"line_start":348,"line_end":348,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":483534,"byte_end":483537,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":483542,"byte_end":483590,"line_start":350,"line_end":350,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":483595,"byte_end":483662,"line_start":351,"line_end":351,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":483667,"byte_end":483670,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":483675,"byte_end":483736,"line_start":353,"line_end":353,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":483741,"byte_end":483744,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":483749,"byte_end":483762,"line_start":355,"line_end":355,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":483767,"byte_end":483770,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":483775,"byte_end":483782,"line_start":357,"line_end":357,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":483787,"byte_end":483825,"line_start":358,"line_end":358,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":483830,"byte_end":483833,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":483838,"byte_end":483898,"line_start":360,"line_end":360,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":483903,"byte_end":483932,"line_start":361,"line_end":361,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":483937,"byte_end":483968,"line_start":362,"line_end":362,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":483973,"byte_end":484003,"line_start":363,"line_end":363,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":484008,"byte_end":484051,"line_start":364,"line_end":364,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":484056,"byte_end":484063,"line_start":365,"line_end":365,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":484068,"byte_end":484077,"line_start":366,"line_end":366,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1661},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":485185,"byte_end":485202,"line_start":394,"line_end":394,"column_start":12,"column_end":29},"name":"from_hms_nano_opt","qualname":"<NaiveTime>::from_hms_nano_opt","value":"fn from_hms_nano_opt(u32, u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":484253,"byte_end":484322,"line_start":371,"line_end":371,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":484327,"byte_end":484330,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":484335,"byte_end":484383,"line_start":373,"line_end":373,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":484388,"byte_end":484455,"line_start":374,"line_end":374,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":484460,"byte_end":484463,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":484468,"byte_end":484537,"line_start":376,"line_end":376,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":484542,"byte_end":484545,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":484550,"byte_end":484563,"line_start":378,"line_end":378,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":484568,"byte_end":484571,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":484576,"byte_end":484583,"line_start":380,"line_end":380,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":484588,"byte_end":484614,"line_start":381,"line_end":381,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":484619,"byte_end":484622,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ let from_hmsn_opt = NaiveTime::from_hms_nano_opt;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":484627,"byte_end":484680,"line_start":383,"line_end":383,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":484685,"byte_end":484688,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsn_opt(0, 0, 0, 0).is_some());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":484693,"byte_end":484742,"line_start":385,"line_end":385,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 999_999_999).is_some());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":484747,"byte_end":484809,"line_start":386,"line_end":386,"column_start":5,"column_end":67}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 1_999_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":484814,"byte_end":484910,"line_start":387,"line_end":387,"column_start":5,"column_end":101}},{"value":"/ assert!(from_hmsn_opt(24, 0, 0, 0).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":484915,"byte_end":484965,"line_start":388,"line_end":388,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsn_opt(23, 60, 0, 0).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":484970,"byte_end":485021,"line_start":389,"line_end":389,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsn_opt(23, 59, 60, 0).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":485026,"byte_end":485078,"line_start":390,"line_end":390,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 2_000_000_000).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":485083,"byte_end":485147,"line_start":391,"line_end":391,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":485152,"byte_end":485159,"line_start":392,"line_end":392,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":485164,"byte_end":485173,"line_start":393,"line_end":393,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1662},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":486138,"byte_end":486168,"line_start":421,"line_end":421,"column_start":12,"column_end":42},"name":"from_num_seconds_from_midnight","qualname":"<NaiveTime>::from_num_seconds_from_midnight","value":"fn from_num_seconds_from_midnight(u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":485483,"byte_end":485568,"line_start":402,"line_end":402,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":485573,"byte_end":485576,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":485581,"byte_end":485629,"line_start":404,"line_end":404,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":485634,"byte_end":485701,"line_start":405,"line_end":405,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":485706,"byte_end":485709,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid number of seconds and/or nanosecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":485714,"byte_end":485772,"line_start":407,"line_end":407,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":485777,"byte_end":485780,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":485785,"byte_end":485798,"line_start":409,"line_end":409,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":485803,"byte_end":485806,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":485811,"byte_end":485818,"line_start":411,"line_end":411,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":485823,"byte_end":485861,"line_start":412,"line_end":412,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":485866,"byte_end":485869,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_num_seconds_from_midnight(86164, 12_345_678);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":485874,"byte_end":485947,"line_start":414,"line_end":414,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":485952,"byte_end":485981,"line_start":415,"line_end":415,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":485986,"byte_end":486017,"line_start":416,"line_end":416,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":486022,"byte_end":486052,"line_start":417,"line_end":417,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":486057,"byte_end":486100,"line_start":418,"line_end":418,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":486105,"byte_end":486112,"line_start":419,"line_end":419,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":486117,"byte_end":486126,"line_start":420,"line_end":420,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1663},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":487138,"byte_end":487172,"line_start":446,"line_end":446,"column_start":12,"column_end":46},"name":"from_num_seconds_from_midnight_opt","qualname":"<NaiveTime>::from_num_seconds_from_midnight_opt","value":"fn from_num_seconds_from_midnight_opt(u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":486306,"byte_end":486391,"line_start":425,"line_end":425,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":486396,"byte_end":486399,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":486404,"byte_end":486452,"line_start":427,"line_end":427,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":486457,"byte_end":486524,"line_start":428,"line_end":428,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":486529,"byte_end":486532,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid number of seconds and/or nanosecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":486537,"byte_end":486603,"line_start":430,"line_end":430,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":486608,"byte_end":486611,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":486616,"byte_end":486629,"line_start":432,"line_end":432,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":486634,"byte_end":486637,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":486642,"byte_end":486649,"line_start":434,"line_end":434,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":486654,"byte_end":486680,"line_start":435,"line_end":435,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":486685,"byte_end":486688,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ let from_nsecs_opt = NaiveTime::from_num_seconds_from_midnight_opt;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":486693,"byte_end":486764,"line_start":437,"line_end":437,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":486769,"byte_end":486772,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ assert!(from_nsecs_opt(0, 0).is_some());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":486777,"byte_end":486821,"line_start":439,"line_end":439,"column_start":5,"column_end":49}},{"value":"/ assert!(from_nsecs_opt(86399, 999_999_999).is_some());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":486826,"byte_end":486884,"line_start":440,"line_end":440,"column_start":5,"column_end":63}},{"value":"/ assert!(from_nsecs_opt(86399, 1_999_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":486889,"byte_end":486981,"line_start":441,"line_end":441,"column_start":5,"column_end":97}},{"value":"/ assert!(from_nsecs_opt(86_400, 0).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":486986,"byte_end":487035,"line_start":442,"line_end":442,"column_start":5,"column_end":54}},{"value":"/ assert!(from_nsecs_opt(86399, 2_000_000_000).is_none());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":487040,"byte_end":487100,"line_start":443,"line_end":443,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":487105,"byte_end":487112,"line_start":444,"line_end":444,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":487117,"byte_end":487126,"line_start":445,"line_end":445,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1664},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":489826,"byte_end":489840,"line_start":514,"line_end":514,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveTime>::parse_from_str","value":"fn parse_from_str<'_, '_>(&'_ str, &'_ str) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveTime`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":487362,"byte_end":487445,"line_start":453,"line_end":453,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":487450,"byte_end":487520,"line_start":454,"line_end":454,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":487525,"byte_end":487563,"line_start":455,"line_end":455,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":487568,"byte_end":487571,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":487576,"byte_end":487589,"line_start":457,"line_end":457,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":487594,"byte_end":487597,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":487602,"byte_end":487609,"line_start":459,"line_end":459,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":487614,"byte_end":487640,"line_start":460,"line_end":460,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":487645,"byte_end":487648,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":487653,"byte_end":487704,"line_start":462,"line_end":462,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":487709,"byte_end":487712,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"23:56:04\", \"%H:%M:%S\"),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":487717,"byte_end":487771,"line_start":464,"line_end":464,"column_start":5,"column_end":59}},{"value":"/            Ok(NaiveTime::from_hms(23, 56, 4)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":487776,"byte_end":487827,"line_start":465,"line_end":465,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(parse_from_str(\"pm012345.6789\", \"%p%I%M%S%.f\"),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":487832,"byte_end":487894,"line_start":466,"line_end":466,"column_start":5,"column_end":67}},{"value":"/            Ok(NaiveTime::from_hms_micro(13, 23, 45, 678_900)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":487899,"byte_end":487966,"line_start":467,"line_end":467,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":487971,"byte_end":487978,"line_start":468,"line_end":468,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":487983,"byte_end":487986,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ Date and offset is ignored for the purpose of parsing.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":487991,"byte_end":488049,"line_start":470,"line_end":470,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":488054,"byte_end":488057,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":488062,"byte_end":488069,"line_start":472,"line_end":472,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":488074,"byte_end":488102,"line_start":473,"line_end":473,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":488107,"byte_end":488160,"line_start":474,"line_end":474,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":488165,"byte_end":488246,"line_start":475,"line_end":475,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveTime::from_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":488251,"byte_end":488303,"line_start":476,"line_end":476,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":488308,"byte_end":488315,"line_start":477,"line_end":477,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":488320,"byte_end":488323,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ [Leap seconds](#leap-second-handling) are correctly handled by","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":488328,"byte_end":488394,"line_start":479,"line_end":479,"column_start":5,"column_end":71}},{"value":"/ treating any time of the form `hh:mm:60` as a leap second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":488399,"byte_end":488461,"line_start":480,"line_end":480,"column_start":5,"column_end":67}},{"value":"/ (This equally applies to the formatting, so the round trip is possible.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":488466,"byte_end":488542,"line_start":481,"line_end":481,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":488547,"byte_end":488550,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":488555,"byte_end":488562,"line_start":483,"line_end":483,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":488567,"byte_end":488595,"line_start":484,"line_end":484,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":488600,"byte_end":488653,"line_start":485,"line_end":485,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"08:59:60.123\", \"%H:%M:%S%.f\"),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":488658,"byte_end":488719,"line_start":486,"line_end":486,"column_start":5,"column_end":66}},{"value":"/            Ok(NaiveTime::from_hms_milli(8, 59, 59, 1_123)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":488724,"byte_end":488788,"line_start":487,"line_end":487,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":488793,"byte_end":488800,"line_start":488,"line_end":488,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":488805,"byte_end":488808,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ Missing seconds are assumed to be zero,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":488813,"byte_end":488856,"line_start":490,"line_end":490,"column_start":5,"column_end":48}},{"value":"/ but out-of-bound times or insufficient fields are errors otherwise.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":488861,"byte_end":488932,"line_start":491,"line_end":491,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":488937,"byte_end":488940,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":488945,"byte_end":488952,"line_start":493,"line_end":493,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":488957,"byte_end":488985,"line_start":494,"line_end":494,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":488990,"byte_end":489043,"line_start":495,"line_end":495,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"7:15\", \"%H:%M\"),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":489048,"byte_end":489095,"line_start":496,"line_end":496,"column_start":5,"column_end":52}},{"value":"/            Ok(NaiveTime::from_hms(7, 15, 0)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":489100,"byte_end":489150,"line_start":497,"line_end":497,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":489155,"byte_end":489158,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":489163,"byte_end":489220,"line_start":499,"line_end":499,"column_start":5,"column_end":62}},{"value":"/ assert!(parse_from_str(\"12\", \"%H\").is_err());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":489225,"byte_end":489274,"line_start":500,"line_end":500,"column_start":5,"column_end":54}},{"value":"/ assert!(parse_from_str(\"17:60\", \"%H:%M\").is_err());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":489279,"byte_end":489334,"line_start":501,"line_end":501,"column_start":5,"column_end":60}},{"value":"/ assert!(parse_from_str(\"24:00:00\", \"%H:%M:%S\").is_err());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":489339,"byte_end":489400,"line_start":502,"line_end":502,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":489405,"byte_end":489412,"line_start":503,"line_end":503,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":489417,"byte_end":489420,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":489425,"byte_end":489507,"line_start":505,"line_end":505,"column_start":5,"column_end":87}},{"value":"/ Here `%H` is for 24-hour clocks, unlike `%I`,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":489512,"byte_end":489561,"line_start":506,"line_end":506,"column_start":5,"column_end":54}},{"value":"/ and thus can be independently determined without AM/PM.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":489566,"byte_end":489625,"line_start":507,"line_end":507,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":489630,"byte_end":489633,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":489638,"byte_end":489645,"line_start":509,"line_end":509,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":489650,"byte_end":489678,"line_start":510,"line_end":510,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":489683,"byte_end":489736,"line_start":511,"line_end":511,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"13:07 AM\", \"%H:%M %p\").is_err());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":489741,"byte_end":489802,"line_start":512,"line_end":512,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":489807,"byte_end":489814,"line_start":513,"line_end":513,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1665},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":490839,"byte_end":490861,"line_start":539,"line_end":539,"column_start":12,"column_end":34},"name":"overflowing_add_signed","qualname":"<NaiveTime>::overflowing_add_signed","value":"fn overflowing_add_signed<'_>(&'_ Self, OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the addition.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current time,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":490028,"byte_end":490074,"line_start":520,"line_end":520,"column_start":5,"column_end":51}},{"value":"/ and also returns the number of *seconds*","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":490079,"byte_end":490123,"line_start":521,"line_end":521,"column_start":5,"column_end":49}},{"value":"/ in the integral number of days ignored from the addition.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":490128,"byte_end":490189,"line_start":522,"line_end":522,"column_start":5,"column_end":66}},{"value":"/ (We cannot return `Duration` because it is subject to overflow or underflow.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":490194,"byte_end":490275,"line_start":523,"line_end":523,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":490280,"byte_end":490283,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":490288,"byte_end":490301,"line_start":525,"line_end":525,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":490306,"byte_end":490309,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":490314,"byte_end":490321,"line_start":527,"line_end":527,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Duration, NaiveTime};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":490326,"byte_end":490364,"line_start":528,"line_end":528,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":490369,"byte_end":490372,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ let from_hms = NaiveTime::from_hms;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":490377,"byte_end":490416,"line_start":530,"line_end":530,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":490421,"byte_end":490424,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(11)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":490429,"byte_end":490506,"line_start":532,"line_end":532,"column_start":5,"column_end":82}},{"value":"/            (from_hms(14, 4, 5), 0));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":490511,"byte_end":490551,"line_start":533,"line_end":533,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(23)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":490556,"byte_end":490633,"line_start":534,"line_end":534,"column_start":5,"column_end":82}},{"value":"/            (from_hms(2, 4, 5), 86_400));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":490638,"byte_end":490682,"line_start":535,"line_end":535,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(-7)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":490687,"byte_end":490764,"line_start":536,"line_end":536,"column_start":5,"column_end":82}},{"value":"/            (from_hms(20, 4, 5), -86_400));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":490769,"byte_end":490815,"line_start":537,"line_end":537,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":490820,"byte_end":490827,"line_start":538,"line_end":538,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1666},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":494269,"byte_end":494291,"line_start":622,"line_end":622,"column_start":12,"column_end":34},"name":"overflowing_sub_signed","qualname":"<NaiveTime>::overflowing_sub_signed","value":"fn overflowing_sub_signed<'_>(&'_ Self, OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the subtraction.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current time,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":493435,"byte_end":493488,"line_start":602,"line_end":602,"column_start":5,"column_end":58}},{"value":"/ and also returns the number of *seconds*","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":493493,"byte_end":493537,"line_start":603,"line_end":603,"column_start":5,"column_end":49}},{"value":"/ in the integral number of days ignored from the subtraction.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":493542,"byte_end":493606,"line_start":604,"line_end":604,"column_start":5,"column_end":69}},{"value":"/ (We cannot return `Duration` because it is subject to overflow or underflow.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":493611,"byte_end":493692,"line_start":605,"line_end":605,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":493697,"byte_end":493700,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":493705,"byte_end":493718,"line_start":607,"line_end":607,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":493723,"byte_end":493726,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":493731,"byte_end":493738,"line_start":609,"line_end":609,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Duration, NaiveTime};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":493743,"byte_end":493781,"line_start":610,"line_end":610,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":493786,"byte_end":493789,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ let from_hms = NaiveTime::from_hms;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":493794,"byte_end":493833,"line_start":612,"line_end":612,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":493838,"byte_end":493841,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(2)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":493846,"byte_end":493922,"line_start":614,"line_end":614,"column_start":5,"column_end":81}},{"value":"/            (from_hms(1, 4, 5), 0));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":493927,"byte_end":493966,"line_start":615,"line_end":615,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(17)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":493971,"byte_end":494048,"line_start":616,"line_end":616,"column_start":5,"column_end":82}},{"value":"/            (from_hms(10, 4, 5), 86_400));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":494053,"byte_end":494098,"line_start":617,"line_end":617,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(-22)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":494103,"byte_end":494181,"line_start":618,"line_end":618,"column_start":5,"column_end":83}},{"value":"/            (from_hms(1, 4, 5), -86_400));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":494186,"byte_end":494231,"line_start":619,"line_end":619,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":494236,"byte_end":494243,"line_start":620,"line_end":620,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":494248,"byte_end":494257,"line_start":621,"line_end":621,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1667},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":497159,"byte_end":497180,"line_start":681,"line_end":681,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveTime>::signed_duration_since","value":"fn signed_duration_since(Self, NaiveTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveTime` from the current time.\n Returns a `Duration` within +/- 1 day.\n This does not overflow or underflow at all.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveTime` from the current time.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":494483,"byte_end":494539,"line_start":627,"line_end":627,"column_start":5,"column_end":61}},{"value":"/ Returns a `Duration` within +/- 1 day.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":494544,"byte_end":494586,"line_start":628,"line_end":628,"column_start":5,"column_end":47}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":494591,"byte_end":494638,"line_start":629,"line_end":629,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":494643,"byte_end":494646,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](#leap-second-handling),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":494651,"byte_end":494723,"line_start":631,"line_end":631,"column_start":5,"column_end":77}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":494728,"byte_end":494794,"line_start":632,"line_end":632,"column_start":5,"column_end":71}},{"value":"/ except when any of the `NaiveTime`s themselves represents a leap second","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":494799,"byte_end":494874,"line_start":633,"line_end":633,"column_start":5,"column_end":80}},{"value":"/ in which case the assumption becomes that","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":494879,"byte_end":494924,"line_start":634,"line_end":634,"column_start":5,"column_end":50}},{"value":"/ **there are exactly one (or two) leap second(s) ever**.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":494929,"byte_end":494988,"line_start":635,"line_end":635,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":494993,"byte_end":494996,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":495001,"byte_end":495014,"line_start":637,"line_end":637,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":495019,"byte_end":495022,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":495027,"byte_end":495034,"line_start":639,"line_end":639,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Duration, NaiveTime};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":495039,"byte_end":495077,"line_start":640,"line_end":640,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":495082,"byte_end":495085,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ let from_hmsm = NaiveTime::from_hms_milli;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":495090,"byte_end":495136,"line_start":642,"line_end":642,"column_start":5,"column_end":51}},{"value":"/ let since = NaiveTime::signed_duration_since;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":495141,"byte_end":495190,"line_start":643,"line_end":643,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":495195,"byte_end":495198,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 900)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":495203,"byte_end":495274,"line_start":645,"line_end":645,"column_start":5,"column_end":76}},{"value":"/            Duration::zero());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":495279,"byte_end":495312,"line_start":646,"line_end":646,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 875)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":495317,"byte_end":495388,"line_start":647,"line_end":647,"column_start":5,"column_end":76}},{"value":"/            Duration::milliseconds(25));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":495393,"byte_end":495436,"line_start":648,"line_end":648,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 6, 925)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":495441,"byte_end":495512,"line_start":649,"line_end":649,"column_start":5,"column_end":76}},{"value":"/            Duration::milliseconds(975));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":495517,"byte_end":495561,"line_start":650,"line_end":650,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 0, 900)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":495566,"byte_end":495637,"line_start":651,"line_end":651,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(7));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":495642,"byte_end":495679,"line_start":652,"line_end":652,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 0, 7, 900)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":495684,"byte_end":495755,"line_start":653,"line_end":653,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(5 * 60));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":495760,"byte_end":495802,"line_start":654,"line_end":654,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(0, 5, 7, 900)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":495807,"byte_end":495878,"line_start":655,"line_end":655,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(3 * 3600));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":495883,"byte_end":495927,"line_start":656,"line_end":656,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(4, 5, 7, 900)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":495932,"byte_end":496003,"line_start":657,"line_end":657,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(-3600));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":496008,"byte_end":496049,"line_start":658,"line_end":658,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(2, 4, 6, 800)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":496054,"byte_end":496125,"line_start":659,"line_end":659,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(3600 + 60 + 1) + Duration::milliseconds(100));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":496130,"byte_end":496209,"line_start":660,"line_end":660,"column_start":5,"column_end":84}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":496214,"byte_end":496221,"line_start":661,"line_end":661,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":496226,"byte_end":496229,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled, but the subtraction assumes that","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":496234,"byte_end":496296,"line_start":663,"line_end":663,"column_start":5,"column_end":67}},{"value":"/ there were no other leap seconds happened.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":496301,"byte_end":496347,"line_start":664,"line_end":664,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":496352,"byte_end":496355,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":496360,"byte_end":496367,"line_start":666,"line_end":666,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{Duration, NaiveTime};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":496372,"byte_end":496412,"line_start":667,"line_end":667,"column_start":5,"column_end":45}},{"value":"/ # let from_hmsm = NaiveTime::from_hms_milli;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":496417,"byte_end":496465,"line_start":668,"line_end":668,"column_start":5,"column_end":53}},{"value":"/ # let since = NaiveTime::signed_duration_since;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":496470,"byte_end":496521,"line_start":669,"line_end":669,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 59, 0)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":496526,"byte_end":496599,"line_start":670,"line_end":670,"column_start":5,"column_end":78}},{"value":"/            Duration::seconds(1));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":496604,"byte_end":496641,"line_start":671,"line_end":671,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_500), from_hmsm(3, 0, 59, 0)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":496646,"byte_end":496719,"line_start":672,"line_end":672,"column_start":5,"column_end":78}},{"value":"/            Duration::milliseconds(1500));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":496724,"byte_end":496769,"line_start":673,"line_end":673,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 0, 0)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":496774,"byte_end":496846,"line_start":674,"line_end":674,"column_start":5,"column_end":77}},{"value":"/            Duration::seconds(60));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":496851,"byte_end":496889,"line_start":675,"line_end":675,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 0, 0), from_hmsm(2, 59, 59, 1_000)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":496894,"byte_end":496967,"line_start":676,"line_end":676,"column_start":5,"column_end":78}},{"value":"/            Duration::seconds(1));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":496972,"byte_end":497009,"line_start":677,"line_end":677,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(2, 59, 59, 1_000)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":497014,"byte_end":497092,"line_start":678,"line_end":678,"column_start":5,"column_end":83}},{"value":"/            Duration::seconds(61));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":497097,"byte_end":497135,"line_start":679,"line_end":679,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":497140,"byte_end":497147,"line_start":680,"line_end":680,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1671},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":499832,"byte_end":499849,"line_start":748,"line_end":748,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveTime>::format_with_items","value":"fn format_with_items<'a, I, B, '_>(&'_ Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified formatting items.\n Otherwise it is the same as the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"/ Formats the time with the specified formatting items.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":498657,"byte_end":498714,"line_start":719,"line_end":719,"column_start":5,"column_end":62}},{"value":"/ Otherwise it is the same as the ordinary [`format`](#method.format) method.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":498719,"byte_end":498798,"line_start":720,"line_end":720,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":498803,"byte_end":498806,"line_start":721,"line_end":721,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":498811,"byte_end":498861,"line_start":722,"line_end":722,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":498866,"byte_end":498944,"line_start":723,"line_end":723,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":498949,"byte_end":498952,"line_start":724,"line_end":724,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":498957,"byte_end":498970,"line_start":725,"line_end":725,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":498975,"byte_end":498978,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":498983,"byte_end":498990,"line_start":727,"line_end":727,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":498995,"byte_end":499021,"line_start":728,"line_end":728,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":499026,"byte_end":499074,"line_start":729,"line_end":729,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":499079,"byte_end":499082,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%H:%M:%S\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":499087,"byte_end":499132,"line_start":731,"line_end":731,"column_start":5,"column_end":50}},{"value":"/ let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":499137,"byte_end":499180,"line_start":732,"line_end":732,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(t.format_with_items(fmt.clone()).to_string(), \"23:56:04\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":499185,"byte_end":499258,"line_start":733,"line_end":733,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S\").to_string(),             \"23:56:04\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":499263,"byte_end":499336,"line_start":734,"line_end":734,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":499341,"byte_end":499348,"line_start":735,"line_end":735,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":499353,"byte_end":499356,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":499361,"byte_end":499445,"line_start":737,"line_end":737,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":499450,"byte_end":499453,"line_start":738,"line_end":738,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":499458,"byte_end":499465,"line_start":739,"line_end":739,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":499470,"byte_end":499498,"line_start":740,"line_end":740,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":499503,"byte_end":499553,"line_start":741,"line_end":741,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%H:%M:%S\").clone();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":499558,"byte_end":499613,"line_start":742,"line_end":742,"column_start":5,"column_end":60}},{"value":"/ # let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":499618,"byte_end":499663,"line_start":743,"line_end":743,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(format!(\"{}\", t.format_with_items(fmt)), \"23:56:04\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":499668,"byte_end":499736,"line_start":744,"line_end":744,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":499741,"byte_end":499748,"line_start":745,"line_end":745,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":499753,"byte_end":499806,"line_start":746,"line_end":746,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":499811,"byte_end":499820,"line_start":747,"line_end":747,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1675},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":501666,"byte_end":501672,"line_start":792,"line_end":792,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveTime>::format","value":"fn format<'a, '_>(&'_ Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the time with the specified format string.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":500045,"byte_end":500099,"line_start":756,"line_end":756,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":500104,"byte_end":500174,"line_start":757,"line_end":757,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":500179,"byte_end":500217,"line_start":758,"line_end":758,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":500222,"byte_end":500225,"line_start":759,"line_end":759,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":500230,"byte_end":500265,"line_start":760,"line_end":760,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":500270,"byte_end":500343,"line_start":761,"line_end":761,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":500348,"byte_end":500405,"line_start":762,"line_end":762,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":500410,"byte_end":500472,"line_start":763,"line_end":763,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":500477,"byte_end":500537,"line_start":764,"line_end":764,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":500542,"byte_end":500545,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":500550,"byte_end":500614,"line_start":766,"line_end":766,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":500619,"byte_end":500682,"line_start":767,"line_end":767,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":500687,"byte_end":500762,"line_start":768,"line_end":768,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":500767,"byte_end":500770,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":500775,"byte_end":500788,"line_start":770,"line_end":770,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":500793,"byte_end":500796,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":500801,"byte_end":500808,"line_start":772,"line_end":772,"column_start":5,"column_end":12}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":500813,"byte_end":500839,"line_start":773,"line_end":773,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":500844,"byte_end":500847,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":500852,"byte_end":500912,"line_start":775,"line_end":775,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S\").to_string(), \"23:56:04\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":500917,"byte_end":500978,"line_start":776,"line_end":776,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S%.6f\").to_string(), \"23:56:04.012345\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":500983,"byte_end":501055,"line_start":777,"line_end":777,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(t.format(\"%-I:%M %p\").to_string(), \"11:56 PM\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":501060,"byte_end":501122,"line_start":778,"line_end":778,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":501127,"byte_end":501134,"line_start":779,"line_end":779,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":501139,"byte_end":501142,"line_start":780,"line_end":780,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":501147,"byte_end":501231,"line_start":781,"line_end":781,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":501236,"byte_end":501239,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":501244,"byte_end":501251,"line_start":783,"line_end":783,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":501256,"byte_end":501284,"line_start":784,"line_end":784,"column_start":5,"column_end":33}},{"value":"/ # let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":501289,"byte_end":501351,"line_start":785,"line_end":785,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%H:%M:%S\")), \"23:56:04\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":501356,"byte_end":501420,"line_start":786,"line_end":786,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%H:%M:%S%.6f\")), \"23:56:04.012345\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":501425,"byte_end":501500,"line_start":787,"line_end":787,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%-I:%M %p\")), \"11:56 PM\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":501505,"byte_end":501570,"line_start":788,"line_end":788,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":501575,"byte_end":501582,"line_start":789,"line_end":789,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":501587,"byte_end":501640,"line_start":790,"line_end":790,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":501645,"byte_end":501654,"line_start":791,"line_end":791,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1681},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502544,"byte_end":502548,"line_start":819,"line_end":819,"column_start":8,"column_end":12},"name":"hour","qualname":"<NaiveTime as traits::Timelike>::hour","value":"fn hour<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2285},"children":[],"decl_id":{"krate":0,"index":2286},"docs":" Returns the hour number from 0 to 23.","sig":null,"attributes":[{"value":"/ Returns the hour number from 0 to 23.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502232,"byte_end":502273,"line_start":808,"line_end":808,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502278,"byte_end":502281,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502286,"byte_end":502299,"line_start":810,"line_end":810,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502304,"byte_end":502307,"line_start":811,"line_end":811,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502312,"byte_end":502319,"line_start":812,"line_end":812,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502324,"byte_end":502362,"line_start":813,"line_end":813,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502367,"byte_end":502370,"line_start":814,"line_end":814,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveTime::from_hms(0, 0, 0).hour(), 0);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502375,"byte_end":502430,"line_start":815,"line_end":815,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(NaiveTime::from_hms_nano(23, 56, 4, 12_345_678).hour(), 23);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502435,"byte_end":502510,"line_start":816,"line_end":816,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502515,"byte_end":502522,"line_start":817,"line_end":817,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502527,"byte_end":502536,"line_start":818,"line_end":818,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1682},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502915,"byte_end":502921,"line_start":834,"line_end":834,"column_start":8,"column_end":14},"name":"minute","qualname":"<NaiveTime as traits::Timelike>::minute","value":"fn minute<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2285},"children":[],"decl_id":{"krate":0,"index":2288},"docs":" Returns the minute number from 0 to 59.","sig":null,"attributes":[{"value":"/ Returns the minute number from 0 to 59.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502597,"byte_end":502640,"line_start":823,"line_end":823,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502645,"byte_end":502648,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502653,"byte_end":502666,"line_start":825,"line_end":825,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502671,"byte_end":502674,"line_start":826,"line_end":826,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502679,"byte_end":502686,"line_start":827,"line_end":827,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502691,"byte_end":502729,"line_start":828,"line_end":828,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502734,"byte_end":502737,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveTime::from_hms(0, 0, 0).minute(), 0);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502742,"byte_end":502799,"line_start":830,"line_end":830,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(NaiveTime::from_hms_nano(23, 56, 4, 12_345_678).minute(), 56);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502804,"byte_end":502881,"line_start":831,"line_end":831,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502886,"byte_end":502893,"line_start":832,"line_end":832,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502898,"byte_end":502907,"line_start":833,"line_end":833,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1683},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503752,"byte_end":503758,"line_start":860,"line_end":860,"column_start":8,"column_end":14},"name":"second","qualname":"<NaiveTime as traits::Timelike>::second","value":"fn second<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2285},"children":[],"decl_id":{"krate":0,"index":2289},"docs":" Returns the second number from 0 to 59.","sig":null,"attributes":[{"value":"/ Returns the second number from 0 to 59.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502970,"byte_end":503013,"line_start":838,"line_end":838,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503018,"byte_end":503021,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503026,"byte_end":503039,"line_start":840,"line_end":840,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503044,"byte_end":503047,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503052,"byte_end":503059,"line_start":842,"line_end":842,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503064,"byte_end":503102,"line_start":843,"line_end":843,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503107,"byte_end":503110,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveTime::from_hms(0, 0, 0).second(), 0);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503115,"byte_end":503172,"line_start":845,"line_end":845,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(NaiveTime::from_hms_nano(23, 56, 4, 12_345_678).second(), 4);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503177,"byte_end":503253,"line_start":846,"line_end":846,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503258,"byte_end":503265,"line_start":847,"line_end":847,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503270,"byte_end":503273,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ This method never returns 60 even when it is a leap second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503278,"byte_end":503341,"line_start":849,"line_end":849,"column_start":5,"column_end":68}},{"value":"/ ([Why?](#leap-second-handling))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503346,"byte_end":503381,"line_start":850,"line_end":850,"column_start":5,"column_end":40}},{"value":"/ Use the proper [formatting method](#method.format) to get a human-readable representation.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503386,"byte_end":503480,"line_start":851,"line_end":851,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503485,"byte_end":503488,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503493,"byte_end":503500,"line_start":853,"line_end":853,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503505,"byte_end":503545,"line_start":854,"line_end":854,"column_start":5,"column_end":45}},{"value":"/ let leap = NaiveTime::from_hms_milli(23, 59, 59, 1_000);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503550,"byte_end":503610,"line_start":855,"line_end":855,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(leap.second(), 59);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503615,"byte_end":503649,"line_start":856,"line_end":856,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(leap.format(\"%H:%M:%S\").to_string(), \"23:59:60\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503654,"byte_end":503718,"line_start":857,"line_end":857,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503723,"byte_end":503730,"line_start":858,"line_end":858,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503735,"byte_end":503744,"line_start":859,"line_end":859,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1684},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":504815,"byte_end":504825,"line_start":888,"line_end":888,"column_start":8,"column_end":18},"name":"nanosecond","qualname":"<NaiveTime as traits::Timelike>::nanosecond","value":"fn nanosecond<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2285},"children":[],"decl_id":{"krate":0,"index":2290},"docs":" Returns the number of nanoseconds since the whole non-leap second.\n The range from 1,000,000,000 to 1,999,999,999 represents\n the [leap second](#leap-second-handling).","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the whole non-leap second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503807,"byte_end":503877,"line_start":864,"line_end":864,"column_start":5,"column_end":75}},{"value":"/ The range from 1,000,000,000 to 1,999,999,999 represents","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503882,"byte_end":503942,"line_start":865,"line_end":865,"column_start":5,"column_end":65}},{"value":"/ the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503947,"byte_end":503992,"line_start":866,"line_end":866,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":503997,"byte_end":504000,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":504005,"byte_end":504018,"line_start":868,"line_end":868,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":504023,"byte_end":504026,"line_start":869,"line_end":869,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":504031,"byte_end":504038,"line_start":870,"line_end":870,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":504043,"byte_end":504081,"line_start":871,"line_end":871,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":504086,"byte_end":504089,"line_start":872,"line_end":872,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveTime::from_hms(0, 0, 0).nanosecond(), 0);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":504094,"byte_end":504155,"line_start":873,"line_end":873,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(NaiveTime::from_hms_nano(23, 56, 4, 12_345_678).nanosecond(), 12_345_678);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":504160,"byte_end":504249,"line_start":874,"line_end":874,"column_start":5,"column_end":94}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":504254,"byte_end":504261,"line_start":875,"line_end":875,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":504266,"byte_end":504269,"line_start":876,"line_end":876,"column_start":5,"column_end":8}},{"value":"/ Leap seconds may have seemingly out-of-range return values.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":504274,"byte_end":504337,"line_start":877,"line_end":877,"column_start":5,"column_end":68}},{"value":"/ You can reduce the range with `time.nanosecond() % 1_000_000_000`, or","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":504342,"byte_end":504415,"line_start":878,"line_end":878,"column_start":5,"column_end":78}},{"value":"/ use the proper [formatting method](#method.format) to get a human-readable representation.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":504420,"byte_end":504514,"line_start":879,"line_end":879,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":504519,"byte_end":504522,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":504527,"byte_end":504534,"line_start":881,"line_end":881,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":504539,"byte_end":504579,"line_start":882,"line_end":882,"column_start":5,"column_end":45}},{"value":"/ let leap = NaiveTime::from_hms_milli(23, 59, 59, 1_000);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":504584,"byte_end":504644,"line_start":883,"line_end":883,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(leap.nanosecond(), 1_000_000_000);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":504649,"byte_end":504698,"line_start":884,"line_end":884,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(leap.format(\"%H:%M:%S%.9f\").to_string(), \"23:59:60.000000000\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":504703,"byte_end":504781,"line_start":885,"line_end":885,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":504786,"byte_end":504793,"line_start":886,"line_end":886,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":504798,"byte_end":504807,"line_start":887,"line_end":887,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1685},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":505340,"byte_end":505349,"line_start":906,"line_end":906,"column_start":8,"column_end":17},"name":"with_hour","qualname":"<NaiveTime as traits::Timelike>::with_hour","value":"fn with_hour<'_>(&'_ Self, u32) -> Option<NaiveTime>","parent":{"krate":0,"index":2285},"children":[],"decl_id":{"krate":0,"index":2291},"docs":" Makes a new `NaiveTime` with the hour number changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` with the hour number changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":504871,"byte_end":504928,"line_start":892,"line_end":892,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":504933,"byte_end":504936,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveTime` would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":504941,"byte_end":505008,"line_start":894,"line_end":894,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":505013,"byte_end":505016,"line_start":895,"line_end":895,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":505021,"byte_end":505034,"line_start":896,"line_end":896,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":505039,"byte_end":505042,"line_start":897,"line_end":897,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":505047,"byte_end":505054,"line_start":898,"line_end":898,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":505059,"byte_end":505097,"line_start":899,"line_end":899,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":505102,"byte_end":505105,"line_start":900,"line_end":900,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":505110,"byte_end":505171,"line_start":901,"line_end":901,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.with_hour(7), Some(NaiveTime::from_hms_nano(7, 56, 4, 12_345_678)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":505176,"byte_end":505262,"line_start":902,"line_end":902,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(dt.with_hour(24), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":505267,"byte_end":505306,"line_start":903,"line_end":903,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":505311,"byte_end":505318,"line_start":904,"line_end":904,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":505323,"byte_end":505332,"line_start":905,"line_end":905,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1686},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":506031,"byte_end":506042,"line_start":928,"line_end":928,"column_start":8,"column_end":19},"name":"with_minute","qualname":"<NaiveTime as traits::Timelike>::with_minute","value":"fn with_minute<'_>(&'_ Self, u32) -> Option<NaiveTime>","parent":{"krate":0,"index":2285},"children":[],"decl_id":{"krate":0,"index":2292},"docs":" Makes a new `NaiveTime` with the minute number changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` with the minute number changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":505554,"byte_end":505613,"line_start":914,"line_end":914,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":505618,"byte_end":505621,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveTime` would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":505626,"byte_end":505693,"line_start":916,"line_end":916,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":505698,"byte_end":505701,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":505706,"byte_end":505719,"line_start":918,"line_end":918,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":505724,"byte_end":505727,"line_start":919,"line_end":919,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":505732,"byte_end":505739,"line_start":920,"line_end":920,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":505744,"byte_end":505782,"line_start":921,"line_end":921,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":505787,"byte_end":505790,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":505795,"byte_end":505856,"line_start":923,"line_end":923,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.with_minute(45), Some(NaiveTime::from_hms_nano(23, 45, 4, 12_345_678)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":505861,"byte_end":505951,"line_start":924,"line_end":924,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(dt.with_minute(60), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":505956,"byte_end":505997,"line_start":925,"line_end":925,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":506002,"byte_end":506009,"line_start":926,"line_end":926,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":506014,"byte_end":506023,"line_start":927,"line_end":927,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1687},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":506854,"byte_end":506865,"line_start":952,"line_end":952,"column_start":8,"column_end":19},"name":"with_second","qualname":"<NaiveTime as traits::Timelike>::with_second","value":"fn with_second<'_>(&'_ Self, u32) -> Option<NaiveTime>","parent":{"krate":0,"index":2285},"children":[],"decl_id":{"krate":0,"index":2293},"docs":" Makes a new `NaiveTime` with the second number changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` with the second number changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":506266,"byte_end":506325,"line_start":936,"line_end":936,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":506330,"byte_end":506333,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveTime` would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":506338,"byte_end":506405,"line_start":938,"line_end":938,"column_start":5,"column_end":72}},{"value":"/ As with the [`second`](#method.second) method,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":506410,"byte_end":506460,"line_start":939,"line_end":939,"column_start":5,"column_end":55}},{"value":"/ the input range is restricted to 0 through 59.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":506465,"byte_end":506515,"line_start":940,"line_end":940,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":506520,"byte_end":506523,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":506528,"byte_end":506541,"line_start":942,"line_end":942,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":506546,"byte_end":506549,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":506554,"byte_end":506561,"line_start":944,"line_end":944,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":506566,"byte_end":506604,"line_start":945,"line_end":945,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":506609,"byte_end":506612,"line_start":946,"line_end":946,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":506617,"byte_end":506678,"line_start":947,"line_end":947,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.with_second(17), Some(NaiveTime::from_hms_nano(23, 56, 17, 12_345_678)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":506683,"byte_end":506774,"line_start":948,"line_end":948,"column_start":5,"column_end":96}},{"value":"/ assert_eq!(dt.with_second(60), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":506779,"byte_end":506820,"line_start":949,"line_end":949,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":506825,"byte_end":506832,"line_start":950,"line_end":950,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":506837,"byte_end":506846,"line_start":951,"line_end":951,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1688},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":508308,"byte_end":508323,"line_start":989,"line_end":989,"column_start":8,"column_end":23},"name":"with_nanosecond","qualname":"<NaiveTime as traits::Timelike>::with_nanosecond","value":"fn with_nanosecond<'_>(&'_ Self, u32) -> Option<NaiveTime>","parent":{"krate":0,"index":2285},"children":[],"decl_id":{"krate":0,"index":2294},"docs":" Makes a new `NaiveTime` with nanoseconds since the whole non-leap second changed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` with nanoseconds since the whole non-leap second changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":507063,"byte_end":507148,"line_start":960,"line_end":960,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":507153,"byte_end":507156,"line_start":961,"line_end":961,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting `NaiveTime` would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":507161,"byte_end":507228,"line_start":962,"line_end":962,"column_start":5,"column_end":72}},{"value":"/ As with the [`nanosecond`](#method.nanosecond) method,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":507233,"byte_end":507291,"line_start":963,"line_end":963,"column_start":5,"column_end":63}},{"value":"/ the input range can exceed 1,000,000,000 for leap seconds.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":507296,"byte_end":507358,"line_start":964,"line_end":964,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":507363,"byte_end":507366,"line_start":965,"line_end":965,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":507371,"byte_end":507384,"line_start":966,"line_end":966,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":507389,"byte_end":507392,"line_start":967,"line_end":967,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":507397,"byte_end":507404,"line_start":968,"line_end":968,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":507409,"byte_end":507447,"line_start":969,"line_end":969,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":507452,"byte_end":507455,"line_start":970,"line_end":970,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":507460,"byte_end":507521,"line_start":971,"line_end":971,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.with_nanosecond(333_333_333),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":507526,"byte_end":507573,"line_start":972,"line_end":972,"column_start":5,"column_end":52}},{"value":"/            Some(NaiveTime::from_hms_nano(23, 56, 4, 333_333_333)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":507578,"byte_end":507649,"line_start":973,"line_end":973,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(dt.with_nanosecond(2_000_000_000), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":507654,"byte_end":507710,"line_start":974,"line_end":974,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":507715,"byte_end":507722,"line_start":975,"line_end":975,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":507727,"byte_end":507730,"line_start":976,"line_end":976,"column_start":5,"column_end":8}},{"value":"/ Leap seconds can theoretically follow *any* whole second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":507735,"byte_end":507796,"line_start":977,"line_end":977,"column_start":5,"column_end":66}},{"value":"/ The following would be a proper leap second at the time zone offset of UTC-00:03:57","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":507801,"byte_end":507888,"line_start":978,"line_end":978,"column_start":5,"column_end":92}},{"value":"/ (there are several historical examples comparable to this \"non-sense\" offset),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":507893,"byte_end":507975,"line_start":979,"line_end":979,"column_start":5,"column_end":87}},{"value":"/ and therefore is allowed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":507980,"byte_end":508009,"line_start":980,"line_end":980,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":508014,"byte_end":508017,"line_start":981,"line_end":981,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":508022,"byte_end":508029,"line_start":982,"line_end":982,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":508034,"byte_end":508074,"line_start":983,"line_end":983,"column_start":5,"column_end":45}},{"value":"/ # let dt = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":508079,"byte_end":508142,"line_start":984,"line_end":984,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.with_nanosecond(1_333_333_333),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":508147,"byte_end":508196,"line_start":985,"line_end":985,"column_start":5,"column_end":54}},{"value":"/            Some(NaiveTime::from_hms_nano(23, 56, 4, 1_333_333_333)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":508201,"byte_end":508274,"line_start":986,"line_end":986,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":508279,"byte_end":508286,"line_start":987,"line_end":987,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":508291,"byte_end":508300,"line_start":988,"line_end":988,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1689},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":509037,"byte_end":509062,"line_start":1011,"line_end":1011,"column_start":8,"column_end":33},"name":"num_seconds_from_midnight","qualname":"<NaiveTime as traits::Timelike>::num_seconds_from_midnight","value":"fn num_seconds_from_midnight<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2285},"children":[],"decl_id":{"krate":0,"index":2295},"docs":" Returns the number of non-leap seconds past the last midnight.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds past the last midnight.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":508494,"byte_end":508560,"line_start":996,"line_end":996,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":508565,"byte_end":508568,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":508573,"byte_end":508586,"line_start":998,"line_end":998,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":508591,"byte_end":508594,"line_start":999,"line_end":999,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":508599,"byte_end":508606,"line_start":1000,"line_end":1000,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":508611,"byte_end":508649,"line_start":1001,"line_end":1001,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":508654,"byte_end":508657,"line_start":1002,"line_end":1002,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveTime::from_hms(1, 2, 3).num_seconds_from_midnight(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":508662,"byte_end":508734,"line_start":1003,"line_end":1003,"column_start":5,"column_end":77}},{"value":"/            3723);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":508739,"byte_end":508760,"line_start":1004,"line_end":1004,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(NaiveTime::from_hms_nano(23, 56, 4, 12_345_678).num_seconds_from_midnight(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":508765,"byte_end":508856,"line_start":1005,"line_end":1005,"column_start":5,"column_end":96}},{"value":"/            86164);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":508861,"byte_end":508883,"line_start":1006,"line_end":1006,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(NaiveTime::from_hms_milli(23, 59, 59, 1_000).num_seconds_from_midnight(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":508888,"byte_end":508976,"line_start":1007,"line_end":1007,"column_start":5,"column_end":93}},{"value":"/            86399);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":508981,"byte_end":509003,"line_start":1008,"line_end":1008,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":509008,"byte_end":509015,"line_start":1009,"line_end":1009,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":509020,"byte_end":509029,"line_start":1010,"line_end":1010,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1692},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":511839,"byte_end":511842,"line_start":1069,"line_end":1069,"column_start":8,"column_end":11},"name":"add","qualname":"<NaiveTime as std::ops::Add>::add","value":"fn add(Self, OldDuration) -> NaiveTime","parent":{"krate":2,"index":3331},"children":[],"decl_id":{"krate":2,"index":3334},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":511822,"byte_end":511831,"line_start":1068,"line_end":1068,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1694},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":511999,"byte_end":512009,"line_start":1076,"line_end":1076,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<NaiveTime as std::ops::AddAssign>::add_assign","value":"fn add_assign<'_>(&'_ mut Self, OldDuration)","parent":{"krate":2,"index":3362},"children":[],"decl_id":{"krate":2,"index":3364},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":511982,"byte_end":511991,"line_start":1075,"line_end":1075,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1697},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":514397,"byte_end":514400,"line_start":1130,"line_end":1130,"column_start":8,"column_end":11},"name":"sub","qualname":"<NaiveTime as std::ops::Sub>::sub","value":"fn sub(Self, OldDuration) -> NaiveTime","parent":{"krate":2,"index":3336},"children":[],"decl_id":{"krate":2,"index":3339},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":514380,"byte_end":514389,"line_start":1129,"line_end":1129,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1699},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":514557,"byte_end":514567,"line_start":1137,"line_end":1137,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<NaiveTime as std::ops::SubAssign>::sub_assign","value":"fn sub_assign<'_>(&'_ mut Self, OldDuration)","parent":{"krate":2,"index":3366},"children":[],"decl_id":{"krate":2,"index":3368},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":514540,"byte_end":514549,"line_start":1136,"line_end":1136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1702},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":516971,"byte_end":516974,"line_start":1191,"line_end":1191,"column_start":8,"column_end":11},"name":"sub","qualname":"<NaiveTime as std::ops::Sub>::sub","value":"fn sub(Self, NaiveTime) -> OldDuration","parent":{"krate":2,"index":3336},"children":[],"decl_id":{"krate":2,"index":3339},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":516954,"byte_end":516963,"line_start":1190,"line_end":1190,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1704},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":518318,"byte_end":518321,"line_start":1225,"line_end":1225,"column_start":8,"column_end":11},"name":"fmt","qualname":"<NaiveTime as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10293},"children":[],"decl_id":{"krate":2,"index":10294},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1706},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":520176,"byte_end":520179,"line_start":1275,"line_end":1275,"column_start":8,"column_end":11},"name":"fmt","qualname":"<NaiveTime as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10300},"children":[],"decl_id":{"krate":2,"index":10301},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1709},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":520983,"byte_end":520991,"line_start":1302,"line_end":1302,"column_start":8,"column_end":16},"name":"from_str","qualname":"<NaiveTime as std::str::FromStr>::from_str","value":"fn from_str<'_>(&'_ str) -> ParseResult<NaiveTime>","parent":{"krate":2,"index":12994},"children":[],"decl_id":{"krate":2,"index":12996},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1712},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":521851,"byte_end":521858,"line_start":1332,"line_end":1332,"column_start":8,"column_end":15},"name":"default","qualname":"<NaiveTime as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1758},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"offset","qualname":"::offset","value":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","parent":null,"children":[{"krate":0,"index":1759},{"krate":0,"index":1762},{"krate":0,"index":1763},{"krate":0,"index":1766},{"krate":0,"index":1769},{"krate":0,"index":1772},{"krate":0,"index":1775},{"krate":0,"index":1776},{"krate":0,"index":1779},{"krate":0,"index":1782},{"krate":0,"index":1785},{"krate":0,"index":1788},{"krate":0,"index":1789},{"krate":0,"index":1792},{"krate":0,"index":1795},{"krate":0,"index":1880},{"krate":0,"index":1883},{"krate":0,"index":2007},{"krate":0,"index":2008},{"krate":0,"index":2010},{"krate":0,"index":2064},{"krate":0,"index":2065},{"krate":0,"index":2847},{"krate":0,"index":2858},{"krate":0,"index":2861},{"krate":0,"index":2863},{"krate":0,"index":2867},{"krate":0,"index":2870},{"krate":0,"index":2872},{"krate":0,"index":2874},{"krate":0,"index":2877},{"krate":0,"index":2067},{"krate":0,"index":2075},{"krate":0,"index":2082},{"krate":0,"index":2085},{"krate":0,"index":2087}],"decl_id":null,"docs":" The time zone, which calculates offsets from the local time to UTC.","sig":null,"attributes":[{"value":"/ The time zone, which calculates offsets from the local time to UTC.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":525221,"byte_end":525292,"line_start":4,"line_end":4,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":525293,"byte_end":525296,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ There are four operations provided by the `TimeZone` trait:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":525297,"byte_end":525360,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":525361,"byte_end":525364,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ 1. Converting the local `NaiveDateTime` to `DateTime<Tz>`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":525365,"byte_end":525426,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"/ 2. Converting the UTC `NaiveDateTime` to `DateTime<Tz>`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":525427,"byte_end":525486,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"/ 3. Converting `DateTime<Tz>` to the local `NaiveDateTime`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":525487,"byte_end":525548,"line_start":10,"line_end":10,"column_start":1,"column_end":62}},{"value":"/ 4. Constructing `DateTime<Tz>` objects from various offsets","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":525549,"byte_end":525612,"line_start":11,"line_end":11,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":525613,"byte_end":525616,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ 1 is used for constructors. 2 is used for the `with_timezone` method of date and time types.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":525617,"byte_end":525713,"line_start":13,"line_end":13,"column_start":1,"column_end":97}},{"value":"/ 3 is used for other methods, e.g. `year()` or `format()`, and provided by an associated type","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":525714,"byte_end":525810,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"/ which implements `Offset` (which then passed to `TimeZone` for actual implementations).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":525811,"byte_end":525902,"line_start":15,"line_end":15,"column_start":1,"column_end":92}},{"value":"/ Technically speaking `TimeZone` has a total knowledge about given timescale,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":525903,"byte_end":525983,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/ but `Offset` is used as a cache to avoid the repeated conversion","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":525984,"byte_end":526052,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"/ and provides implementations for 1 and 3.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":526053,"byte_end":526098,"line_start":18,"line_end":18,"column_start":1,"column_end":46}},{"value":"/ An `TimeZone` instance can be reconstructed from the corresponding `Offset` instance.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":526099,"byte_end":526188,"line_start":19,"line_end":19,"column_start":1,"column_end":90}}]},{"kind":"Struct","id":{"krate":0,"index":2814},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":547012,"byte_end":547023,"line_start":27,"line_end":27,"column_start":12,"column_end":23},"name":"FixedOffset","qualname":"::offset::fixed::FixedOffset","value":"FixedOffset {  }","parent":null,"children":[{"krate":0,"index":2815}],"decl_id":null,"docs":" The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","sig":null,"attributes":[{"value":"/ The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":546565,"byte_end":546636,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":546637,"byte_end":546640,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":546641,"byte_end":546698,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"/ on a `FixedOffset` struct is the preferred way to construct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":546699,"byte_end":546762,"line_start":22,"line_end":22,"column_start":1,"column_end":64}},{"value":"/ `DateTime<FixedOffset>` instances. See the [`east`](#method.east) and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":546763,"byte_end":546836,"line_start":23,"line_end":23,"column_start":1,"column_end":74}},{"value":"/ [`west`](#method.west) methods for examples.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":546837,"byte_end":546885,"line_start":24,"line_end":24,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1839},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":547625,"byte_end":547629,"line_start":46,"line_end":46,"column_start":12,"column_end":16},"name":"east","qualname":"<FixedOffset>::east","value":"fn east(i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":547078,"byte_end":547166,"line_start":32,"line_end":32,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":547171,"byte_end":547224,"line_start":33,"line_end":33,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":547229,"byte_end":547232,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":547237,"byte_end":547275,"line_start":35,"line_end":35,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":547280,"byte_end":547283,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":547288,"byte_end":547301,"line_start":37,"line_end":37,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":547306,"byte_end":547309,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":547314,"byte_end":547321,"line_start":39,"line_end":39,"column_start":5,"column_end":12}},{"value":"/ use chrono::{FixedOffset, TimeZone};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":547326,"byte_end":547366,"line_start":40,"line_end":40,"column_start":5,"column_end":45}},{"value":"/ let hour = 3600;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":547371,"byte_end":547391,"line_start":41,"line_end":41,"column_start":5,"column_end":25}},{"value":"/ let datetime = FixedOffset::east(5 * hour).ymd(2016, 11, 08)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":547396,"byte_end":547460,"line_start":42,"line_end":42,"column_start":5,"column_end":69}},{"value":"/                                           .and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":547465,"byte_end":547529,"line_start":43,"line_end":43,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00+05:00\")","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":547534,"byte_end":547601,"line_start":44,"line_end":44,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":547606,"byte_end":547613,"line_start":45,"line_end":45,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1840},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":547964,"byte_end":547972,"line_start":54,"line_end":54,"column_start":12,"column_end":20},"name":"east_opt","qualname":"<FixedOffset>::east_opt","value":"fn east_opt(i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":547747,"byte_end":547835,"line_start":50,"line_end":50,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":547840,"byte_end":547893,"line_start":51,"line_end":51,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":547898,"byte_end":547901,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":547906,"byte_end":547952,"line_start":53,"line_end":53,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1841},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":548712,"byte_end":548716,"line_start":76,"line_end":76,"column_start":12,"column_end":16},"name":"west","qualname":"<FixedOffset>::west","value":"fn west(i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":548165,"byte_end":548253,"line_start":62,"line_end":62,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":548258,"byte_end":548311,"line_start":63,"line_end":63,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":548316,"byte_end":548319,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":548324,"byte_end":548362,"line_start":65,"line_end":65,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":548367,"byte_end":548370,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":548375,"byte_end":548388,"line_start":67,"line_end":67,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":548393,"byte_end":548396,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":548401,"byte_end":548408,"line_start":69,"line_end":69,"column_start":5,"column_end":12}},{"value":"/ use chrono::{FixedOffset, TimeZone};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":548413,"byte_end":548453,"line_start":70,"line_end":70,"column_start":5,"column_end":45}},{"value":"/ let hour = 3600;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":548458,"byte_end":548478,"line_start":71,"line_end":71,"column_start":5,"column_end":25}},{"value":"/ let datetime = FixedOffset::west(5 * hour).ymd(2016, 11, 08)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":548483,"byte_end":548547,"line_start":72,"line_end":72,"column_start":5,"column_end":69}},{"value":"/                                           .and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":548552,"byte_end":548616,"line_start":73,"line_end":73,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00-05:00\")","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":548621,"byte_end":548688,"line_start":74,"line_end":74,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":548693,"byte_end":548700,"line_start":75,"line_end":75,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1842},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":549051,"byte_end":549059,"line_start":84,"line_end":84,"column_start":12,"column_end":20},"name":"west_opt","qualname":"<FixedOffset>::west_opt","value":"fn west_opt(i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":548834,"byte_end":548922,"line_start":80,"line_end":80,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":548927,"byte_end":548980,"line_start":81,"line_end":81,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":548985,"byte_end":548988,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":548993,"byte_end":549039,"line_start":83,"line_end":83,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1843},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":549358,"byte_end":549373,"line_start":94,"line_end":94,"column_start":12,"column_end":27},"name":"local_minus_utc","qualname":"<FixedOffset>::local_minus_utc","value":"fn local_minus_utc<'_>(&'_ Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from UTC to the local time.\n","sig":null,"attributes":[{"value":"/ Returns the number of seconds to add to convert from UTC to the local time.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":549253,"byte_end":549332,"line_start":92,"line_end":92,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":549337,"byte_end":549346,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1844},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":549535,"byte_end":549550,"line_start":100,"line_end":100,"column_start":12,"column_end":27},"name":"utc_minus_local","qualname":"<FixedOffset>::utc_minus_local","value":"fn utc_minus_local<'_>(&'_ Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from the local time to UTC.\n","sig":null,"attributes":[{"value":"/ Returns the number of seconds to add to convert from the local time to UTC.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":549430,"byte_end":549509,"line_start":98,"line_end":98,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":549514,"byte_end":549523,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1847},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":549677,"byte_end":549688,"line_start":108,"line_end":108,"column_start":8,"column_end":19},"name":"from_offset","qualname":"<FixedOffset as offset::TimeZone>::from_offset","value":"fn from_offset<'_>(&'_ FixedOffset) -> FixedOffset","parent":{"krate":0,"index":2087},"children":[],"decl_id":{"krate":0,"index":2101},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1848},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":549758,"byte_end":549780,"line_start":112,"line_end":112,"column_start":8,"column_end":30},"name":"offset_from_local_date","qualname":"<FixedOffset as offset::TimeZone>::offset_from_local_date","value":"fn offset_from_local_date<'_, '_>(&'_ Self, &'_ NaiveDate)\n-> LocalResult<FixedOffset>","parent":{"krate":0,"index":2087},"children":[],"decl_id":{"krate":0,"index":2102},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1849},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":549886,"byte_end":549912,"line_start":115,"line_end":115,"column_start":8,"column_end":34},"name":"offset_from_local_datetime","qualname":"<FixedOffset as offset::TimeZone>::offset_from_local_datetime","value":"fn offset_from_local_datetime<'_, '_>(&'_ Self, &'_ NaiveDateTime)\n-> LocalResult<FixedOffset>","parent":{"krate":0,"index":2087},"children":[],"decl_id":{"krate":0,"index":2103},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1850},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":550023,"byte_end":550043,"line_start":119,"line_end":119,"column_start":8,"column_end":28},"name":"offset_from_utc_date","qualname":"<FixedOffset as offset::TimeZone>::offset_from_utc_date","value":"fn offset_from_utc_date<'_, '_>(&'_ Self, &'_ NaiveDate) -> FixedOffset","parent":{"krate":0,"index":2087},"children":[],"decl_id":{"krate":0,"index":2108},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1851},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":550113,"byte_end":550137,"line_start":122,"line_end":122,"column_start":8,"column_end":32},"name":"offset_from_utc_datetime","qualname":"<FixedOffset as offset::TimeZone>::offset_from_utc_datetime","value":"fn offset_from_utc_datetime<'_, '_>(&'_ Self, &'_ NaiveDateTime)\n-> FixedOffset","parent":{"krate":0,"index":2087},"children":[],"decl_id":{"krate":0,"index":2109},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1853},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":550244,"byte_end":550247,"line_start":128,"line_end":128,"column_start":8,"column_end":11},"name":"fix","qualname":"<FixedOffset as offset::Offset>::fix","value":"fn fix<'_>(&'_ Self) -> FixedOffset","parent":{"krate":0,"index":2085},"children":[],"decl_id":{"krate":0,"index":2086},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1855},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":550336,"byte_end":550339,"line_start":134,"line_end":134,"column_start":8,"column_end":11},"name":"fmt","qualname":"<FixedOffset as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10293},"children":[],"decl_id":{"krate":2,"index":10294},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1857},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":550845,"byte_end":550848,"line_start":148,"line_end":148,"column_start":8,"column_end":11},"name":"fmt","qualname":"<FixedOffset as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10300},"children":[],"decl_id":{"krate":2,"index":10301},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1862},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":551666,"byte_end":551669,"line_start":172,"line_end":172,"column_start":8,"column_end":11},"name":"add","qualname":"<NaiveTime as std::ops::Add>::add","value":"fn add(Self, FixedOffset) -> NaiveTime","parent":{"krate":2,"index":3331},"children":[],"decl_id":{"krate":2,"index":3334},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":551649,"byte_end":551658,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1865},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":551863,"byte_end":551866,"line_start":181,"line_end":181,"column_start":8,"column_end":11},"name":"sub","qualname":"<NaiveTime as std::ops::Sub>::sub","value":"fn sub(Self, FixedOffset) -> NaiveTime","parent":{"krate":2,"index":3336},"children":[],"decl_id":{"krate":2,"index":3339},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":551846,"byte_end":551855,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1868},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":552069,"byte_end":552072,"line_start":190,"line_end":190,"column_start":8,"column_end":11},"name":"add","qualname":"<NaiveDateTime as std::ops::Add>::add","value":"fn add(Self, FixedOffset) -> NaiveDateTime","parent":{"krate":2,"index":3331},"children":[],"decl_id":{"krate":2,"index":3334},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":552052,"byte_end":552061,"line_start":189,"line_end":189,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1871},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":552278,"byte_end":552281,"line_start":199,"line_end":199,"column_start":8,"column_end":11},"name":"sub","qualname":"<NaiveDateTime as std::ops::Sub>::sub","value":"fn sub(Self, FixedOffset) -> NaiveDateTime","parent":{"krate":2,"index":3336},"children":[],"decl_id":{"krate":2,"index":3339},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":552261,"byte_end":552270,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1875},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":552500,"byte_end":552503,"line_start":208,"line_end":208,"column_start":8,"column_end":11},"name":"add","qualname":"<DateTime<Tz> as std::ops::Add>::add","value":"fn add(Self, FixedOffset) -> DateTime<Tz>","parent":{"krate":2,"index":3331},"children":[],"decl_id":{"krate":2,"index":3334},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":552483,"byte_end":552492,"line_start":207,"line_end":207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1879},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":552720,"byte_end":552723,"line_start":217,"line_end":217,"column_start":8,"column_end":11},"name":"sub","qualname":"<DateTime<Tz> as std::ops::Sub>::sub","value":"fn sub(Self, FixedOffset) -> DateTime<Tz>","parent":{"krate":2,"index":3336},"children":[],"decl_id":{"krate":2,"index":3339},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":552703,"byte_end":552712,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2829},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":555049,"byte_end":555054,"line_start":55,"line_end":55,"column_start":12,"column_end":17},"name":"Local","qualname":"::offset::local::Local","value":"","parent":null,"children":[],"decl_id":null,"docs":" The local timescale. This is implemented via the standard `time` crate.","sig":null,"attributes":[{"value":"/ The local timescale. This is implemented via the standard `time` crate.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":554524,"byte_end":554599,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":554600,"byte_end":554603,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":554604,"byte_end":554661,"line_start":41,"line_end":41,"column_start":1,"column_end":58}},{"value":"/ on the Local struct is the preferred way to construct `DateTime<Local>`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":554662,"byte_end":554737,"line_start":42,"line_end":42,"column_start":1,"column_end":76}},{"value":"/ instances.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":554738,"byte_end":554752,"line_start":43,"line_end":43,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":554753,"byte_end":554756,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":554757,"byte_end":554770,"line_start":45,"line_end":45,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":554771,"byte_end":554774,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":554775,"byte_end":554782,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/ use chrono::{Local, DateTime, TimeZone};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":554783,"byte_end":554827,"line_start":48,"line_end":48,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":554828,"byte_end":554831,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ let dt: DateTime<Local> = Local::now();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":554832,"byte_end":554875,"line_start":50,"line_end":50,"column_start":1,"column_end":44}},{"value":"/ let dt: DateTime<Local> = Local.timestamp(0, 0);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":554876,"byte_end":554928,"line_start":51,"line_end":51,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":554929,"byte_end":554936,"line_start":52,"line_end":52,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1991},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":555145,"byte_end":555150,"line_start":59,"line_end":59,"column_start":12,"column_end":17},"name":"today","qualname":"<Local>::today","value":"fn today() -> Date<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `Date` which corresponds to the current date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":555074,"byte_end":555133,"line_start":58,"line_end":58,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1992},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":555446,"byte_end":555449,"line_start":69,"line_end":69,"column_start":12,"column_end":15},"name":"now","qualname":"<Local>::now","value":"fn now() -> DateTime<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date and time.\n","sig":null,"attributes":[{"value":"/ Returns a `DateTime` which corresponds to the current date and time.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":555209,"byte_end":555281,"line_start":63,"line_end":63,"column_start":5,"column_end":77}},{"value":"cfg(not(all(target_arch = \"wasm32\", feature = \"wasmbind\",\nnot(any(target_os = \"emscripten\", target_os = \"wasi\")))))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":555286,"byte_end":555434,"line_start":64,"line_end":68,"column_start":5,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":1995},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":556127,"byte_end":556138,"line_start":92,"line_end":92,"column_start":8,"column_end":19},"name":"from_offset","qualname":"<Local as offset::TimeZone>::from_offset","value":"fn from_offset<'_>(&'_ FixedOffset) -> Local","parent":{"krate":0,"index":2087},"children":[],"decl_id":{"krate":0,"index":2101},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1996},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":556294,"byte_end":556316,"line_start":97,"line_end":97,"column_start":8,"column_end":30},"name":"offset_from_local_date","qualname":"<Local as offset::TimeZone>::offset_from_local_date","value":"fn offset_from_local_date<'_, '_>(&'_ Self, &'_ NaiveDate)\n-> LocalResult<FixedOffset>","parent":{"krate":0,"index":2087},"children":[],"decl_id":{"krate":0,"index":2102},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1998},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":556450,"byte_end":556476,"line_start":101,"line_end":101,"column_start":8,"column_end":34},"name":"offset_from_local_datetime","qualname":"<Local as offset::TimeZone>::offset_from_local_datetime","value":"fn offset_from_local_datetime<'_, '_>(&'_ Self, &'_ NaiveDateTime)\n-> LocalResult<FixedOffset>","parent":{"krate":0,"index":2087},"children":[],"decl_id":{"krate":0,"index":2103},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2000},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":556626,"byte_end":556646,"line_start":105,"line_end":105,"column_start":8,"column_end":28},"name":"offset_from_utc_date","qualname":"<Local as offset::TimeZone>::offset_from_utc_date","value":"fn offset_from_utc_date<'_, '_>(&'_ Self, &'_ NaiveDate) -> FixedOffset","parent":{"krate":0,"index":2087},"children":[],"decl_id":{"krate":0,"index":2108},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2001},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":556744,"byte_end":556768,"line_start":109,"line_end":109,"column_start":8,"column_end":32},"name":"offset_from_utc_datetime","qualname":"<Local as offset::TimeZone>::offset_from_utc_datetime","value":"fn offset_from_utc_datetime<'_, '_>(&'_ Self, &'_ NaiveDateTime)\n-> FixedOffset","parent":{"krate":0,"index":2087},"children":[],"decl_id":{"krate":0,"index":2109},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2002},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":556924,"byte_end":556939,"line_start":114,"line_end":114,"column_start":8,"column_end":23},"name":"from_local_date","qualname":"<Local as offset::TimeZone>::from_local_date","value":"fn from_local_date<'_, '_>(&'_ Self, &'_ NaiveDate)\n-> LocalResult<Date<Local>>","parent":{"krate":0,"index":2087},"children":[],"decl_id":{"krate":0,"index":2104},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2004},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":558110,"byte_end":558129,"line_start":140,"line_end":140,"column_start":8,"column_end":27},"name":"from_local_datetime","qualname":"<Local as offset::TimeZone>::from_local_datetime","value":"fn from_local_datetime<'_, '_>(&'_ Self, &'_ NaiveDateTime)\n-> LocalResult<DateTime<Local>>","parent":{"krate":0,"index":2087},"children":[],"decl_id":{"krate":0,"index":2106},"docs":"","sig":null,"attributes":[{"value":"cfg(not(all(target_arch = \"wasm32\", feature = \"wasmbind\",\nnot(any(target_os = \"emscripten\", target_os = \"wasi\")))))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":557954,"byte_end":558102,"line_start":135,"line_end":139,"column_start":5,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2005},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":558251,"byte_end":558264,"line_start":144,"line_end":144,"column_start":8,"column_end":21},"name":"from_utc_date","qualname":"<Local as offset::TimeZone>::from_utc_date","value":"fn from_utc_date<'_, '_>(&'_ Self, &'_ NaiveDate) -> Date<Local>","parent":{"krate":0,"index":2087},"children":[],"decl_id":{"krate":0,"index":2110},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2006},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":559007,"byte_end":559024,"line_start":165,"line_end":165,"column_start":8,"column_end":25},"name":"from_utc_datetime","qualname":"<Local as offset::TimeZone>::from_utc_datetime","value":"fn from_utc_datetime<'_, '_>(&'_ Self, &'_ NaiveDateTime) -> DateTime<Local>","parent":{"krate":0,"index":2087},"children":[],"decl_id":{"krate":0,"index":2111},"docs":"","sig":null,"attributes":[{"value":"cfg(not(all(target_arch = \"wasm32\", feature = \"wasmbind\",\nnot(any(target_os = \"emscripten\", target_os = \"wasi\")))))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":558851,"byte_end":558999,"line_start":160,"line_end":164,"column_start":5,"column_end":9}}]},{"kind":"Struct","id":{"krate":0,"index":2836},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":574823,"byte_end":574826,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"Utc","qualname":"::offset::utc::Utc","value":"","parent":null,"children":[],"decl_id":null,"docs":" The UTC time zone. This is the most efficient time zone when you don't need the local time.\n It is also used as an offset (which is also a dummy type).","sig":null,"attributes":[{"value":"/ The UTC time zone. This is the most efficient time zone when you don't need the local time.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":574108,"byte_end":574203,"line_start":25,"line_end":25,"column_start":1,"column_end":96}},{"value":"/ It is also used as an offset (which is also a dummy type).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":574204,"byte_end":574266,"line_start":26,"line_end":26,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":574267,"byte_end":574270,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":574271,"byte_end":574328,"line_start":28,"line_end":28,"column_start":1,"column_end":58}},{"value":"/ on the UTC struct is the preferred way to construct `DateTime<Utc>`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":574329,"byte_end":574400,"line_start":29,"line_end":29,"column_start":1,"column_end":72}},{"value":"/ instances.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":574401,"byte_end":574415,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":574416,"byte_end":574419,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":574420,"byte_end":574433,"line_start":32,"line_end":32,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":574434,"byte_end":574437,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":574438,"byte_end":574445,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/ use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":574446,"byte_end":574503,"line_start":35,"line_end":35,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":574504,"byte_end":574507,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let dt = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(61, 0), Utc);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":574508,"byte_end":574590,"line_start":37,"line_end":37,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":574591,"byte_end":574594,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(Utc.timestamp(61, 0), dt);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":574595,"byte_end":574636,"line_start":39,"line_end":39,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 1, 1), dt);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":574637,"byte_end":574694,"line_start":40,"line_end":40,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":574695,"byte_end":574702,"line_start":41,"line_end":41,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2049},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":574941,"byte_end":574946,"line_start":49,"line_end":49,"column_start":12,"column_end":17},"name":"today","qualname":"<Utc>::today","value":"fn today() -> Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `Date` which corresponds to the current date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":574870,"byte_end":574929,"line_start":48,"line_end":48,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2050},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":575238,"byte_end":575241,"line_start":59,"line_end":59,"column_start":12,"column_end":15},"name":"now","qualname":"<Utc>::now","value":"fn now() -> DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date and time.\n","sig":null,"attributes":[{"value":"/ Returns a `DateTime` which corresponds to the current date and time.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":575001,"byte_end":575073,"line_start":53,"line_end":53,"column_start":5,"column_end":77}},{"value":"cfg(not(all(target_arch = \"wasm32\", feature = \"wasmbind\",\nnot(any(target_os = \"emscripten\", target_os = \"wasi\")))))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":575078,"byte_end":575226,"line_start":54,"line_end":58,"column_start":5,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2053},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":575926,"byte_end":575937,"line_start":81,"line_end":81,"column_start":8,"column_end":19},"name":"from_offset","qualname":"<Utc as offset::TimeZone>::from_offset","value":"fn from_offset<'_>(&'_ Utc) -> Utc","parent":{"krate":0,"index":2087},"children":[],"decl_id":{"krate":0,"index":2101},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2054},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":575987,"byte_end":576009,"line_start":85,"line_end":85,"column_start":8,"column_end":30},"name":"offset_from_local_date","qualname":"<Utc as offset::TimeZone>::offset_from_local_date","value":"fn offset_from_local_date<'_, '_>(&'_ Self, &'_ NaiveDate) -> LocalResult<Utc>","parent":{"krate":0,"index":2087},"children":[],"decl_id":{"krate":0,"index":2102},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2055},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":576105,"byte_end":576131,"line_start":88,"line_end":88,"column_start":8,"column_end":34},"name":"offset_from_local_datetime","qualname":"<Utc as offset::TimeZone>::offset_from_local_datetime","value":"fn offset_from_local_datetime<'_, '_>(&'_ Self, &'_ NaiveDateTime)\n-> LocalResult<Utc>","parent":{"krate":0,"index":2087},"children":[],"decl_id":{"krate":0,"index":2103},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2056},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":576232,"byte_end":576252,"line_start":92,"line_end":92,"column_start":8,"column_end":28},"name":"offset_from_utc_date","qualname":"<Utc as offset::TimeZone>::offset_from_utc_date","value":"fn offset_from_utc_date<'_, '_>(&'_ Self, &'_ NaiveDate) -> Utc","parent":{"krate":0,"index":2087},"children":[],"decl_id":{"krate":0,"index":2108},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2057},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":576312,"byte_end":576336,"line_start":95,"line_end":95,"column_start":8,"column_end":32},"name":"offset_from_utc_datetime","qualname":"<Utc as offset::TimeZone>::offset_from_utc_datetime","value":"fn offset_from_utc_datetime<'_, '_>(&'_ Self, &'_ NaiveDateTime) -> Utc","parent":{"krate":0,"index":2087},"children":[],"decl_id":{"krate":0,"index":2109},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2059},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":576425,"byte_end":576428,"line_start":101,"line_end":101,"column_start":8,"column_end":11},"name":"fix","qualname":"<Utc as offset::Offset>::fix","value":"fn fix<'_>(&'_ Self) -> FixedOffset","parent":{"krate":0,"index":2085},"children":[],"decl_id":{"krate":0,"index":2086},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2061},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":576524,"byte_end":576527,"line_start":107,"line_end":107,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Utc as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10293},"children":[],"decl_id":{"krate":2,"index":10294},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2063},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":576643,"byte_end":576646,"line_start":113,"line_end":113,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Utc as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10300},"children":[],"decl_id":{"krate":2,"index":10301},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2849},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":526842,"byte_end":526846,"line_start":44,"line_end":44,"column_start":5,"column_end":9},"name":"None","qualname":"::offset::LocalResult::None","value":"LocalResult::None","parent":{"krate":0,"index":2847},"children":[],"decl_id":null,"docs":" Given local time representation is invalid.\n This can occur when, for example, the positive timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation is invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":526714,"byte_end":526761,"line_start":42,"line_end":42,"column_start":5,"column_end":52}},{"value":"/ This can occur when, for example, the positive timezone transition.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":526766,"byte_end":526837,"line_start":43,"line_end":43,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2851},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":526920,"byte_end":526926,"line_start":46,"line_end":46,"column_start":5,"column_end":11},"name":"Single","qualname":"::offset::LocalResult::Single","value":"LocalResult::Single(T)","parent":{"krate":0,"index":2847},"children":[],"decl_id":null,"docs":" Given local time representation has a single unique result.\n","sig":null,"attributes":[{"value":"/ Given local time representation has a single unique result.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":526852,"byte_end":526915,"line_start":45,"line_end":45,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":2853},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":526927,"byte_end":526928,"line_start":46,"line_end":46,"column_start":12,"column_end":13},"name":"0","qualname":"::offset::LocalResult::Single::0","value":"T","parent":{"krate":0,"index":2851},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2854},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":527092,"byte_end":527101,"line_start":49,"line_end":49,"column_start":5,"column_end":14},"name":"Ambiguous","qualname":"::offset::LocalResult::Ambiguous","value":"LocalResult::Ambiguous(T, T)","parent":{"krate":0,"index":2847},"children":[],"decl_id":null,"docs":" Given local time representation has multiple results and thus ambiguous.\n This can occur when, for example, the negative timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation has multiple results and thus ambiguous.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":526935,"byte_end":527011,"line_start":47,"line_end":47,"column_start":5,"column_end":81}},{"value":"/ This can occur when, for example, the negative timezone transition.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":527016,"byte_end":527087,"line_start":48,"line_end":48,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":2856},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":527102,"byte_end":527103,"line_start":49,"line_end":49,"column_start":15,"column_end":16},"name":"0","qualname":"::offset::LocalResult::Ambiguous::0","value":"T","parent":{"krate":0,"index":2854},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2857},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":527113,"byte_end":527114,"line_start":49,"line_end":49,"column_start":26,"column_end":27},"name":"1","qualname":"::offset::LocalResult::Ambiguous::1","value":"T","parent":{"krate":0,"index":2854},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2847},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":526693,"byte_end":526704,"line_start":41,"line_end":41,"column_start":10,"column_end":21},"name":"LocalResult","qualname":"::offset::LocalResult","value":"enum LocalResult<T> { None, Single(T), Ambiguous(T, T), }","parent":null,"children":[{"krate":0,"index":2849},{"krate":0,"index":2851},{"krate":0,"index":2854}],"decl_id":null,"docs":" The conversion result from the local time to the timezone-aware datetime types.\n","sig":null,"attributes":[{"value":"/ The conversion result from the local time to the timezone-aware datetime types.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":526549,"byte_end":526632,"line_start":39,"line_end":39,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2069},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":527251,"byte_end":527257,"line_start":54,"line_end":54,"column_start":12,"column_end":18},"name":"single","qualname":"<LocalResult<T>>::single","value":"fn single(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` only when the conversion result is unique, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `Some` only when the conversion result is unique, or `None` otherwise.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":527157,"byte_end":527239,"line_start":53,"line_end":53,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2070},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":527485,"byte_end":527493,"line_start":62,"line_end":62,"column_start":12,"column_end":20},"name":"earliest","qualname":"<LocalResult<T>>::earliest","value":"fn earliest(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the earliest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the earliest possible conversion result, or `None` if none.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":527391,"byte_end":527473,"line_start":61,"line_end":61,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2071},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":527750,"byte_end":527756,"line_start":70,"line_end":70,"column_start":12,"column_end":18},"name":"latest","qualname":"<LocalResult<T>>::latest","value":"fn latest(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the latest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the latest possible conversion result, or `None` if none.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":527658,"byte_end":527738,"line_start":69,"line_end":69,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2072},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":528003,"byte_end":528006,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"map","qualname":"<LocalResult<T>>::map","value":"fn map<U, F>(Self, F) -> LocalResult<U> where F: FnMut(T) -> U","parent":null,"children":[],"decl_id":null,"docs":" Maps a `LocalResult<T>` into `LocalResult<U>` with given function.\n","sig":null,"attributes":[{"value":"/ Maps a `LocalResult<T>` into `LocalResult<U>` with given function.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":527921,"byte_end":527991,"line_start":77,"line_end":77,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":2077},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":528581,"byte_end":528589,"line_start":93,"line_end":93,"column_start":12,"column_end":20},"name":"and_time","qualname":"<LocalResult<Date<Tz>>>::and_time","value":"fn and_time(Self, NaiveTime) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":528356,"byte_end":528427,"line_start":88,"line_end":88,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":528432,"byte_end":528480,"line_start":89,"line_end":89,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":528485,"byte_end":528488,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":528493,"byte_end":528555,"line_start":91,"line_end":91,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":528560,"byte_end":528569,"line_start":92,"line_end":92,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2078},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":529084,"byte_end":529095,"line_start":107,"line_end":107,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_opt","value":"fn and_hms_opt(Self, u32, u32, u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":528856,"byte_end":528930,"line_start":102,"line_end":102,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":528935,"byte_end":528983,"line_start":103,"line_end":103,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":528988,"byte_end":528991,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":528996,"byte_end":529058,"line_start":105,"line_end":105,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":529063,"byte_end":529072,"line_start":106,"line_end":106,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2079},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":529715,"byte_end":529732,"line_start":122,"line_end":122,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_milli_opt","value":"fn and_hms_milli_opt(Self, u32, u32, u32, u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":529389,"byte_end":529476,"line_start":116,"line_end":116,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":529481,"byte_end":529561,"line_start":117,"line_end":117,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":529566,"byte_end":529614,"line_start":118,"line_end":118,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":529619,"byte_end":529622,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":529627,"byte_end":529689,"line_start":120,"line_end":120,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":529694,"byte_end":529703,"line_start":121,"line_end":121,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2080},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":530431,"byte_end":530448,"line_start":143,"line_end":143,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_micro_opt","value":"fn and_hms_micro_opt(Self, u32, u32, u32, u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":530101,"byte_end":530188,"line_start":137,"line_end":137,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":530193,"byte_end":530277,"line_start":138,"line_end":138,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":530282,"byte_end":530330,"line_start":139,"line_end":139,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":530335,"byte_end":530338,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":530343,"byte_end":530405,"line_start":141,"line_end":141,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":530410,"byte_end":530419,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2081},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":531149,"byte_end":531165,"line_start":164,"line_end":164,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_nano_opt","value":"fn and_hms_nano_opt(Self, u32, u32, u32, u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":530817,"byte_end":530903,"line_start":158,"line_end":158,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":530908,"byte_end":530995,"line_start":159,"line_end":159,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":531000,"byte_end":531048,"line_start":160,"line_end":160,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":531053,"byte_end":531056,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":531061,"byte_end":531123,"line_start":162,"line_end":162,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":531128,"byte_end":531137,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2084},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":531653,"byte_end":531659,"line_start":182,"line_end":182,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<LocalResult<T>>::unwrap","value":"fn unwrap(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the single unique conversion result, or panics accordingly.\n","sig":null,"attributes":[{"value":"/ Returns the single unique conversion result, or panics accordingly.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":531570,"byte_end":531641,"line_start":181,"line_end":181,"column_start":5,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":2085},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":532014,"byte_end":532020,"line_start":194,"line_end":194,"column_start":11,"column_end":17},"name":"Offset","qualname":"::offset::Offset","value":"Offset: Sized + Clone + fmt::Debug","parent":null,"children":[{"krate":0,"index":2086}],"decl_id":null,"docs":" The offset from the local time to UTC.\n","sig":null,"attributes":[{"value":"/ The offset from the local time to UTC.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":531961,"byte_end":532003,"line_start":193,"line_end":193,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2086},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":532126,"byte_end":532129,"line_start":196,"line_end":196,"column_start":8,"column_end":11},"name":"fix","qualname":"::offset::Offset::fix","value":"fn fix<'_>(&'_ Self) -> FixedOffset","parent":{"krate":0,"index":2085},"children":[],"decl_id":null,"docs":" Returns the fixed offset from UTC to the local time stored.\n","sig":null,"attributes":[{"value":"/ Returns the fixed offset from UTC to the local time stored.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":532055,"byte_end":532118,"line_start":195,"line_end":195,"column_start":5,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":2087},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":532328,"byte_end":532336,"line_start":203,"line_end":203,"column_start":11,"column_end":19},"name":"TimeZone","qualname":"::offset::TimeZone","value":"TimeZone: Sized + Clone","parent":null,"children":[{"krate":0,"index":2088},{"krate":0,"index":2089},{"krate":0,"index":2090},{"krate":0,"index":2091},{"krate":0,"index":2092},{"krate":0,"index":2093},{"krate":0,"index":2094},{"krate":0,"index":2095},{"krate":0,"index":2096},{"krate":0,"index":2097},{"krate":0,"index":2098},{"krate":0,"index":2099},{"krate":0,"index":2100},{"krate":0,"index":2101},{"krate":0,"index":2102},{"krate":0,"index":2103},{"krate":0,"index":2104},{"krate":0,"index":2106},{"krate":0,"index":2108},{"krate":0,"index":2109},{"krate":0,"index":2110},{"krate":0,"index":2111}],"decl_id":null,"docs":" The time zone.","sig":null,"attributes":[{"value":"/ The time zone.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":532156,"byte_end":532174,"line_start":199,"line_end":199,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":532175,"byte_end":532178,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ The methods here are the primarily constructors for [`Date`](../struct.Date.html) and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":532179,"byte_end":532268,"line_start":201,"line_end":201,"column_start":1,"column_end":90}},{"value":"/ [`DateTime`](../struct.DateTime.html) types.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":532269,"byte_end":532317,"line_start":202,"line_end":202,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":2088},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":532559,"byte_end":532565,"line_start":207,"line_end":207,"column_start":10,"column_end":16},"name":"Offset","qualname":"::offset::TimeZone::Offset","value":"type Offset: Offset;","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" An associated offset type.\n This type is used to store the actual offset in date and time types.\n The original `TimeZone` value can be recovered via `TimeZone::from_offset`.\n","sig":null,"attributes":[{"value":"/ An associated offset type.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":532358,"byte_end":532388,"line_start":204,"line_end":204,"column_start":5,"column_end":35}},{"value":"/ This type is used to store the actual offset in date and time types.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":532393,"byte_end":532465,"line_start":205,"line_end":205,"column_start":5,"column_end":77}},{"value":"/ The original `TimeZone` value can be recovered via `TimeZone::from_offset`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":532470,"byte_end":532549,"line_start":206,"line_end":206,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2089},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533180,"byte_end":533183,"line_start":224,"line_end":224,"column_start":8,"column_end":11},"name":"ymd","qualname":"::offset::TimeZone::ymd","value":"fn ymd<'_>(&'_ Self, i32, u32, u32) -> Date<Self>","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":532580,"byte_end":532651,"line_start":209,"line_end":209,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":532656,"byte_end":532735,"line_start":210,"line_end":210,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":532740,"byte_end":532743,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":532748,"byte_end":532841,"line_start":212,"line_end":212,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":532846,"byte_end":532923,"line_start":213,"line_end":213,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":532928,"byte_end":532931,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":532936,"byte_end":532998,"line_start":215,"line_end":215,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533003,"byte_end":533006,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533011,"byte_end":533024,"line_start":217,"line_end":217,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533029,"byte_end":533032,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533037,"byte_end":533044,"line_start":219,"line_end":219,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533049,"byte_end":533081,"line_start":220,"line_end":220,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533086,"byte_end":533089,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.ymd(2015, 5, 15).to_string(), \"2015-05-15UTC\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533094,"byte_end":533160,"line_start":222,"line_end":222,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533165,"byte_end":533172,"line_start":223,"line_end":223,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2090},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533997,"byte_end":534004,"line_start":244,"line_end":244,"column_start":8,"column_end":15},"name":"ymd_opt","qualname":"::offset::TimeZone::ymd_opt","value":"fn ymd_opt<'_>(&'_ Self, i32, u32, u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533299,"byte_end":533370,"line_start":228,"line_end":228,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533375,"byte_end":533454,"line_start":229,"line_end":229,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533459,"byte_end":533462,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533467,"byte_end":533560,"line_start":231,"line_end":231,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533565,"byte_end":533642,"line_start":232,"line_end":232,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533647,"byte_end":533650,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533655,"byte_end":533725,"line_start":234,"line_end":234,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533730,"byte_end":533733,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533738,"byte_end":533751,"line_start":236,"line_end":236,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533756,"byte_end":533759,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533764,"byte_end":533771,"line_start":238,"line_end":238,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Utc, LocalResult, TimeZone};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533776,"byte_end":533821,"line_start":239,"line_end":239,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533826,"byte_end":533829,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.ymd_opt(2015, 5, 15).unwrap().to_string(), \"2015-05-15UTC\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533834,"byte_end":533913,"line_start":241,"line_end":241,"column_start":5,"column_end":84}},{"value":"/ assert_eq!(Utc.ymd_opt(2000, 0, 0), LocalResult::None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533918,"byte_end":533977,"line_start":242,"line_end":242,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":533982,"byte_end":533989,"line_start":243,"line_end":243,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2091},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":534851,"byte_end":534853,"line_start":266,"line_end":266,"column_start":8,"column_end":10},"name":"yo","qualname":"::offset::TimeZone::yo","value":"fn yo<'_>(&'_ Self, i32, u32) -> Date<Self>","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":534241,"byte_end":534332,"line_start":251,"line_end":251,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":534337,"byte_end":534416,"line_start":252,"line_end":252,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":534421,"byte_end":534424,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":534429,"byte_end":534522,"line_start":254,"line_end":254,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":534527,"byte_end":534604,"line_start":255,"line_end":255,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":534609,"byte_end":534612,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid DOY.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":534617,"byte_end":534672,"line_start":257,"line_end":257,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":534677,"byte_end":534680,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":534685,"byte_end":534698,"line_start":259,"line_end":259,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":534703,"byte_end":534706,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":534711,"byte_end":534718,"line_start":261,"line_end":261,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":534723,"byte_end":534755,"line_start":262,"line_end":262,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":534760,"byte_end":534763,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.yo(2015, 135).to_string(), \"2015-05-15UTC\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":534768,"byte_end":534831,"line_start":264,"line_end":264,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":534836,"byte_end":534843,"line_start":265,"line_end":265,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2092},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":535404,"byte_end":535410,"line_start":277,"line_end":277,"column_start":8,"column_end":14},"name":"yo_opt","qualname":"::offset::TimeZone::yo_opt","value":"fn yo_opt<'_>(&'_ Self, i32, u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":534957,"byte_end":535048,"line_start":270,"line_end":270,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":535053,"byte_end":535132,"line_start":271,"line_end":271,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":535137,"byte_end":535140,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":535145,"byte_end":535238,"line_start":273,"line_end":273,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":535243,"byte_end":535320,"line_start":274,"line_end":274,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":535325,"byte_end":535328,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid DOY.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":535333,"byte_end":535396,"line_start":276,"line_end":276,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2093},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":536386,"byte_end":536392,"line_start":301,"line_end":301,"column_start":8,"column_end":14},"name":"isoywd","qualname":"::offset::TimeZone::isoywd","value":"fn isoywd<'_>(&'_ Self, i32, u32, Weekday) -> Date<Self>","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":535635,"byte_end":535726,"line_start":284,"line_end":284,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":535731,"byte_end":535757,"line_start":285,"line_end":285,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":535762,"byte_end":535841,"line_start":286,"line_end":286,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":535846,"byte_end":535917,"line_start":287,"line_end":287,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":535922,"byte_end":535925,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":535930,"byte_end":536023,"line_start":289,"line_end":289,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":536028,"byte_end":536105,"line_start":290,"line_end":290,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":536110,"byte_end":536113,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":536118,"byte_end":536181,"line_start":292,"line_end":292,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":536186,"byte_end":536189,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":536194,"byte_end":536207,"line_start":294,"line_end":294,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":536212,"byte_end":536215,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":536220,"byte_end":536227,"line_start":296,"line_end":296,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Utc, Weekday, TimeZone};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":536232,"byte_end":536273,"line_start":297,"line_end":297,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":536278,"byte_end":536281,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.isoywd(2015, 20, Weekday::Fri).to_string(), \"2015-05-15UTC\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":536286,"byte_end":536366,"line_start":299,"line_end":299,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":536371,"byte_end":536378,"line_start":300,"line_end":300,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2094},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":537083,"byte_end":537093,"line_start":314,"line_end":314,"column_start":8,"column_end":18},"name":"isoywd_opt","qualname":"::offset::TimeZone::isoywd_opt","value":"fn isoywd_opt<'_>(&'_ Self, i32, u32, Weekday) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":536521,"byte_end":536612,"line_start":305,"line_end":305,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":536617,"byte_end":536643,"line_start":306,"line_end":306,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":536648,"byte_end":536727,"line_start":307,"line_end":307,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":536732,"byte_end":536803,"line_start":308,"line_end":308,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":536808,"byte_end":536811,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":536816,"byte_end":536909,"line_start":310,"line_end":310,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":536914,"byte_end":536991,"line_start":311,"line_end":311,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":536996,"byte_end":536999,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":537004,"byte_end":537075,"line_start":313,"line_end":313,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2095},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":537916,"byte_end":537925,"line_start":335,"line_end":335,"column_start":8,"column_end":17},"name":"timestamp","qualname":"::offset::TimeZone::timestamp","value":"fn timestamp<'_>(&'_ Self, i64, u32) -> DateTime<Self>","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":537343,"byte_end":537405,"line_start":321,"line_end":321,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":537410,"byte_end":537470,"line_start":322,"line_end":322,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":537475,"byte_end":537546,"line_start":323,"line_end":323,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":537551,"byte_end":537554,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":537559,"byte_end":537634,"line_start":325,"line_end":325,"column_start":5,"column_end":80}},{"value":"/ for a non-panicking version see [`timestamp_opt`](#method.timestamp_opt).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":537639,"byte_end":537716,"line_start":326,"line_end":326,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":537721,"byte_end":537724,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":537729,"byte_end":537742,"line_start":328,"line_end":328,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":537747,"byte_end":537750,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":537755,"byte_end":537762,"line_start":330,"line_end":330,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":537767,"byte_end":537799,"line_start":331,"line_end":331,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":537804,"byte_end":537807,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp(1431648000, 0).to_string(), \"2015-05-15 00:00:00 UTC\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":537812,"byte_end":537896,"line_start":333,"line_end":333,"column_start":5,"column_end":89}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":537901,"byte_end":537908,"line_start":334,"line_end":334,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2096},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":538408,"byte_end":538421,"line_start":345,"line_end":345,"column_start":8,"column_end":21},"name":"timestamp_opt","qualname":"::offset::TimeZone::timestamp_opt","value":"fn timestamp_opt<'_>(&'_ Self, i64, u32) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":538036,"byte_end":538098,"line_start":339,"line_end":339,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":538103,"byte_end":538163,"line_start":340,"line_end":340,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":538168,"byte_end":538239,"line_start":341,"line_end":341,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":538244,"byte_end":538247,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ Returns `LocalResult::None` on out-of-range number of seconds and/or","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":538252,"byte_end":538324,"line_start":343,"line_end":343,"column_start":5,"column_end":77}},{"value":"/ invalid nanosecond, otherwise always returns `LocalResult::Single`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":538329,"byte_end":538400,"line_start":344,"line_end":344,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2097},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":539159,"byte_end":539175,"line_start":365,"line_end":365,"column_start":8,"column_end":24},"name":"timestamp_millis","qualname":"::offset::TimeZone::timestamp_millis","value":"fn timestamp_millis<'_>(&'_ Self, i64) -> DateTime<Self>","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap milliseconds","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":538682,"byte_end":538749,"line_start":352,"line_end":352,"column_start":5,"column_end":72}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":538754,"byte_end":538815,"line_start":353,"line_end":353,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":538820,"byte_end":538823,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ Panics on out-of-range number of milliseconds for a non-panicking","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":538828,"byte_end":538897,"line_start":355,"line_end":355,"column_start":5,"column_end":74}},{"value":"/ version see [`timestamp_millis_opt`](#method.timestamp_millis_opt).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":538902,"byte_end":538973,"line_start":356,"line_end":356,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":538978,"byte_end":538981,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":538986,"byte_end":538999,"line_start":358,"line_end":358,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":539004,"byte_end":539007,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":539012,"byte_end":539019,"line_start":360,"line_end":360,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":539024,"byte_end":539056,"line_start":361,"line_end":361,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":539061,"byte_end":539064,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp_millis(1431648000).timestamp(), 1431648);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":539069,"byte_end":539139,"line_start":363,"line_end":363,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":539144,"byte_end":539151,"line_start":364,"line_end":364,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2098},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":539904,"byte_end":539924,"line_start":386,"line_end":386,"column_start":8,"column_end":28},"name":"timestamp_millis_opt","qualname":"::offset::TimeZone::timestamp_millis_opt","value":"fn timestamp_millis_opt<'_>(&'_ Self, i64) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap milliseconds","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":539278,"byte_end":539345,"line_start":369,"line_end":369,"column_start":5,"column_end":72}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":539350,"byte_end":539411,"line_start":370,"line_end":370,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":539416,"byte_end":539419,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":539424,"byte_end":539427,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ Returns `LocalResult::None` on out-of-range number of milliseconds","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":539432,"byte_end":539502,"line_start":373,"line_end":373,"column_start":5,"column_end":75}},{"value":"/ and/or invalid nanosecond, otherwise always returns","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":539507,"byte_end":539562,"line_start":374,"line_end":374,"column_start":5,"column_end":60}},{"value":"/ `LocalResult::Single`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":539567,"byte_end":539593,"line_start":375,"line_end":375,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":539598,"byte_end":539601,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":539606,"byte_end":539619,"line_start":377,"line_end":377,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":539624,"byte_end":539627,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":539632,"byte_end":539639,"line_start":379,"line_end":379,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Utc, TimeZone, LocalResult};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":539644,"byte_end":539689,"line_start":380,"line_end":380,"column_start":5,"column_end":50}},{"value":"/ match Utc.timestamp_millis_opt(1431648000) {","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":539694,"byte_end":539742,"line_start":381,"line_end":381,"column_start":5,"column_end":53}},{"value":"/     LocalResult::Single(dt) => assert_eq!(dt.timestamp(), 1431648),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":539747,"byte_end":539818,"line_start":382,"line_end":382,"column_start":5,"column_end":76}},{"value":"/     _ => panic!(\"Incorrect timestamp_millis\"),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":539823,"byte_end":539873,"line_start":383,"line_end":383,"column_start":5,"column_end":55}},{"value":"/ };","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":539878,"byte_end":539884,"line_start":384,"line_end":384,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":539889,"byte_end":539896,"line_start":385,"line_end":385,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2099},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":540624,"byte_end":540639,"line_start":408,"line_end":408,"column_start":8,"column_end":23},"name":"timestamp_nanos","qualname":"::offset::TimeZone::timestamp_nanos","value":"fn timestamp_nanos<'_>(&'_ Self, i64) -> DateTime<Self>","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap nanoseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap nanoseconds","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":540203,"byte_end":540269,"line_start":395,"line_end":395,"column_start":5,"column_end":71}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":540274,"byte_end":540335,"line_start":396,"line_end":396,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":540340,"byte_end":540343,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ Unlike [`timestamp_millis`](#method.timestamp_millis), this never","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":540348,"byte_end":540417,"line_start":398,"line_end":398,"column_start":5,"column_end":74}},{"value":"/ panics.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":540422,"byte_end":540433,"line_start":399,"line_end":399,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":540438,"byte_end":540441,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":540446,"byte_end":540459,"line_start":401,"line_end":401,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":540464,"byte_end":540467,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":540472,"byte_end":540479,"line_start":403,"line_end":403,"column_start":5,"column_end":12}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":540484,"byte_end":540516,"line_start":404,"line_end":404,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":540521,"byte_end":540524,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp_nanos(1431648000000000).timestamp(), 1431648);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":540529,"byte_end":540604,"line_start":406,"line_end":406,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":540609,"byte_end":540616,"line_start":407,"line_end":407,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2100},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":541412,"byte_end":541429,"line_start":428,"line_end":428,"column_start":8,"column_end":25},"name":"datetime_from_str","qualname":"::offset::TimeZone::datetime_from_str","value":"fn datetime_from_str<'_, '_, '_>(&'_ Self, &'_ str, &'_ str)\n-> ParseResult<DateTime<Self>>","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a\n `DateTime` with the current offset.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":540922,"byte_end":540988,"line_start":417,"line_end":417,"column_start":5,"column_end":71}},{"value":"/ `DateTime` with the current offset.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":540993,"byte_end":541032,"line_start":418,"line_end":418,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":541037,"byte_end":541040,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ See the [`crate::format::strftime`] module on the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":541045,"byte_end":541098,"line_start":420,"line_end":420,"column_start":5,"column_end":58}},{"value":"/ supported escape sequences.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":541103,"byte_end":541134,"line_start":421,"line_end":421,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":541139,"byte_end":541142,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ If the to-be-parsed string includes an offset, it *must* match the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":541147,"byte_end":541217,"line_start":423,"line_end":423,"column_start":5,"column_end":75}},{"value":"/ offset of the TimeZone, otherwise an error will be returned.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":541222,"byte_end":541286,"line_start":424,"line_end":424,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":541291,"byte_end":541294,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ See also [`DateTime::parse_from_str`] which gives a [`DateTime`] with","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":541299,"byte_end":541372,"line_start":426,"line_end":426,"column_start":5,"column_end":78}},{"value":"/ parsed [`FixedOffset`].","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":541377,"byte_end":541404,"line_start":427,"line_end":427,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2101},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":541700,"byte_end":541711,"line_start":435,"line_end":435,"column_start":8,"column_end":19},"name":"from_offset","qualname":"::offset::TimeZone::from_offset","value":"fn from_offset<'_>(&'_ Self::Offset) -> Self","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" Reconstructs the time zone from the offset.\n","sig":null,"attributes":[{"value":"/ Reconstructs the time zone from the offset.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":541645,"byte_end":541692,"line_start":434,"line_end":434,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2102},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":541823,"byte_end":541845,"line_start":438,"line_end":438,"column_start":8,"column_end":30},"name":"offset_from_local_date","qualname":"::offset::TimeZone::offset_from_local_date","value":"fn offset_from_local_date<'_, '_>(&'_ Self, &'_ NaiveDate)\n-> LocalResult<Self::Offset>","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDate` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDate` if possible.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":541749,"byte_end":541815,"line_start":437,"line_end":437,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2103},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":541985,"byte_end":542011,"line_start":441,"line_end":441,"column_start":8,"column_end":34},"name":"offset_from_local_datetime","qualname":"::offset::TimeZone::offset_from_local_datetime","value":"fn offset_from_local_datetime<'_, '_>(&'_ Self, &'_ NaiveDateTime)\n-> LocalResult<Self::Offset>","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDateTime` if possible.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":541907,"byte_end":541977,"line_start":440,"line_end":440,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":2104},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":542205,"byte_end":542220,"line_start":445,"line_end":445,"column_start":8,"column_end":23},"name":"from_local_date","qualname":"::offset::TimeZone::from_local_date","value":"fn from_local_date<'_, '_>(&'_ Self, &'_ NaiveDate) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDate` to the timezone-aware `Date` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDate` to the timezone-aware `Date` if possible.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":542077,"byte_end":542153,"line_start":443,"line_end":443,"column_start":5,"column_end":81}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":542158,"byte_end":542197,"line_start":444,"line_end":444,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2106},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":542616,"byte_end":542635,"line_start":454,"line_end":454,"column_start":8,"column_end":27},"name":"from_local_datetime","qualname":"::offset::TimeZone::from_local_datetime","value":"fn from_local_datetime<'_, '_>(&'_ Self, &'_ NaiveDateTime)\n-> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":542480,"byte_end":542564,"line_start":452,"line_end":452,"column_start":5,"column_end":89}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":542569,"byte_end":542608,"line_start":453,"line_end":453,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2108},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":542909,"byte_end":542929,"line_start":460,"line_end":460,"column_start":8,"column_end":28},"name":"offset_from_utc_date","qualname":"::offset::TimeZone::offset_from_utc_date","value":"fn offset_from_utc_date<'_, '_>(&'_ Self, &'_ NaiveDate) -> Self::Offset","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDate`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDate`. This cannot fail.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":542834,"byte_end":542901,"line_start":459,"line_end":459,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2109},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":543055,"byte_end":543079,"line_start":463,"line_end":463,"column_start":8,"column_end":32},"name":"offset_from_utc_datetime","qualname":"::offset::TimeZone::offset_from_utc_datetime","value":"fn offset_from_utc_datetime<'_, '_>(&'_ Self, &'_ NaiveDateTime)\n-> Self::Offset","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDateTime`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDateTime`. This cannot fail.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":542976,"byte_end":543047,"line_start":462,"line_end":462,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2110},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":543330,"byte_end":543343,"line_start":468,"line_end":468,"column_start":8,"column_end":21},"name":"from_utc_date","qualname":"::offset::TimeZone::from_utc_date","value":"fn from_utc_date<'_, '_>(&'_ Self, &'_ NaiveDate) -> Date<Self>","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDate` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDate` to the local time.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":543130,"byte_end":543181,"line_start":465,"line_end":465,"column_start":5,"column_end":56}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":543186,"byte_end":543278,"line_start":466,"line_end":466,"column_start":5,"column_end":97}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":543283,"byte_end":543322,"line_start":467,"line_end":467,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2111},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":543660,"byte_end":543677,"line_start":475,"line_end":475,"column_start":8,"column_end":25},"name":"from_utc_datetime","qualname":"::offset::TimeZone::from_utc_datetime","value":"fn from_utc_datetime<'_, '_>(&'_ Self, &'_ NaiveDateTime) -> DateTime<Self>","parent":{"krate":0,"index":2087},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDateTime` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDateTime` to the local time.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":543456,"byte_end":543511,"line_start":472,"line_end":472,"column_start":5,"column_end":60}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":543516,"byte_end":543608,"line_start":473,"line_end":473,"column_start":5,"column_end":97}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":543613,"byte_end":543652,"line_start":474,"line_end":474,"column_start":5,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":2163},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":577432,"byte_end":577443,"line_start":20,"line_end":20,"column_start":11,"column_end":22},"name":"SubsecRound","qualname":"::round::SubsecRound","value":"SubsecRound","parent":null,"children":[{"krate":0,"index":2164},{"krate":0,"index":2165}],"decl_id":null,"docs":" Extension trait for subsecond rounding or truncation to a maximum number\n of digits. Rounding can be used to decrease the error variance when\n serializing/persisting to lower precision. Truncation is the default\n behavior in Chrono display formatting.  Either can be used to guarantee\n equality (e.g. for testing) when round-tripping through a lower precision\n format.\n","sig":null,"attributes":[{"value":"/ Extension trait for subsecond rounding or truncation to a maximum number","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":577034,"byte_end":577110,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"/ of digits. Rounding can be used to decrease the error variance when","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":577111,"byte_end":577182,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/ serializing/persisting to lower precision. Truncation is the default","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":577183,"byte_end":577255,"line_start":16,"line_end":16,"column_start":1,"column_end":73}},{"value":"/ behavior in Chrono display formatting.  Either can be used to guarantee","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":577256,"byte_end":577331,"line_start":17,"line_end":17,"column_start":1,"column_end":76}},{"value":"/ equality (e.g. for testing) when round-tripping through a lower precision","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":577332,"byte_end":577409,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ format.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":577410,"byte_end":577421,"line_start":19,"line_end":19,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2164},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":577973,"byte_end":577986,"line_start":32,"line_end":32,"column_start":8,"column_end":21},"name":"round_subsecs","qualname":"::round::SubsecRound::round_subsecs","value":"fn round_subsecs(Self, u16) -> Self","parent":{"krate":0,"index":2163},"children":[],"decl_id":null,"docs":" Return a copy rounded to the specified number of subsecond digits. With\n 9 or more digits, self is returned unmodified. Halfway values are\n rounded up (away from zero).","sig":null,"attributes":[{"value":"/ Return a copy rounded to the specified number of subsecond digits. With","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":577450,"byte_end":577525,"line_start":21,"line_end":21,"column_start":5,"column_end":80}},{"value":"/ 9 or more digits, self is returned unmodified. Halfway values are","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":577530,"byte_end":577599,"line_start":22,"line_end":22,"column_start":5,"column_end":74}},{"value":"/ rounded up (away from zero).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":577604,"byte_end":577636,"line_start":23,"line_end":23,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":577641,"byte_end":577644,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":577649,"byte_end":577662,"line_start":25,"line_end":25,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":577667,"byte_end":577679,"line_start":26,"line_end":26,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, SubsecRound, Timelike, TimeZone, Utc};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":577684,"byte_end":577751,"line_start":27,"line_end":27,"column_start":5,"column_end":72}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":577756,"byte_end":577819,"line_start":28,"line_end":28,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.round_subsecs(2).nanosecond(), 150_000_000);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":577824,"byte_end":577886,"line_start":29,"line_end":29,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.round_subsecs(1).nanosecond(), 200_000_000);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":577891,"byte_end":577953,"line_start":30,"line_end":30,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":577958,"byte_end":577965,"line_start":31,"line_end":31,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2165},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":578489,"byte_end":578502,"line_start":44,"line_end":44,"column_start":8,"column_end":21},"name":"trunc_subsecs","qualname":"::round::SubsecRound::trunc_subsecs","value":"fn trunc_subsecs(Self, u16) -> Self","parent":{"krate":0,"index":2163},"children":[],"decl_id":null,"docs":" Return a copy truncated to the specified number of subsecond\n digits. With 9 or more digits, self is returned unmodified.","sig":null,"attributes":[{"value":"/ Return a copy truncated to the specified number of subsecond","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":578020,"byte_end":578084,"line_start":34,"line_end":34,"column_start":5,"column_end":69}},{"value":"/ digits. With 9 or more digits, self is returned unmodified.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":578089,"byte_end":578152,"line_start":35,"line_end":35,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":578157,"byte_end":578160,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":578165,"byte_end":578178,"line_start":37,"line_end":37,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":578183,"byte_end":578195,"line_start":38,"line_end":38,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, SubsecRound, Timelike, TimeZone, Utc};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":578200,"byte_end":578267,"line_start":39,"line_end":39,"column_start":5,"column_end":72}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":578272,"byte_end":578335,"line_start":40,"line_end":40,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.trunc_subsecs(2).nanosecond(), 150_000_000);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":578340,"byte_end":578402,"line_start":41,"line_end":41,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.trunc_subsecs(1).nanosecond(), 100_000_000);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":578407,"byte_end":578469,"line_start":42,"line_end":42,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":578474,"byte_end":578481,"line_start":43,"line_end":43,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2168},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":578648,"byte_end":578661,"line_start":51,"line_end":51,"column_start":8,"column_end":21},"name":"round_subsecs","qualname":"<T as round::SubsecRound>::round_subsecs","value":"fn round_subsecs(Self, u16) -> T","parent":{"krate":0,"index":2163},"children":[],"decl_id":{"krate":0,"index":2164},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2169},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":579129,"byte_end":579142,"line_start":66,"line_end":66,"column_start":8,"column_end":21},"name":"trunc_subsecs","qualname":"<T as round::SubsecRound>::trunc_subsecs","value":"fn trunc_subsecs(Self, u16) -> T","parent":{"krate":0,"index":2163},"children":[],"decl_id":{"krate":0,"index":2165},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2171},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":580241,"byte_end":580254,"line_start":101,"line_end":101,"column_start":11,"column_end":24},"name":"DurationRound","qualname":"::round::DurationRound","value":"DurationRound: Sized","parent":null,"children":[{"krate":0,"index":2172},{"krate":0,"index":2173},{"krate":0,"index":2174}],"decl_id":null,"docs":" Extension trait for rounding or truncating a DateTime by a Duration.","sig":null,"attributes":[{"value":"/ Extension trait for rounding or truncating a DateTime by a Duration.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":579828,"byte_end":579900,"line_start":94,"line_end":94,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":579901,"byte_end":579904,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ # Limitations","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":579905,"byte_end":579922,"line_start":96,"line_end":96,"column_start":1,"column_end":18}},{"value":"/ Both rounding and truncating are done via [`Duration::num_nanoseconds`] and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":579923,"byte_end":580002,"line_start":97,"line_end":97,"column_start":1,"column_end":80}},{"value":"/ [`DateTime::timestamp_nanos`]. This means that they will fail if either the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":580003,"byte_end":580082,"line_start":98,"line_end":98,"column_start":1,"column_end":80}},{"value":"/ `Duration` or the `DateTime` are too big to represented as nanoseconds. They","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":580083,"byte_end":580163,"line_start":99,"line_end":99,"column_start":1,"column_end":81}},{"value":"/ will also fail if the `Duration` is bigger than the timestamp.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":580164,"byte_end":580230,"line_start":100,"line_end":100,"column_start":1,"column_end":67}}]},{"kind":"Type","id":{"krate":0,"index":2172},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":580367,"byte_end":580370,"line_start":104,"line_end":104,"column_start":10,"column_end":13},"name":"Err","qualname":"::round::DurationRound::Err","value":"type Err: std::error::Error;","parent":{"krate":0,"index":2171},"children":[],"decl_id":null,"docs":" Error that can occur in rounding or truncating\n","sig":null,"attributes":[{"value":"/ Error that can occur in rounding or truncating","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":580268,"byte_end":580318,"line_start":102,"line_end":102,"column_start":5,"column_end":55}},{"value":"cfg(any(feature = \"std\", test))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":580323,"byte_end":580357,"line_start":103,"line_end":103,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2173},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":581073,"byte_end":581087,"line_start":125,"line_end":125,"column_start":8,"column_end":22},"name":"duration_round","qualname":"::round::DurationRound::duration_round","value":"fn duration_round(Self, Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":2171},"children":[],"decl_id":null,"docs":" Return a copy rounded by Duration.","sig":null,"attributes":[{"value":"/ Return a copy rounded by Duration.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":580537,"byte_end":580575,"line_start":110,"line_end":110,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":580580,"byte_end":580583,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":580588,"byte_end":580601,"line_start":112,"line_end":112,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":580606,"byte_end":580618,"line_start":113,"line_end":113,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, TimeZone, Utc};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":580623,"byte_end":580692,"line_start":114,"line_end":114,"column_start":5,"column_end":74}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":580697,"byte_end":580760,"line_start":115,"line_end":115,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":580765,"byte_end":580780,"line_start":116,"line_end":116,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::milliseconds(10)).unwrap().to_string(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":580785,"byte_end":580860,"line_start":117,"line_end":117,"column_start":5,"column_end":80}},{"value":"/     \"2018-01-11 12:00:00.150 UTC\"","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":580865,"byte_end":580902,"line_start":118,"line_end":118,"column_start":5,"column_end":42}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":580907,"byte_end":580913,"line_start":119,"line_end":119,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":580918,"byte_end":580933,"line_start":120,"line_end":120,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::days(1)).unwrap().to_string(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":580938,"byte_end":581004,"line_start":121,"line_end":121,"column_start":5,"column_end":71}},{"value":"/     \"2018-01-12 00:00:00 UTC\"","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":581009,"byte_end":581042,"line_start":122,"line_end":122,"column_start":5,"column_end":38}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":581047,"byte_end":581053,"line_start":123,"line_end":123,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":581058,"byte_end":581065,"line_start":124,"line_end":124,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2174},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":581685,"byte_end":581699,"line_start":142,"line_end":142,"column_start":8,"column_end":22},"name":"duration_trunc","qualname":"::round::DurationRound::duration_trunc","value":"fn duration_trunc(Self, Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":2171},"children":[],"decl_id":null,"docs":" Return a copy truncated by Duration.","sig":null,"attributes":[{"value":"/ Return a copy truncated by Duration.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":581147,"byte_end":581187,"line_start":127,"line_end":127,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":581192,"byte_end":581195,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":581200,"byte_end":581213,"line_start":129,"line_end":129,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":581218,"byte_end":581230,"line_start":130,"line_end":130,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, TimeZone, Utc};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":581235,"byte_end":581304,"line_start":131,"line_end":131,"column_start":5,"column_end":74}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":581309,"byte_end":581372,"line_start":132,"line_end":132,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":581377,"byte_end":581392,"line_start":133,"line_end":133,"column_start":5,"column_end":20}},{"value":"/     dt.duration_trunc(Duration::milliseconds(10)).unwrap().to_string(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":581397,"byte_end":581472,"line_start":134,"line_end":134,"column_start":5,"column_end":80}},{"value":"/     \"2018-01-11 12:00:00.150 UTC\"","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":581477,"byte_end":581514,"line_start":135,"line_end":135,"column_start":5,"column_end":42}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":581519,"byte_end":581525,"line_start":136,"line_end":136,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":581530,"byte_end":581545,"line_start":137,"line_end":137,"column_start":5,"column_end":20}},{"value":"/     dt.duration_trunc(Duration::days(1)).unwrap().to_string(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":581550,"byte_end":581616,"line_start":138,"line_end":138,"column_start":5,"column_end":71}},{"value":"/     \"2018-01-11 00:00:00 UTC\"","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":581621,"byte_end":581654,"line_start":139,"line_end":139,"column_start":5,"column_end":38}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":581659,"byte_end":581665,"line_start":140,"line_end":140,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":581670,"byte_end":581677,"line_start":141,"line_end":141,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2179},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":581993,"byte_end":582007,"line_start":151,"line_end":151,"column_start":8,"column_end":22},"name":"duration_round","qualname":"<DateTime<Tz> as round::DurationRound>::duration_round","value":"fn duration_round(Self, Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":2171},"children":[],"decl_id":{"krate":0,"index":2173},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2180},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":582136,"byte_end":582150,"line_start":155,"line_end":155,"column_start":8,"column_end":22},"name":"duration_trunc","qualname":"<DateTime<Tz> as round::DurationRound>::duration_trunc","value":"fn duration_trunc(Self, Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":2171},"children":[],"decl_id":{"krate":0,"index":2174},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2183},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":582351,"byte_end":582365,"line_start":163,"line_end":163,"column_start":8,"column_end":22},"name":"duration_round","qualname":"<NaiveDateTime as round::DurationRound>::duration_round","value":"fn duration_round(Self, Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":2171},"children":[],"decl_id":{"krate":0,"index":2173},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2184},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":582480,"byte_end":582494,"line_start":167,"line_end":167,"column_start":8,"column_end":22},"name":"duration_trunc","qualname":"<NaiveDateTime as round::DurationRound>::duration_trunc","value":"fn duration_trunc(Self, Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":2171},"children":[],"decl_id":{"krate":0,"index":2174},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2882},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":585302,"byte_end":585326,"line_start":254,"line_end":254,"column_start":5,"column_end":29},"name":"DurationExceedsTimestamp","qualname":"::round::RoundingError::DurationExceedsTimestamp","value":"RoundingError::DurationExceedsTimestamp","parent":{"krate":0,"index":2881},"children":[],"decl_id":null,"docs":" Error when the Duration exceeds the Duration from or until the Unix epoch.","sig":null,"attributes":[{"value":"/ Error when the Duration exceeds the Duration from or until the Unix epoch.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":584887,"byte_end":584965,"line_start":243,"line_end":243,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":584970,"byte_end":584973,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":584978,"byte_end":584990,"line_start":245,"line_end":245,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":584995,"byte_end":585079,"line_start":246,"line_end":246,"column_start":5,"column_end":89}},{"value":"/ let dt = Utc.ymd(1970, 12, 12).and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":585084,"byte_end":585136,"line_start":247,"line_end":247,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":585141,"byte_end":585144,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":585149,"byte_end":585164,"line_start":249,"line_end":249,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::days(365)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":585169,"byte_end":585216,"line_start":250,"line_end":250,"column_start":5,"column_end":52}},{"value":"/     Err(RoundingError::DurationExceedsTimestamp),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":585221,"byte_end":585274,"line_start":251,"line_end":251,"column_start":5,"column_end":58}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":585279,"byte_end":585285,"line_start":252,"line_end":252,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":585290,"byte_end":585297,"line_start":253,"line_end":253,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2884},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":585753,"byte_end":585773,"line_start":267,"line_end":267,"column_start":5,"column_end":25},"name":"DurationExceedsLimit","qualname":"::round::RoundingError::DurationExceedsLimit","value":"RoundingError::DurationExceedsLimit","parent":{"krate":0,"index":2881},"children":[],"decl_id":null,"docs":" Error when `Duration.num_nanoseconds` exceeds the limit.","sig":null,"attributes":[{"value":"/ Error when `Duration.num_nanoseconds` exceeds the limit.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":585333,"byte_end":585393,"line_start":256,"line_end":256,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":585398,"byte_end":585401,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":585406,"byte_end":585418,"line_start":258,"line_end":258,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":585423,"byte_end":585507,"line_start":259,"line_end":259,"column_start":5,"column_end":89}},{"value":"/ let dt = Utc.ymd(2260, 12, 31).and_hms_nano(23, 59, 59, 1_75_500_000);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":585512,"byte_end":585586,"line_start":260,"line_end":260,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":585591,"byte_end":585594,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":585599,"byte_end":585614,"line_start":262,"line_end":262,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::days(300 * 365)),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":585619,"byte_end":585672,"line_start":263,"line_end":263,"column_start":5,"column_end":58}},{"value":"/     Err(RoundingError::DurationExceedsLimit)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":585677,"byte_end":585725,"line_start":264,"line_end":264,"column_start":5,"column_end":53}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":585730,"byte_end":585736,"line_start":265,"line_end":265,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":585741,"byte_end":585748,"line_start":266,"line_end":266,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2886},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":586138,"byte_end":586159,"line_start":277,"line_end":277,"column_start":5,"column_end":26},"name":"TimestampExceedsLimit","qualname":"::round::RoundingError::TimestampExceedsLimit","value":"RoundingError::TimestampExceedsLimit","parent":{"krate":0,"index":2881},"children":[],"decl_id":null,"docs":" Error when `DateTime.timestamp_nanos` exceeds the limit.","sig":null,"attributes":[{"value":"/ Error when `DateTime.timestamp_nanos` exceeds the limit.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":585780,"byte_end":585840,"line_start":269,"line_end":269,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":585845,"byte_end":585848,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":585853,"byte_end":585865,"line_start":271,"line_end":271,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":585870,"byte_end":585954,"line_start":272,"line_end":272,"column_start":5,"column_end":89}},{"value":"/ let dt = Utc.ymd(2300, 12, 12).and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":585959,"byte_end":586011,"line_start":273,"line_end":273,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":586016,"byte_end":586019,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(dt.duration_round(Duration::days(1)), Err(RoundingError::TimestampExceedsLimit),);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":586024,"byte_end":586121,"line_start":275,"line_end":275,"column_start":5,"column_end":102}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":586126,"byte_end":586133,"line_start":276,"line_end":276,"column_start":5,"column_end":12}}]},{"kind":"Enum","id":{"krate":0,"index":2881},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":584867,"byte_end":584880,"line_start":242,"line_end":242,"column_start":10,"column_end":23},"name":"RoundingError","qualname":"::round::RoundingError","value":"enum RoundingError {\n    DurationExceedsTimestamp,\n    DurationExceedsLimit,\n    TimestampExceedsLimit,\n}","parent":null,"children":[{"krate":0,"index":2882},{"krate":0,"index":2884},{"krate":0,"index":2886}],"decl_id":null,"docs":" An error from rounding by `Duration`","sig":null,"attributes":[{"value":"/ An error from rounding by `Duration`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":584741,"byte_end":584781,"line_start":238,"line_end":238,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":584782,"byte_end":584785,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ See: [`DurationRound`]","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":584786,"byte_end":584812,"line_start":240,"line_end":240,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":2190},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":586209,"byte_end":586212,"line_start":281,"line_end":281,"column_start":8,"column_end":11},"name":"fmt","qualname":"<RoundingError as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10300},"children":[],"decl_id":{"krate":2,"index":10301},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2192},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":586826,"byte_end":586837,"line_start":299,"line_end":299,"column_start":8,"column_end":19},"name":"description","qualname":"<RoundingError as std::error::Error>::description","value":"fn description<'_>(&'_ Self) -> &'_ str","parent":{"krate":1,"index":2576},"children":[],"decl_id":{"krate":1,"index":2579},"docs":"","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":586798,"byte_end":586818,"line_start":298,"line_end":298,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2900},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":599214,"byte_end":599217,"line_start":16,"line_end":16,"column_start":5,"column_end":8},"name":"Mon","qualname":"::weekday::Weekday::Mon","value":"Weekday::Mon","parent":{"krate":0,"index":2899},"children":[],"decl_id":null,"docs":" Monday.\n","sig":null,"attributes":[{"value":"/ Monday.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":599198,"byte_end":599209,"line_start":15,"line_end":15,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2903},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":599244,"byte_end":599247,"line_start":18,"line_end":18,"column_start":5,"column_end":8},"name":"Tue","qualname":"::weekday::Weekday::Tue","value":"Weekday::Tue","parent":{"krate":0,"index":2899},"children":[],"decl_id":null,"docs":" Tuesday.\n","sig":null,"attributes":[{"value":"/ Tuesday.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":599227,"byte_end":599239,"line_start":17,"line_end":17,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2906},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":599276,"byte_end":599279,"line_start":20,"line_end":20,"column_start":5,"column_end":8},"name":"Wed","qualname":"::weekday::Weekday::Wed","value":"Weekday::Wed","parent":{"krate":0,"index":2899},"children":[],"decl_id":null,"docs":" Wednesday.\n","sig":null,"attributes":[{"value":"/ Wednesday.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":599257,"byte_end":599271,"line_start":19,"line_end":19,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2909},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":599307,"byte_end":599310,"line_start":22,"line_end":22,"column_start":5,"column_end":8},"name":"Thu","qualname":"::weekday::Weekday::Thu","value":"Weekday::Thu","parent":{"krate":0,"index":2899},"children":[],"decl_id":null,"docs":" Thursday.\n","sig":null,"attributes":[{"value":"/ Thursday.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":599289,"byte_end":599302,"line_start":21,"line_end":21,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2912},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":599336,"byte_end":599339,"line_start":24,"line_end":24,"column_start":5,"column_end":8},"name":"Fri","qualname":"::weekday::Weekday::Fri","value":"Weekday::Fri","parent":{"krate":0,"index":2899},"children":[],"decl_id":null,"docs":" Friday.\n","sig":null,"attributes":[{"value":"/ Friday.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":599320,"byte_end":599331,"line_start":23,"line_end":23,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2915},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":599367,"byte_end":599370,"line_start":26,"line_end":26,"column_start":5,"column_end":8},"name":"Sat","qualname":"::weekday::Weekday::Sat","value":"Weekday::Sat","parent":{"krate":0,"index":2899},"children":[],"decl_id":null,"docs":" Saturday.\n","sig":null,"attributes":[{"value":"/ Saturday.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":599349,"byte_end":599362,"line_start":25,"line_end":25,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2918},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":599396,"byte_end":599399,"line_start":28,"line_end":28,"column_start":5,"column_end":8},"name":"Sun","qualname":"::weekday::Weekday::Sun","value":"Weekday::Sun","parent":{"krate":0,"index":2899},"children":[],"decl_id":null,"docs":" Sunday.\n","sig":null,"attributes":[{"value":"/ Sunday.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":599380,"byte_end":599391,"line_start":27,"line_end":27,"column_start":5,"column_end":16}}]},{"kind":"Enum","id":{"krate":0,"index":2899},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":599184,"byte_end":599191,"line_start":14,"line_end":14,"column_start":10,"column_end":17},"name":"Weekday","qualname":"::weekday::Weekday","value":"enum Weekday { Mon = , Tue = , Wed = , Thu = , Fri = , Sat = , Sun = , }","parent":null,"children":[{"krate":0,"index":2900},{"krate":0,"index":2903},{"krate":0,"index":2906},{"krate":0,"index":2909},{"krate":0,"index":2912},{"krate":0,"index":2915},{"krate":0,"index":2918}],"decl_id":null,"docs":" The day of week.","sig":null,"attributes":[{"value":"/ The day of week.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":598718,"byte_end":598738,"line_start":6,"line_end":6,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":598739,"byte_end":598742,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ The order of the days of week depends on the context.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":598743,"byte_end":598800,"line_start":8,"line_end":8,"column_start":1,"column_end":58}},{"value":"/ (This is why this type does *not* implement `PartialOrd` or `Ord` traits.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":598801,"byte_end":598879,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/ One should prefer `*_from_monday` or `*_from_sunday` methods to get the correct result.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":598880,"byte_end":598971,"line_start":10,"line_end":10,"column_start":1,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":2208},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":599718,"byte_end":599722,"line_start":38,"line_end":38,"column_start":12,"column_end":16},"name":"succ","qualname":"<Weekday>::succ","value":"fn succ<'_>(&'_ Self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The next day in the week.","sig":null,"attributes":[{"value":"/ The next day in the week.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":599427,"byte_end":599456,"line_start":32,"line_end":32,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":599461,"byte_end":599464,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":599469,"byte_end":599540,"line_start":34,"line_end":34,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":599545,"byte_end":599616,"line_start":35,"line_end":35,"column_start":5,"column_end":76}},{"value":"/ `w.succ()`: | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun` | `Mon`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":599621,"byte_end":599692,"line_start":36,"line_end":36,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":599697,"byte_end":599706,"line_start":37,"line_end":37,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2209},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":600375,"byte_end":600379,"line_start":56,"line_end":56,"column_start":12,"column_end":16},"name":"pred","qualname":"<Weekday>::pred","value":"fn pred<'_>(&'_ Self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The previous day in the week.","sig":null,"attributes":[{"value":"/ The previous day in the week.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":600080,"byte_end":600113,"line_start":50,"line_end":50,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":600118,"byte_end":600121,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":600126,"byte_end":600197,"line_start":52,"line_end":52,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":600202,"byte_end":600273,"line_start":53,"line_end":53,"column_start":5,"column_end":76}},{"value":"/ `w.pred()`: | `Sun` | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":600278,"byte_end":600349,"line_start":54,"line_end":54,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":600354,"byte_end":600363,"line_start":55,"line_end":55,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2210},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":601121,"byte_end":601139,"line_start":74,"line_end":74,"column_start":12,"column_end":30},"name":"number_from_monday","qualname":"<Weekday>::number_from_monday","value":"fn number_from_monday<'_>(&'_ Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":600737,"byte_end":600821,"line_start":68,"line_end":68,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":600826,"byte_end":600829,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":600834,"byte_end":600919,"line_start":70,"line_end":70,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":600924,"byte_end":601009,"line_start":71,"line_end":71,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_monday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 7","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":601014,"byte_end":601095,"line_start":72,"line_end":72,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":601100,"byte_end":601109,"line_start":73,"line_end":73,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2211},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":601774,"byte_end":601792,"line_start":92,"line_end":92,"column_start":12,"column_end":30},"name":"number_from_sunday","qualname":"<Weekday>::number_from_sunday","value":"fn number_from_sunday<'_>(&'_ Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 1.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 1.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":601416,"byte_end":601474,"line_start":86,"line_end":86,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":601479,"byte_end":601482,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":601487,"byte_end":601572,"line_start":88,"line_end":88,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":601577,"byte_end":601662,"line_start":89,"line_end":89,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_sunday()`: | 2     | 3     | 4     | 5     | 6     | 7     | 1","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":601667,"byte_end":601748,"line_start":90,"line_end":90,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":601753,"byte_end":601762,"line_start":91,"line_end":91,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2212},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":602433,"byte_end":602453,"line_start":110,"line_end":110,"column_start":12,"column_end":32},"name":"num_days_from_monday","qualname":"<Weekday>::num_days_from_monday","value":"fn num_days_from_monday<'_>(&'_ Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 0.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":602069,"byte_end":602127,"line_start":104,"line_end":104,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":602132,"byte_end":602135,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":602140,"byte_end":602227,"line_start":106,"line_end":106,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":602232,"byte_end":602319,"line_start":107,"line_end":107,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_monday()`: | 0     | 1     | 2     | 3     | 4     | 5     | 6","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":602324,"byte_end":602407,"line_start":108,"line_end":108,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":602412,"byte_end":602421,"line_start":109,"line_end":109,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2213},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":603094,"byte_end":603114,"line_start":128,"line_end":128,"column_start":12,"column_end":32},"name":"num_days_from_sunday","qualname":"<Weekday>::num_days_from_sunday","value":"fn num_days_from_sunday<'_>(&'_ Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 0.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":602730,"byte_end":602788,"line_start":122,"line_end":122,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":602793,"byte_end":602796,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":602801,"byte_end":602888,"line_start":124,"line_end":124,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":602893,"byte_end":602980,"line_start":125,"line_end":125,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_sunday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 0","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":602985,"byte_end":603068,"line_start":126,"line_end":126,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":603073,"byte_end":603082,"line_start":127,"line_end":127,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2215},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":603428,"byte_end":603431,"line_start":142,"line_end":142,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Weekday as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10300},"children":[],"decl_id":{"krate":2,"index":10301},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2217},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":604097,"byte_end":604105,"line_start":160,"line_end":160,"column_start":8,"column_end":16},"name":"from_i64","qualname":"<Weekday as num_traits::FromPrimitive>::from_i64","value":"fn from_i64(i64) -> Option<Weekday>","parent":{"krate":19,"index":337},"children":[],"decl_id":{"krate":19,"index":342},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":604080,"byte_end":604089,"line_start":159,"line_end":159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2218},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":604473,"byte_end":604481,"line_start":174,"line_end":174,"column_start":8,"column_end":16},"name":"from_u64","qualname":"<Weekday as num_traits::FromPrimitive>::from_u64","value":"fn from_u64(u64) -> Option<Weekday>","parent":{"krate":19,"index":337},"children":[],"decl_id":{"krate":19,"index":348},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":604456,"byte_end":604465,"line_start":173,"line_end":173,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2935},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":604941,"byte_end":604958,"line_start":190,"line_end":190,"column_start":12,"column_end":29},"name":"ParseWeekdayError","qualname":"::weekday::ParseWeekdayError","value":"ParseWeekdayError {  }","parent":null,"children":[{"krate":0,"index":2936}],"decl_id":null,"docs":" An error resulting from reading `Weekday` value with `FromStr`.\n","sig":null,"attributes":[{"value":"/ An error resulting from reading `Weekday` value with `FromStr`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":604830,"byte_end":604897,"line_start":188,"line_end":188,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2221},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":605113,"byte_end":605116,"line_start":198,"line_end":198,"column_start":8,"column_end":11},"name":"fmt","qualname":"<ParseWeekdayError as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10300},"children":[],"decl_id":{"krate":2,"index":10301},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2223},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":605269,"byte_end":605272,"line_start":204,"line_end":204,"column_start":8,"column_end":11},"name":"fmt","qualname":"<ParseWeekdayError as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10293},"children":[],"decl_id":{"krate":2,"index":10294},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2947},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609436,"byte_end":609443,"line_start":35,"line_end":35,"column_start":5,"column_end":12},"name":"January","qualname":"::month::Month::January","value":"Month::January","parent":{"krate":0,"index":2946},"children":[],"decl_id":null,"docs":" January\n","sig":null,"attributes":[{"value":"/ January","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609420,"byte_end":609431,"line_start":34,"line_end":34,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2950},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609470,"byte_end":609478,"line_start":37,"line_end":37,"column_start":5,"column_end":13},"name":"February","qualname":"::month::Month::February","value":"Month::February","parent":{"krate":0,"index":2946},"children":[],"decl_id":null,"docs":" February\n","sig":null,"attributes":[{"value":"/ February","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609453,"byte_end":609465,"line_start":36,"line_end":36,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2953},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609502,"byte_end":609507,"line_start":39,"line_end":39,"column_start":5,"column_end":10},"name":"March","qualname":"::month::Month::March","value":"Month::March","parent":{"krate":0,"index":2946},"children":[],"decl_id":null,"docs":" March\n","sig":null,"attributes":[{"value":"/ March","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609488,"byte_end":609497,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2956},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609531,"byte_end":609536,"line_start":41,"line_end":41,"column_start":5,"column_end":10},"name":"April","qualname":"::month::Month::April","value":"Month::April","parent":{"krate":0,"index":2946},"children":[],"decl_id":null,"docs":" April\n","sig":null,"attributes":[{"value":"/ April","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609517,"byte_end":609526,"line_start":40,"line_end":40,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2959},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609558,"byte_end":609561,"line_start":43,"line_end":43,"column_start":5,"column_end":8},"name":"May","qualname":"::month::Month::May","value":"Month::May","parent":{"krate":0,"index":2946},"children":[],"decl_id":null,"docs":" May\n","sig":null,"attributes":[{"value":"/ May","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609546,"byte_end":609553,"line_start":42,"line_end":42,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2962},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609584,"byte_end":609588,"line_start":45,"line_end":45,"column_start":5,"column_end":9},"name":"June","qualname":"::month::Month::June","value":"Month::June","parent":{"krate":0,"index":2946},"children":[],"decl_id":null,"docs":" June\n","sig":null,"attributes":[{"value":"/ June","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609571,"byte_end":609579,"line_start":44,"line_end":44,"column_start":5,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2965},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609611,"byte_end":609615,"line_start":47,"line_end":47,"column_start":5,"column_end":9},"name":"July","qualname":"::month::Month::July","value":"Month::July","parent":{"krate":0,"index":2946},"children":[],"decl_id":null,"docs":" July\n","sig":null,"attributes":[{"value":"/ July","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609598,"byte_end":609606,"line_start":46,"line_end":46,"column_start":5,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2968},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609640,"byte_end":609646,"line_start":49,"line_end":49,"column_start":5,"column_end":11},"name":"August","qualname":"::month::Month::August","value":"Month::August","parent":{"krate":0,"index":2946},"children":[],"decl_id":null,"docs":" August\n","sig":null,"attributes":[{"value":"/ August","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609625,"byte_end":609635,"line_start":48,"line_end":48,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2971},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609674,"byte_end":609683,"line_start":51,"line_end":51,"column_start":5,"column_end":14},"name":"September","qualname":"::month::Month::September","value":"Month::September","parent":{"krate":0,"index":2946},"children":[],"decl_id":null,"docs":" September\n","sig":null,"attributes":[{"value":"/ September","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609656,"byte_end":609669,"line_start":50,"line_end":50,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2974},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609709,"byte_end":609716,"line_start":53,"line_end":53,"column_start":5,"column_end":12},"name":"October","qualname":"::month::Month::October","value":"Month::October","parent":{"krate":0,"index":2946},"children":[],"decl_id":null,"docs":" October\n","sig":null,"attributes":[{"value":"/ October","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609693,"byte_end":609704,"line_start":52,"line_end":52,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2977},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609743,"byte_end":609751,"line_start":55,"line_end":55,"column_start":5,"column_end":13},"name":"November","qualname":"::month::Month::November","value":"Month::November","parent":{"krate":0,"index":2946},"children":[],"decl_id":null,"docs":" November\n","sig":null,"attributes":[{"value":"/ November","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609726,"byte_end":609738,"line_start":54,"line_end":54,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2980},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609779,"byte_end":609787,"line_start":57,"line_end":57,"column_start":5,"column_end":13},"name":"December","qualname":"::month::Month::December","value":"Month::December","parent":{"krate":0,"index":2946},"children":[],"decl_id":null,"docs":" December\n","sig":null,"attributes":[{"value":"/ December","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609762,"byte_end":609774,"line_start":56,"line_end":56,"column_start":5,"column_end":17}}]},{"kind":"Enum","id":{"krate":0,"index":2946},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609408,"byte_end":609413,"line_start":33,"line_end":33,"column_start":10,"column_end":15},"name":"Month","qualname":"::month::Month","value":"enum Month {\n    January = ,\n    February = ,\n    March = ,\n    April = ,\n    May = ,\n    June = ,\n    July = ,\n    August = ,\n    September = ,\n    October = ,\n    November = ,\n    December = ,\n}","parent":null,"children":[{"krate":0,"index":2947},{"krate":0,"index":2950},{"krate":0,"index":2953},{"krate":0,"index":2956},{"krate":0,"index":2959},{"krate":0,"index":2962},{"krate":0,"index":2965},{"krate":0,"index":2968},{"krate":0,"index":2971},{"krate":0,"index":2974},{"krate":0,"index":2977},{"krate":0,"index":2980}],"decl_id":null,"docs":" The month of the year.","sig":null,"attributes":[{"value":"/ The month of the year.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":608223,"byte_end":608249,"line_start":6,"line_end":6,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":608250,"byte_end":608253,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This enum is just a convenience implementation.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":608254,"byte_end":608305,"line_start":8,"line_end":8,"column_start":1,"column_end":52}},{"value":"/ The month in dates created by DateLike objects does not return this enum.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":608306,"byte_end":608383,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":608384,"byte_end":608387,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ It is possible to convert from a date to a month independently","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":608388,"byte_end":608454,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":608455,"byte_end":608462,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ use num_traits::FromPrimitive;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":608463,"byte_end":608497,"line_start":13,"line_end":13,"column_start":1,"column_end":35}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":608498,"byte_end":608525,"line_start":14,"line_end":14,"column_start":1,"column_end":28}},{"value":"/ let date = Utc.ymd(2019, 10, 28).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":608526,"byte_end":608582,"line_start":15,"line_end":15,"column_start":1,"column_end":57}},{"value":"/ // `2019-10-28T09:10:11Z`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":608583,"byte_end":608612,"line_start":16,"line_end":16,"column_start":1,"column_end":30}},{"value":"/ let month = Month::from_u32(date.month());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":608613,"byte_end":608659,"line_start":17,"line_end":17,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(month, Some(Month::October))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":608660,"byte_end":608703,"line_start":18,"line_end":18,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":608704,"byte_end":608711,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ Or from a Month to an integer usable by dates","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":608712,"byte_end":608761,"line_start":20,"line_end":20,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":608762,"byte_end":608769,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ # use chrono::prelude::*;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":608770,"byte_end":608799,"line_start":22,"line_end":22,"column_start":1,"column_end":30}},{"value":"/ let month = Month::January;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":608800,"byte_end":608831,"line_start":23,"line_end":23,"column_start":1,"column_end":32}},{"value":"/ let dt = Utc.ymd(2019, month.number_from_month(), 28).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":608832,"byte_end":608909,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ assert_eq!((dt.year(), dt.month(), dt.day()), (2019, 1, 28));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":608910,"byte_end":608975,"line_start":25,"line_end":25,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":608976,"byte_end":608983,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/ Allows mapping from and to month, from 1-January to 12-December.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":608984,"byte_end":609052,"line_start":27,"line_end":27,"column_start":1,"column_end":69}},{"value":"/ Can be Serialized/Deserialized with serde","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609053,"byte_end":609098,"line_start":28,"line_end":28,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2236},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":610064,"byte_end":610068,"line_start":67,"line_end":67,"column_start":12,"column_end":16},"name":"succ","qualname":"<Month>::succ","value":"fn succ<'_>(&'_ Self) -> Month","parent":null,"children":[],"decl_id":null,"docs":" The next month.","sig":null,"attributes":[{"value":"/ The next month.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609814,"byte_end":609833,"line_start":61,"line_end":61,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609838,"byte_end":609841,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ `m`:        | `January`  | `February` | `...` | `December`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609846,"byte_end":609908,"line_start":63,"line_end":63,"column_start":5,"column_end":67}},{"value":"/ ----------- | ---------  | ---------- | --- | ---------","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609913,"byte_end":609972,"line_start":64,"line_end":64,"column_start":5,"column_end":64}},{"value":"/ `m.succ()`: | `February` | `March`    | `...` | `January`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609977,"byte_end":610038,"line_start":65,"line_end":65,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":610043,"byte_end":610052,"line_start":66,"line_end":66,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2237},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":610917,"byte_end":610921,"line_start":90,"line_end":90,"column_start":12,"column_end":16},"name":"pred","qualname":"<Month>::pred","value":"fn pred<'_>(&'_ Self) -> Month","parent":null,"children":[],"decl_id":null,"docs":" The previous month.","sig":null,"attributes":[{"value":"/ The previous month.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":610662,"byte_end":610685,"line_start":84,"line_end":84,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":610690,"byte_end":610693,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ `m`:        | `January`  | `February` | `...` | `December`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":610698,"byte_end":610760,"line_start":86,"line_end":86,"column_start":5,"column_end":67}},{"value":"/ ----------- | ---------  | ---------- | --- | ---------","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":610765,"byte_end":610824,"line_start":87,"line_end":87,"column_start":5,"column_end":64}},{"value":"/ `m.pred()`: | `December` | `January`  | `...` | `November`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":610829,"byte_end":610891,"line_start":88,"line_end":88,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":610896,"byte_end":610905,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2238},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":611832,"byte_end":611849,"line_start":113,"line_end":113,"column_start":12,"column_end":29},"name":"number_from_month","qualname":"<Month>::number_from_month","value":"fn number_from_month<'_>(&'_ Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a month-of-year number starting from January = 1.","sig":null,"attributes":[{"value":"/ Returns a month-of-year number starting from January = 1.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":611515,"byte_end":611576,"line_start":107,"line_end":107,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":611581,"byte_end":611584,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ `m`:                     | `January` | `February` | `...` | `December`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":611589,"byte_end":611663,"line_start":109,"line_end":109,"column_start":5,"column_end":79}},{"value":"/ -------------------------| --------- | ---------- | --- | -----","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":611668,"byte_end":611735,"line_start":110,"line_end":110,"column_start":5,"column_end":72}},{"value":"/ `m.number_from_month()`: | 1         | 2          | `...` | 12","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":611740,"byte_end":611806,"line_start":111,"line_end":111,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":611811,"byte_end":611820,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2239},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":612459,"byte_end":612463,"line_start":137,"line_end":137,"column_start":12,"column_end":16},"name":"name","qualname":"<Month>::name","value":"fn name<'_>(&'_ Self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Get the name of the month","sig":null,"attributes":[{"value":"/ Get the name of the month","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":612298,"byte_end":612327,"line_start":130,"line_end":130,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":612332,"byte_end":612335,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":612340,"byte_end":612347,"line_start":132,"line_end":132,"column_start":5,"column_end":12}},{"value":"/ use chrono::Month;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":612352,"byte_end":612374,"line_start":133,"line_end":133,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":612379,"byte_end":612382,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Month::January.name(), \"January\")","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":612387,"byte_end":612435,"line_start":135,"line_end":135,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":612440,"byte_end":612447,"line_start":136,"line_end":136,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2241},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":613456,"byte_end":613464,"line_start":163,"line_end":163,"column_start":8,"column_end":16},"name":"from_u64","qualname":"<Month as num_traits::FromPrimitive>::from_u64","value":"fn from_u64(u64) -> Option<Month>","parent":{"krate":19,"index":337},"children":[],"decl_id":{"krate":19,"index":348},"docs":" Returns an Option<Month> from a i64, assuming a 1-index, January = 1.","sig":null,"attributes":[{"value":"/ Returns an Option<Month> from a i64, assuming a 1-index, January = 1.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":613049,"byte_end":613122,"line_start":156,"line_end":156,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":613127,"byte_end":613130,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ `Month::from_i64(n: i64)`: | `1`                  | `2`                   | ... | `12`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":613135,"byte_end":613225,"line_start":158,"line_end":158,"column_start":5,"column_end":95}},{"value":"/ ---------------------------| -------------------- | --------------------- | ... | -----","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":613230,"byte_end":613321,"line_start":159,"line_end":159,"column_start":5,"column_end":96}},{"value":"/ ``:                        | Some(Month::January) | Some(Month::February) | ... | Some(Month::December)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":613326,"byte_end":613433,"line_start":160,"line_end":160,"column_start":5,"column_end":112}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":613439,"byte_end":613448,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2242},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":613553,"byte_end":613561,"line_start":168,"line_end":168,"column_start":8,"column_end":16},"name":"from_i64","qualname":"<Month as num_traits::FromPrimitive>::from_i64","value":"fn from_i64(i64) -> Option<Month>","parent":{"krate":19,"index":337},"children":[],"decl_id":{"krate":19,"index":342},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":613536,"byte_end":613545,"line_start":167,"line_end":167,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2243},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":613650,"byte_end":613658,"line_start":173,"line_end":173,"column_start":8,"column_end":16},"name":"from_u32","qualname":"<Month as num_traits::FromPrimitive>::from_u32","value":"fn from_u32(u32) -> Option<Month>","parent":{"krate":19,"index":337},"children":[],"decl_id":{"krate":19,"index":347},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":613633,"byte_end":613642,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2997},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":614315,"byte_end":614321,"line_start":194,"line_end":194,"column_start":12,"column_end":18},"name":"Months","qualname":"::month::Months","value":"","parent":null,"children":[],"decl_id":null,"docs":" A duration in calendar months\n","sig":null,"attributes":[{"value":"/ A duration in calendar months","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":614207,"byte_end":614240,"line_start":192,"line_end":192,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2245},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":614422,"byte_end":614425,"line_start":198,"line_end":198,"column_start":12,"column_end":15},"name":"new","qualname":"<Months>::new","value":"fn new(u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Months` from a number of months\n","sig":null,"attributes":[{"value":"/ Construct a new `Months` from a number of months","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":614358,"byte_end":614410,"line_start":197,"line_end":197,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":3017},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":614584,"byte_end":614599,"line_start":205,"line_end":205,"column_start":12,"column_end":27},"name":"ParseMonthError","qualname":"::month::ParseMonthError","value":"ParseMonthError {  }","parent":null,"children":[{"krate":0,"index":3018}],"decl_id":null,"docs":" An error resulting from reading `<Month>` value with `FromStr`.\n","sig":null,"attributes":[{"value":"/ An error resulting from reading `<Month>` value with `FromStr`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":614473,"byte_end":614540,"line_start":203,"line_end":203,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2247},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":614677,"byte_end":614680,"line_start":210,"line_end":210,"column_start":8,"column_end":11},"name":"fmt","qualname":"<ParseMonthError as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10293},"children":[],"decl_id":{"krate":2,"index":10294},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2266},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":618893,"byte_end":618901,"line_start":4,"line_end":4,"column_start":11,"column_end":19},"name":"Datelike","qualname":"::traits::Datelike","value":"Datelike: Sized","parent":null,"children":[{"krate":0,"index":2267},{"krate":0,"index":2268},{"krate":0,"index":2269},{"krate":0,"index":2270},{"krate":0,"index":2271},{"krate":0,"index":2272},{"krate":0,"index":2273},{"krate":0,"index":2274},{"krate":0,"index":2275},{"krate":0,"index":2276},{"krate":0,"index":2277},{"krate":0,"index":2278},{"krate":0,"index":2279},{"krate":0,"index":2280},{"krate":0,"index":2281},{"krate":0,"index":2282},{"krate":0,"index":2283},{"krate":0,"index":2284}],"decl_id":null,"docs":" The common set of methods for date component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for date component.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":618833,"byte_end":618882,"line_start":3,"line_end":3,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2267},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":619019,"byte_end":619023,"line_start":6,"line_end":6,"column_start":8,"column_end":12},"name":"year","qualname":"::traits::Datelike::year","value":"fn year<'_>(&'_ Self) -> i32","parent":{"krate":0,"index":2266},"children":[],"decl_id":null,"docs":" Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).\n","sig":null,"attributes":[{"value":"/ Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":618915,"byte_end":619011,"line_start":5,"line_end":5,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":2268},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":619232,"byte_end":619239,"line_start":11,"line_end":11,"column_start":8,"column_end":15},"name":"year_ce","qualname":"::traits::Datelike::year_ce","value":"fn year_ce<'_>(&'_ Self) -> (bool, u32)","parent":{"krate":0,"index":2266},"children":[],"decl_id":null,"docs":" Returns the absolute year number starting from 1 with a boolean flag,\n which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).\n","sig":null,"attributes":[{"value":"/ Returns the absolute year number starting from 1 with a boolean flag,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":619044,"byte_end":619117,"line_start":8,"line_end":8,"column_start":5,"column_end":78}},{"value":"/ which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":619122,"byte_end":619210,"line_start":9,"line_end":9,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":619215,"byte_end":619224,"line_start":10,"line_end":10,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2269},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":619534,"byte_end":619539,"line_start":23,"line_end":23,"column_start":8,"column_end":13},"name":"month","qualname":"::traits::Datelike::month","value":"fn month<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":null,"docs":" Returns the month number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 1.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":619427,"byte_end":619472,"line_start":20,"line_end":20,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":619477,"byte_end":619480,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 12.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":619485,"byte_end":619526,"line_start":22,"line_end":22,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2270},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":619667,"byte_end":619673,"line_start":28,"line_end":28,"column_start":8,"column_end":14},"name":"month0","qualname":"::traits::Datelike::month0","value":"fn month0<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":null,"docs":" Returns the month number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 0.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":619560,"byte_end":619605,"line_start":25,"line_end":25,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":619610,"byte_end":619613,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 11.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":619618,"byte_end":619659,"line_start":27,"line_end":27,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2271},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":619844,"byte_end":619847,"line_start":33,"line_end":33,"column_start":8,"column_end":11},"name":"day","qualname":"::traits::Datelike::day","value":"fn day<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 1.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":619694,"byte_end":619739,"line_start":30,"line_end":30,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":619744,"byte_end":619747,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 31. (The last day of month differs by months.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":619752,"byte_end":619836,"line_start":32,"line_end":32,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":2272},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":620018,"byte_end":620022,"line_start":38,"line_end":38,"column_start":8,"column_end":12},"name":"day0","qualname":"::traits::Datelike::day0","value":"fn day0<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 0.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":619868,"byte_end":619913,"line_start":35,"line_end":35,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":619918,"byte_end":619921,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 30. (The last day of month differs by months.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":619926,"byte_end":620010,"line_start":37,"line_end":37,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":2273},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":620191,"byte_end":620198,"line_start":43,"line_end":43,"column_start":8,"column_end":15},"name":"ordinal","qualname":"::traits::Datelike::ordinal","value":"fn ordinal<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 1.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":620043,"byte_end":620087,"line_start":40,"line_end":40,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":620092,"byte_end":620095,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 366. (The last day of year differs by years.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":620100,"byte_end":620183,"line_start":42,"line_end":42,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":2274},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":620367,"byte_end":620375,"line_start":48,"line_end":48,"column_start":8,"column_end":16},"name":"ordinal0","qualname":"::traits::Datelike::ordinal0","value":"fn ordinal0<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2266},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 0.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":620219,"byte_end":620263,"line_start":45,"line_end":45,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":620268,"byte_end":620271,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 365. (The last day of year differs by years.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":620276,"byte_end":620359,"line_start":47,"line_end":47,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":2275},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":620432,"byte_end":620439,"line_start":51,"line_end":51,"column_start":8,"column_end":15},"name":"weekday","qualname":"::traits::Datelike::weekday","value":"fn weekday<'_>(&'_ Self) -> Weekday","parent":{"krate":0,"index":2266},"children":[],"decl_id":null,"docs":" Returns the day of week.\n","sig":null,"attributes":[{"value":"/ Returns the day of week.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":620396,"byte_end":620424,"line_start":50,"line_end":50,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2276},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":620497,"byte_end":620505,"line_start":54,"line_end":54,"column_start":8,"column_end":16},"name":"iso_week","qualname":"::traits::Datelike::iso_week","value":"fn iso_week<'_>(&'_ Self) -> IsoWeek","parent":{"krate":0,"index":2266},"children":[],"decl_id":null,"docs":" Returns the ISO week.\n","sig":null,"attributes":[{"value":"/ Returns the ISO week.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":620464,"byte_end":620489,"line_start":53,"line_end":53,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2277},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":620663,"byte_end":620672,"line_start":59,"line_end":59,"column_start":8,"column_end":17},"name":"with_year","qualname":"::traits::Datelike::with_year","value":"fn with_year<'_>(&'_ Self, i32) -> Option<Self>","parent":{"krate":0,"index":2266},"children":[],"decl_id":null,"docs":" Makes a new value with the year number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the year number changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":620530,"byte_end":620581,"line_start":56,"line_end":56,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":620586,"byte_end":620589,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":620594,"byte_end":620655,"line_start":58,"line_end":58,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2278},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":620865,"byte_end":620875,"line_start":64,"line_end":64,"column_start":8,"column_end":18},"name":"with_month","qualname":"::traits::Datelike::with_month","value":"fn with_month<'_>(&'_ Self, u32) -> Option<Self>","parent":{"krate":0,"index":2266},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 1) changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":620713,"byte_end":620783,"line_start":61,"line_end":61,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":620788,"byte_end":620791,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":620796,"byte_end":620857,"line_start":63,"line_end":63,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2279},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":621069,"byte_end":621080,"line_start":69,"line_end":69,"column_start":8,"column_end":19},"name":"with_month0","qualname":"::traits::Datelike::with_month0","value":"fn with_month0<'_>(&'_ Self, u32) -> Option<Self>","parent":{"krate":0,"index":2266},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 0) changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":620917,"byte_end":620987,"line_start":66,"line_end":66,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":620992,"byte_end":620995,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":621000,"byte_end":621061,"line_start":68,"line_end":68,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2280},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":621275,"byte_end":621283,"line_start":74,"line_end":74,"column_start":8,"column_end":16},"name":"with_day","qualname":"::traits::Datelike::with_day","value":"fn with_day<'_>(&'_ Self, u32) -> Option<Self>","parent":{"krate":0,"index":2266},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 1) changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":621123,"byte_end":621193,"line_start":71,"line_end":71,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":621198,"byte_end":621201,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":621206,"byte_end":621267,"line_start":73,"line_end":73,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2281},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":621475,"byte_end":621484,"line_start":79,"line_end":79,"column_start":8,"column_end":17},"name":"with_day0","qualname":"::traits::Datelike::with_day0","value":"fn with_day0<'_>(&'_ Self, u32) -> Option<Self>","parent":{"krate":0,"index":2266},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 0) changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":621323,"byte_end":621393,"line_start":76,"line_end":76,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":621398,"byte_end":621401,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":621406,"byte_end":621467,"line_start":78,"line_end":78,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2282},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":621676,"byte_end":621688,"line_start":84,"line_end":84,"column_start":8,"column_end":20},"name":"with_ordinal","qualname":"::traits::Datelike::with_ordinal","value":"fn with_ordinal<'_>(&'_ Self, u32) -> Option<Self>","parent":{"krate":0,"index":2266},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 1) changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":621525,"byte_end":621594,"line_start":81,"line_end":81,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":621599,"byte_end":621602,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":621607,"byte_end":621668,"line_start":83,"line_end":83,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2283},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":621883,"byte_end":621896,"line_start":89,"line_end":89,"column_start":8,"column_end":21},"name":"with_ordinal0","qualname":"::traits::Datelike::with_ordinal0","value":"fn with_ordinal0<'_>(&'_ Self, u32) -> Option<Self>","parent":{"krate":0,"index":2266},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 0) changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":621732,"byte_end":621801,"line_start":86,"line_end":86,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":621806,"byte_end":621809,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":621814,"byte_end":621875,"line_start":88,"line_end":88,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2284},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":622455,"byte_end":622471,"line_start":103,"line_end":103,"column_start":8,"column_end":24},"name":"num_days_from_ce","qualname":"::traits::Datelike::num_days_from_ce","value":"fn num_days_from_ce<'_>(&'_ Self) -> i32","parent":{"krate":0,"index":2266},"children":[],"decl_id":null,"docs":" Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1.","sig":null,"attributes":[{"value":"/ Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":621941,"byte_end":622035,"line_start":91,"line_end":91,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":622040,"byte_end":622043,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":622048,"byte_end":622062,"line_start":93,"line_end":93,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":622067,"byte_end":622070,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":622075,"byte_end":622082,"line_start":95,"line_end":95,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":622087,"byte_end":622125,"line_start":96,"line_end":96,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":622130,"byte_end":622133,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(1970, 1, 1).num_days_from_ce(), 719_163);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":622138,"byte_end":622214,"line_start":98,"line_end":98,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2, 1, 1).num_days_from_ce(), 366);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":622219,"byte_end":622288,"line_start":99,"line_end":99,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(NaiveDate::from_ymd(1, 1, 1).num_days_from_ce(), 1);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":622293,"byte_end":622360,"line_start":100,"line_end":100,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(NaiveDate::from_ymd(0, 1, 1).num_days_from_ce(), -365);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":622365,"byte_end":622435,"line_start":101,"line_end":101,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":622440,"byte_end":622447,"line_start":102,"line_end":102,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":2285},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":623129,"byte_end":623137,"line_start":122,"line_end":122,"column_start":11,"column_end":19},"name":"Timelike","qualname":"::traits::Timelike","value":"Timelike: Sized","parent":null,"children":[{"krate":0,"index":2286},{"krate":0,"index":2287},{"krate":0,"index":2288},{"krate":0,"index":2289},{"krate":0,"index":2290},{"krate":0,"index":2291},{"krate":0,"index":2292},{"krate":0,"index":2293},{"krate":0,"index":2294},{"krate":0,"index":2295}],"decl_id":null,"docs":" The common set of methods for time component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for time component.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":623069,"byte_end":623118,"line_start":121,"line_end":121,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2286},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":623200,"byte_end":623204,"line_start":124,"line_end":124,"column_start":8,"column_end":12},"name":"hour","qualname":"::traits::Timelike::hour","value":"fn hour<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2285},"children":[],"decl_id":null,"docs":" Returns the hour number from 0 to 23.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 0 to 23.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":623151,"byte_end":623192,"line_start":123,"line_end":123,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2287},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":623355,"byte_end":623361,"line_start":129,"line_end":129,"column_start":8,"column_end":14},"name":"hour12","qualname":"::traits::Timelike::hour12","value":"fn hour12<'_>(&'_ Self) -> (bool, u32)","parent":{"krate":0,"index":2285},"children":[],"decl_id":null,"docs":" Returns the hour number from 1 to 12 with a boolean flag,\n which is false for AM and true for PM.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 1 to 12 with a boolean flag,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":623225,"byte_end":623286,"line_start":126,"line_end":126,"column_start":5,"column_end":66}},{"value":"/ which is false for AM and true for PM.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":623291,"byte_end":623333,"line_start":127,"line_end":127,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":623338,"byte_end":623347,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2288},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":623605,"byte_end":623611,"line_start":139,"line_end":139,"column_start":8,"column_end":14},"name":"minute","qualname":"::traits::Timelike::minute","value":"fn minute<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2285},"children":[],"decl_id":null,"docs":" Returns the minute number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the minute number from 0 to 59.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":623554,"byte_end":623597,"line_start":138,"line_end":138,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2289},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":623683,"byte_end":623689,"line_start":142,"line_end":142,"column_start":8,"column_end":14},"name":"second","qualname":"::traits::Timelike::second","value":"fn second<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2285},"children":[],"decl_id":null,"docs":" Returns the second number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the second number from 0 to 59.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":623632,"byte_end":623675,"line_start":141,"line_end":141,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2290},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":623932,"byte_end":623942,"line_start":147,"line_end":147,"column_start":8,"column_end":18},"name":"nanosecond","qualname":"::traits::Timelike::nanosecond","value":"fn nanosecond<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2285},"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the whole non-leap second.\n The range from 1,000,000,000 to 1,999,999,999 represents\n the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).\n","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the whole non-leap second.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":623710,"byte_end":623780,"line_start":144,"line_end":144,"column_start":5,"column_end":75}},{"value":"/ The range from 1,000,000,000 to 1,999,999,999 represents","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":623785,"byte_end":623845,"line_start":145,"line_end":145,"column_start":5,"column_end":65}},{"value":"/ the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":623850,"byte_end":623924,"line_start":146,"line_end":146,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":2291},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":624096,"byte_end":624105,"line_start":152,"line_end":152,"column_start":8,"column_end":17},"name":"with_hour","qualname":"::traits::Timelike::with_hour","value":"fn with_hour<'_>(&'_ Self, u32) -> Option<Self>","parent":{"krate":0,"index":2285},"children":[],"decl_id":null,"docs":" Makes a new value with the hour number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the hour number changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":623963,"byte_end":624014,"line_start":149,"line_end":149,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":624019,"byte_end":624022,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":624027,"byte_end":624088,"line_start":151,"line_end":151,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2292},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":624281,"byte_end":624292,"line_start":157,"line_end":157,"column_start":8,"column_end":19},"name":"with_minute","qualname":"::traits::Timelike::with_minute","value":"fn with_minute<'_>(&'_ Self, u32) -> Option<Self>","parent":{"krate":0,"index":2285},"children":[],"decl_id":null,"docs":" Makes a new value with the minute number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the minute number changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":624146,"byte_end":624199,"line_start":154,"line_end":154,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":624204,"byte_end":624207,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":624212,"byte_end":624273,"line_start":156,"line_end":156,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2293},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":624579,"byte_end":624590,"line_start":164,"line_end":164,"column_start":8,"column_end":19},"name":"with_second","qualname":"::traits::Timelike::with_second","value":"fn with_second<'_>(&'_ Self, u32) -> Option<Self>","parent":{"krate":0,"index":2285},"children":[],"decl_id":null,"docs":" Makes a new value with the second number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the second number changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":624332,"byte_end":624385,"line_start":159,"line_end":159,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":624390,"byte_end":624393,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":624398,"byte_end":624459,"line_start":161,"line_end":161,"column_start":5,"column_end":66}},{"value":"/ As with the [`second`](#tymethod.second) method,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":624464,"byte_end":624516,"line_start":162,"line_end":162,"column_start":5,"column_end":57}},{"value":"/ the input range is restricted to 0 through 59.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":624521,"byte_end":624571,"line_start":163,"line_end":163,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2294},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":624923,"byte_end":624938,"line_start":171,"line_end":171,"column_start":8,"column_end":23},"name":"with_nanosecond","qualname":"::traits::Timelike::with_nanosecond","value":"fn with_nanosecond<'_>(&'_ Self, u32) -> Option<Self>","parent":{"krate":0,"index":2285},"children":[],"decl_id":null,"docs":" Makes a new value with nanoseconds since the whole non-leap second changed.","sig":null,"attributes":[{"value":"/ Makes a new value with nanoseconds since the whole non-leap second changed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":624630,"byte_end":624709,"line_start":166,"line_end":166,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":624714,"byte_end":624717,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":624722,"byte_end":624783,"line_start":168,"line_end":168,"column_start":5,"column_end":66}},{"value":"/ As with the [`nanosecond`](#tymethod.nanosecond) method,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":624788,"byte_end":624848,"line_start":169,"line_end":169,"column_start":5,"column_end":65}},{"value":"/ the input range can exceed 1,000,000,000 for leap seconds.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":624853,"byte_end":624915,"line_start":170,"line_end":170,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2295},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":625067,"byte_end":625092,"line_start":175,"line_end":175,"column_start":8,"column_end":33},"name":"num_seconds_from_midnight","qualname":"::traits::Timelike::num_seconds_from_midnight","value":"fn num_seconds_from_midnight<'_>(&'_ Self) -> u32","parent":{"krate":0,"index":2285},"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds past the last midnight.\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds past the last midnight.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":624979,"byte_end":625045,"line_start":173,"line_end":173,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":625050,"byte_end":625059,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":25800,"byte_end":25804,"line_start":72,"line_end":72,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":34496,"byte_end":34500,"line_start":310,"line_end":310,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":36592,"byte_end":36596,"line_start":378,"line_end":378,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":38431,"byte_end":38435,"line_start":453,"line_end":453,"column_start":29,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":38515,"byte_end":38519,"line_start":454,"line_end":454,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":38624,"byte_end":38628,"line_start":456,"line_end":456,"column_start":60,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":38748,"byte_end":38752,"line_start":462,"line_end":462,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":38795,"byte_end":38799,"line_start":464,"line_end":464,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":38951,"byte_end":38955,"line_start":470,"line_end":470,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":39090,"byte_end":39094,"line_start":476,"line_end":476,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":39233,"byte_end":39237,"line_start":482,"line_end":482,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":39467,"byte_end":39471,"line_start":491,"line_end":491,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":39684,"byte_end":39688,"line_start":498,"line_end":498,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":39918,"byte_end":39922,"line_start":507,"line_end":507,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":40132,"byte_end":40136,"line_start":514,"line_end":514,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":238},{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":40321,"byte_end":40325,"line_start":523,"line_end":523,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":40499,"byte_end":40503,"line_start":529,"line_end":529,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":47068,"byte_end":47076,"line_start":98,"line_end":98,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":57187,"byte_end":57195,"line_start":384,"line_end":384,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":397}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":57339,"byte_end":57347,"line_start":391,"line_end":391,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":57469,"byte_end":57477,"line_start":397,"line_end":397,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":57712,"byte_end":57720,"line_start":404,"line_end":404,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":58226,"byte_end":58234,"line_start":416,"line_end":416,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":405}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":58644,"byte_end":58652,"line_start":426,"line_end":426,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":59104,"byte_end":59112,"line_start":438,"line_end":438,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":59560,"byte_end":59568,"line_start":450,"line_end":450,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":60006,"byte_end":60014,"line_start":462,"line_end":462,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":60730,"byte_end":60738,"line_start":480,"line_end":480,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":419},{"krate":0,"index":421},{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":63367,"byte_end":63375,"line_start":542,"line_end":542,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":426},{"krate":0,"index":428},{"krate":0,"index":430},{"krate":0,"index":437},{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":69018,"byte_end":69026,"line_start":695,"line_end":695,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":456},{"krate":0,"index":458},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":70883,"byte_end":70891,"line_start":769,"line_end":769,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":476},{"krate":0,"index":478},{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":71931,"byte_end":71939,"line_start":809,"line_end":809,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":72019,"byte_end":72027,"line_start":810,"line_end":810,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":72136,"byte_end":72144,"line_start":812,"line_end":812,"column_start":64,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":489}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":72276,"byte_end":72284,"line_start":818,"line_end":818,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":72357,"byte_end":72365,"line_start":820,"line_end":820,"column_start":65,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":495}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":73104,"byte_end":73112,"line_start":841,"line_end":841,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":498}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":73259,"byte_end":73267,"line_start":847,"line_end":847,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":73410,"byte_end":73418,"line_start":853,"line_end":853,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":505},{"krate":0,"index":506}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":73660,"byte_end":73668,"line_start":862,"line_end":862,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":73987,"byte_end":73995,"line_start":872,"line_end":872,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":512},{"krate":0,"index":513}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74237,"byte_end":74245,"line_start":881,"line_end":881,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74564,"byte_end":74572,"line_start":891,"line_end":891,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":519},{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74761,"byte_end":74769,"line_start":900,"line_end":900,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74943,"byte_end":74951,"line_start":906,"line_end":906,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":526}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":75584,"byte_end":75592,"line_start":926,"line_end":926,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":528},{"krate":0,"index":529}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76266,"byte_end":76274,"line_start":946,"line_end":946,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76519,"byte_end":76527,"line_start":955,"line_end":955,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":77179,"byte_end":77187,"line_start":975,"line_end":975,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":538}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":77386,"byte_end":77396,"line_start":982,"line_end":982,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89181,"byte_end":89196,"line_start":157,"line_end":157,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":617}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89286,"byte_end":89301,"line_start":163,"line_end":163,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89407,"byte_end":89422,"line_start":169,"line_end":169,"column_start":13,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89447,"byte_end":89462,"line_start":171,"line_end":171,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":95444,"byte_end":95454,"line_start":339,"line_end":339,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":631}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":97002,"byte_end":97012,"line_start":385,"line_end":385,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":97794,"byte_end":97804,"line_start":401,"line_end":401,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":124050,"byte_end":124056,"line_start":128,"line_end":128,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":194098,"byte_end":194106,"line_start":478,"line_end":478,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":925},{"krate":0,"index":926}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\strftime.rs","byte_start":244853,"byte_end":244866,"line_start":213,"line_end":213,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1022},{"krate":0,"index":1023}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\strftime.rs","byte_start":246253,"byte_end":246266,"line_start":256,"line_end":256,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1029},{"krate":0,"index":1030}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":113341,"byte_end":113354,"line_start":764,"line_end":764,"column_start":62,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":1040},{"krate":0,"index":1041}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":115349,"byte_end":115362,"line_start":827,"line_end":827,"column_start":79,"column_end":92},"value":"","parent":null,"children":[{"krate":0,"index":1047}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":116643,"byte_end":116650,"line_start":873,"line_end":873,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1049},{"krate":0,"index":1050}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":118602,"byte_end":118607,"line_start":947,"line_end":947,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1052},{"krate":0,"index":1053}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":266402,"byte_end":266411,"line_start":62,"line_end":62,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1172},{"krate":0,"index":1173},{"krate":0,"index":1174}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":272150,"byte_end":272159,"line_start":207,"line_end":207,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1178},{"krate":0,"index":1179},{"krate":0,"index":1180},{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1183},{"krate":0,"index":1184},{"krate":0,"index":1185},{"krate":0,"index":1186},{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1189},{"krate":0,"index":1190},{"krate":0,"index":1191},{"krate":0,"index":1192},{"krate":0,"index":1193},{"krate":0,"index":1194},{"krate":0,"index":1195},{"krate":0,"index":1196},{"krate":0,"index":1198},{"krate":0,"index":1199},{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1207},{"krate":0,"index":1208},{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":1211},{"krate":0,"index":1212},{"krate":0,"index":1214},{"krate":0,"index":1215},{"krate":0,"index":1217},{"krate":0,"index":1218},{"krate":0,"index":1219},{"krate":0,"index":1220},{"krate":0,"index":1224},{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1230}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313445,"byte_end":313454,"line_start":1280,"line_end":1280,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1232},{"krate":0,"index":1233},{"krate":0,"index":1234},{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1240},{"krate":0,"index":1241},{"krate":0,"index":1242},{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1245},{"krate":0,"index":1246},{"krate":0,"index":1247}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":325670,"byte_end":325679,"line_start":1644,"line_end":1644,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1249},{"krate":0,"index":1250}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":325898,"byte_end":325907,"line_start":1653,"line_end":1653,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1252}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":326034,"byte_end":326043,"line_start":1660,"line_end":1660,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1254},{"krate":0,"index":1255}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":327049,"byte_end":327058,"line_start":1688,"line_end":1688,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1257},{"krate":0,"index":1258}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":329029,"byte_end":329038,"line_start":1736,"line_end":1736,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1260},{"krate":0,"index":1261}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":329257,"byte_end":329266,"line_start":1745,"line_end":1745,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1263}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330442,"byte_end":330451,"line_start":1776,"line_end":1776,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1265},{"krate":0,"index":1266}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330804,"byte_end":330825,"line_start":1791,"line_end":1791,"column_start":19,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1268},{"krate":0,"index":1269},{"krate":0,"index":1270}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331426,"byte_end":331447,"line_start":1811,"line_end":1811,"column_start":28,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331481,"byte_end":331502,"line_start":1813,"line_end":1813,"column_start":30,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1273}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331883,"byte_end":331905,"line_start":1829,"line_end":1829,"column_start":19,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1275},{"krate":0,"index":1276},{"krate":0,"index":1277}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":332432,"byte_end":332454,"line_start":1847,"line_end":1847,"column_start":28,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":332488,"byte_end":332510,"line_start":1849,"line_end":1849,"column_start":30,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1280}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":333822,"byte_end":333831,"line_start":1886,"line_end":1886,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1282}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":335087,"byte_end":335096,"line_start":1921,"line_end":1921,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1284}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":335696,"byte_end":335705,"line_start":1943,"line_end":1943,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1286},{"krate":0,"index":1287}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":336540,"byte_end":336549,"line_start":1974,"line_end":1974,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1290}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":372088,"byte_end":372101,"line_start":81,"line_end":81,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1389},{"krate":0,"index":1390},{"krate":0,"index":1391},{"krate":0,"index":1393},{"krate":0,"index":1394},{"krate":0,"index":1395},{"krate":0,"index":1396},{"krate":0,"index":1398},{"krate":0,"index":1399},{"krate":0,"index":1400},{"krate":0,"index":1401},{"krate":0,"index":1402},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405},{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1411},{"krate":0,"index":1413},{"krate":0,"index":1415},{"krate":0,"index":1416}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400071,"byte_end":400084,"line_start":753,"line_end":753,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1418},{"krate":0,"index":1419},{"krate":0,"index":1420},{"krate":0,"index":1421},{"krate":0,"index":1422},{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1427},{"krate":0,"index":1429},{"krate":0,"index":1431},{"krate":0,"index":1433},{"krate":0,"index":1435},{"krate":0,"index":1437},{"krate":0,"index":1439}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":410714,"byte_end":410727,"line_start":1064,"line_end":1064,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1448},{"krate":0,"index":1450},{"krate":0,"index":1452}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":418547,"byte_end":418560,"line_start":1276,"line_end":1276,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1455},{"krate":0,"index":1456}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":418791,"byte_end":418804,"line_start":1285,"line_end":1285,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1458}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":421125,"byte_end":421138,"line_start":1340,"line_end":1340,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1460},{"krate":0,"index":1461}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":421369,"byte_end":421382,"line_start":1349,"line_end":1349,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1463}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":423112,"byte_end":423125,"line_start":1395,"line_end":1395,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1465},{"krate":0,"index":1466}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":424323,"byte_end":424336,"line_start":1431,"line_end":1431,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1468}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":425424,"byte_end":425437,"line_start":1462,"line_end":1462,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1470}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":426167,"byte_end":426180,"line_start":1484,"line_end":1484,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1472},{"krate":0,"index":1473}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":427527,"byte_end":427540,"line_start":1526,"line_end":1526,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1476}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\internals.rs","byte_start":438190,"byte_end":438199,"line_start":113,"line_end":113,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1522},{"krate":0,"index":1523},{"krate":0,"index":1524},{"krate":0,"index":1525},{"krate":0,"index":1526}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\internals.rs","byte_start":439138,"byte_end":439147,"line_start":150,"line_end":150,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1528}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\internals.rs","byte_start":447277,"byte_end":447279,"line_start":271,"line_end":271,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":1538},{"krate":0,"index":1539},{"krate":0,"index":1540},{"krate":0,"index":1541},{"krate":0,"index":1542},{"krate":0,"index":1543},{"krate":0,"index":1544},{"krate":0,"index":1545},{"krate":0,"index":1546},{"krate":0,"index":1547},{"krate":0,"index":1548},{"krate":0,"index":1549}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\internals.rs","byte_start":449357,"byte_end":449359,"line_start":355,"line_end":355,"column_start":21,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1551}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\internals.rs","byte_start":449972,"byte_end":449975,"line_start":376,"line_end":376,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":1553},{"krate":0,"index":1554},{"krate":0,"index":1555},{"krate":0,"index":1556},{"krate":0,"index":1557},{"krate":0,"index":1558},{"krate":0,"index":1559},{"krate":0,"index":1560},{"krate":0,"index":1561},{"krate":0,"index":1562}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\internals.rs","byte_start":451954,"byte_end":451957,"line_start":460,"line_end":460,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1564}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":466287,"byte_end":466294,"line_start":52,"line_end":52,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1581},{"krate":0,"index":1582},{"krate":0,"index":1583}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":468828,"byte_end":468835,"line_start":134,"line_end":134,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1585}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478022,"byte_end":478031,"line_start":197,"line_end":197,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1652},{"krate":0,"index":1653},{"krate":0,"index":1654},{"krate":0,"index":1655},{"krate":0,"index":1657},{"krate":0,"index":1658},{"krate":0,"index":1660},{"krate":0,"index":1661},{"krate":0,"index":1662},{"krate":0,"index":1663},{"krate":0,"index":1664},{"krate":0,"index":1665},{"krate":0,"index":1666},{"krate":0,"index":1667},{"krate":0,"index":1671},{"krate":0,"index":1675},{"krate":0,"index":1677},{"krate":0,"index":1678},{"krate":0,"index":1679}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502216,"byte_end":502225,"line_start":807,"line_end":807,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1681},{"krate":0,"index":1682},{"krate":0,"index":1683},{"krate":0,"index":1684},{"krate":0,"index":1685},{"krate":0,"index":1686},{"krate":0,"index":1687},{"krate":0,"index":1688},{"krate":0,"index":1689}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":511776,"byte_end":511785,"line_start":1065,"line_end":1065,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1691},{"krate":0,"index":1692}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":511966,"byte_end":511975,"line_start":1074,"line_end":1074,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1694}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":514334,"byte_end":514343,"line_start":1126,"line_end":1126,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1696},{"krate":0,"index":1697}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":514524,"byte_end":514533,"line_start":1135,"line_end":1135,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1699}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":516906,"byte_end":516915,"line_start":1187,"line_end":1187,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1701},{"krate":0,"index":1702}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":518299,"byte_end":518308,"line_start":1224,"line_end":1224,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1704}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":520157,"byte_end":520166,"line_start":1274,"line_end":1274,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1706}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":520936,"byte_end":520945,"line_start":1299,"line_end":1299,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1708},{"krate":0,"index":1709}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":521832,"byte_end":521841,"line_start":1331,"line_end":1331,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1712}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":547060,"byte_end":547071,"line_start":31,"line_end":31,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1839},{"krate":0,"index":1840},{"krate":0,"index":1841},{"krate":0,"index":1842},{"krate":0,"index":1843},{"krate":0,"index":1844}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":549624,"byte_end":549635,"line_start":105,"line_end":105,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1846},{"krate":0,"index":1847},{"krate":0,"index":1848},{"krate":0,"index":1849},{"krate":0,"index":1850},{"krate":0,"index":1851}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":550223,"byte_end":550234,"line_start":127,"line_end":127,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1853}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":550315,"byte_end":550326,"line_start":133,"line_end":133,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1855}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":550824,"byte_end":550835,"line_start":147,"line_end":147,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1857}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":551603,"byte_end":551612,"line_start":168,"line_end":168,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1861},{"krate":0,"index":1862}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":551800,"byte_end":551809,"line_start":177,"line_end":177,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1864},{"krate":0,"index":1865}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":551998,"byte_end":552011,"line_start":186,"line_end":186,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1867},{"krate":0,"index":1868}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":552207,"byte_end":552220,"line_start":195,"line_end":195,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1870},{"krate":0,"index":1871}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":552431,"byte_end":552439,"line_start":204,"line_end":204,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1874},{"krate":0,"index":1875}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":552651,"byte_end":552659,"line_start":213,"line_end":213,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1878},{"krate":0,"index":1879}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\windows.rs","byte_start":567858,"byte_end":567866,"line_start":90,"line_end":90,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1963},{"krate":0,"index":1964}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":555062,"byte_end":555067,"line_start":57,"line_end":57,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1991},{"krate":0,"index":1992}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":556080,"byte_end":556085,"line_start":89,"line_end":89,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1994},{"krate":0,"index":1995},{"krate":0,"index":1996},{"krate":0,"index":1998},{"krate":0,"index":2000},{"krate":0,"index":2001},{"krate":0,"index":2002},{"krate":0,"index":2004},{"krate":0,"index":2005},{"krate":0,"index":2006}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":574860,"byte_end":574863,"line_start":47,"line_end":47,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":2049},{"krate":0,"index":2050}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":575889,"byte_end":575892,"line_start":78,"line_end":78,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2052},{"krate":0,"index":2053},{"krate":0,"index":2054},{"krate":0,"index":2055},{"krate":0,"index":2056},{"krate":0,"index":2057}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":576412,"byte_end":576415,"line_start":100,"line_end":100,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2059}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":576511,"byte_end":576514,"line_start":106,"line_end":106,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2061}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":576630,"byte_end":576633,"line_start":112,"line_end":112,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2063}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":527136,"byte_end":527147,"line_start":52,"line_end":52,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2069},{"krate":0,"index":2070},{"krate":0,"index":2071},{"krate":0,"index":2072}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":528328,"byte_end":528339,"line_start":87,"line_end":87,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2077},{"krate":0,"index":2078},{"krate":0,"index":2079},{"krate":0,"index":2080},{"krate":0,"index":2081}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":531549,"byte_end":531560,"line_start":180,"line_end":180,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2084}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":578558,"byte_end":578559,"line_start":47,"line_end":47,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2168},{"krate":0,"index":2169}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":581940,"byte_end":581948,"line_start":148,"line_end":148,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2178},{"krate":0,"index":2179},{"krate":0,"index":2180}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":582297,"byte_end":582310,"line_start":160,"line_end":160,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2182},{"krate":0,"index":2183},{"krate":0,"index":2184}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":586186,"byte_end":586199,"line_start":280,"line_end":280,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2190}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":586778,"byte_end":586791,"line_start":297,"line_end":297,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2192}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":599413,"byte_end":599420,"line_start":31,"line_end":31,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2208},{"krate":0,"index":2209},{"krate":0,"index":2210},{"krate":0,"index":2211},{"krate":0,"index":2212},{"krate":0,"index":2213}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":603411,"byte_end":603418,"line_start":141,"line_end":141,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2215}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":604066,"byte_end":604073,"line_start":158,"line_end":158,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2217},{"krate":0,"index":2218}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":605042,"byte_end":605059,"line_start":195,"line_end":195,"column_start":28,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":605086,"byte_end":605103,"line_start":197,"line_end":197,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2221}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":605242,"byte_end":605259,"line_start":203,"line_end":203,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2223}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609802,"byte_end":609807,"line_start":60,"line_end":60,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2236},{"krate":0,"index":2237},{"krate":0,"index":2238},{"krate":0,"index":2239}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":613037,"byte_end":613042,"line_start":155,"line_end":155,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2241},{"krate":0,"index":2242},{"krate":0,"index":2243}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":614345,"byte_end":614351,"line_start":196,"line_end":196,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2245}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":614652,"byte_end":614667,"line_start":209,"line_end":209,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2247}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21539,"byte_end":21545,"line_start":476,"line_end":476,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":558}},{"kind":"Mod","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":112420,"byte_end":112428,"line_start":741,"line_end":741,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":995}},{"kind":"Mod","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21678,"byte_end":21683,"line_start":482,"line_end":482,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1061}},{"kind":"Mod","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\lib.rs","byte_start":21786,"byte_end":21792,"line_start":486,"line_end":486,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1758}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":25800,"byte_end":25804,"line_start":72,"line_end":72,"column_start":20,"column_end":24},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":2303},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":34496,"byte_end":34500,"line_start":310,"line_end":310,"column_start":20,"column_end":24},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":2303},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":36592,"byte_end":36596,"line_start":378,"line_end":378,"column_start":33,"column_end":37},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":2303},"to":{"krate":0,"index":2266}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":38431,"byte_end":38435,"line_start":453,"line_end":453,"column_start":29,"column_end":33},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2303},"to":{"krate":2,"index":3273}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":38515,"byte_end":38519,"line_start":454,"line_end":454,"column_start":36,"column_end":40},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":2303},"to":{"krate":2,"index":3263}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":38624,"byte_end":38628,"line_start":456,"line_end":456,"column_start":60,"column_end":64},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":2303},"to":{"krate":2,"index":2915}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":38748,"byte_end":38752,"line_start":462,"line_end":462,"column_start":27,"column_end":31},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2303},"to":{"krate":2,"index":2920}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":38795,"byte_end":38799,"line_start":464,"line_end":464,"column_start":35,"column_end":39},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":2303},"to":{"krate":2,"index":2961}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":38951,"byte_end":38955,"line_start":470,"line_end":470,"column_start":28,"column_end":32},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2303},"to":{"krate":2,"index":2951}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":39090,"byte_end":39094,"line_start":476,"line_end":476,"column_start":35,"column_end":39},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":2303},"to":{"krate":2,"index":10531}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":39233,"byte_end":39237,"line_start":482,"line_end":482,"column_start":41,"column_end":45},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":2303},"to":{"krate":2,"index":3331}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":39467,"byte_end":39471,"line_start":491,"line_end":491,"column_start":47,"column_end":51},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":2303},"to":{"krate":2,"index":3362}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":39684,"byte_end":39688,"line_start":498,"line_end":498,"column_start":41,"column_end":45},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2303},"to":{"krate":2,"index":3336}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":39918,"byte_end":39922,"line_start":507,"line_end":507,"column_start":47,"column_end":51},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2303},"to":{"krate":2,"index":3366}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":40132,"byte_end":40136,"line_start":514,"line_end":514,"column_start":38,"column_end":42},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":2303},"to":{"krate":2,"index":3336}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":40321,"byte_end":40325,"line_start":523,"line_end":523,"column_start":35,"column_end":39},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":2303},"to":{"krate":2,"index":10293}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\date.rs","byte_start":40499,"byte_end":40503,"line_start":529,"line_end":529,"column_start":37,"column_end":41},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":2303},"to":{"krate":2,"index":10300}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":47068,"byte_end":47076,"line_start":98,"line_end":98,"column_start":20,"column_end":28},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":2334},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":57187,"byte_end":57195,"line_start":384,"line_end":384,"column_start":18,"column_end":26},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":3241}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":57339,"byte_end":57347,"line_start":391,"line_end":391,"column_start":18,"column_end":26},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":3241}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":57469,"byte_end":57477,"line_start":397,"line_end":397,"column_start":18,"column_end":26},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":3241}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":57712,"byte_end":57720,"line_start":404,"line_end":404,"column_start":30,"column_end":38},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":3169}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":58226,"byte_end":58234,"line_start":416,"line_end":416,"column_start":30,"column_end":38},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":3169}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":58644,"byte_end":58652,"line_start":426,"line_end":426,"column_start":38,"column_end":46},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":3169}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":59104,"byte_end":59112,"line_start":438,"line_end":438,"column_start":38,"column_end":46},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":3169}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":59560,"byte_end":59568,"line_start":450,"line_end":450,"column_start":32,"column_end":40},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":3169}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":60006,"byte_end":60014,"line_start":462,"line_end":462,"column_start":32,"column_end":40},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":3169}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":60730,"byte_end":60738,"line_start":480,"line_end":480,"column_start":6,"column_end":14},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":2334},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":63367,"byte_end":63375,"line_start":542,"line_end":542,"column_start":20,"column_end":28},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":2334},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":69018,"byte_end":69026,"line_start":695,"line_end":695,"column_start":33,"column_end":41},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":2334},"to":{"krate":0,"index":2266}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":70883,"byte_end":70891,"line_start":769,"line_end":769,"column_start":33,"column_end":41},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":2334},"to":{"krate":0,"index":2285}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":71931,"byte_end":71939,"line_start":809,"line_end":809,"column_start":29,"column_end":37},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":3273}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":72019,"byte_end":72027,"line_start":810,"line_end":810,"column_start":36,"column_end":44},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":3263}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":72136,"byte_end":72144,"line_start":812,"line_end":812,"column_start":64,"column_end":72},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":2915}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":72276,"byte_end":72284,"line_start":818,"line_end":818,"column_start":27,"column_end":35},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":2920}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":72357,"byte_end":72365,"line_start":820,"line_end":820,"column_start":65,"column_end":73},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":2961}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":73104,"byte_end":73112,"line_start":841,"line_end":841,"column_start":28,"column_end":36},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":2951}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":73259,"byte_end":73267,"line_start":847,"line_end":847,"column_start":35,"column_end":43},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":10531}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":73410,"byte_end":73418,"line_start":853,"line_end":853,"column_start":41,"column_end":49},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":3331}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":73660,"byte_end":73668,"line_start":862,"line_end":862,"column_start":47,"column_end":55},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":3362}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":73987,"byte_end":73995,"line_start":872,"line_end":872,"column_start":41,"column_end":49},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":3336}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74237,"byte_end":74245,"line_start":881,"line_end":881,"column_start":47,"column_end":55},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":3366}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74564,"byte_end":74572,"line_start":891,"line_end":891,"column_start":42,"column_end":50},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":3336}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74761,"byte_end":74769,"line_start":900,"line_end":900,"column_start":35,"column_end":43},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":10293}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":74943,"byte_end":74951,"line_start":906,"line_end":906,"column_start":37,"column_end":45},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":10300}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":75584,"byte_end":75592,"line_start":926,"line_end":926,"column_start":23,"column_end":31},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":12994}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76266,"byte_end":76274,"line_start":946,"line_end":946,"column_start":23,"column_end":31},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":12994}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":76519,"byte_end":76527,"line_start":955,"line_end":955,"column_start":27,"column_end":35},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":3169}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":77179,"byte_end":77187,"line_start":975,"line_end":975,"column_start":27,"column_end":35},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":3169}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\datetime\\mod.rs","byte_start":77386,"byte_end":77396,"line_start":982,"line_end":982,"column_start":43,"column_end":53},"kind":{"Impl":{"id":49}},"from":{"krate":1,"index":11471},"to":{"krate":2,"index":3169}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89181,"byte_end":89196,"line_start":157,"line_end":157,"column_start":16,"column_end":31},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":614},"to":{"krate":2,"index":2882}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89286,"byte_end":89301,"line_start":163,"line_end":163,"column_start":20,"column_end":35},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":614},"to":{"krate":2,"index":2915}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89407,"byte_end":89422,"line_start":169,"line_end":169,"column_start":13,"column_end":28},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":614},"to":{"krate":2,"index":2920}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":89447,"byte_end":89462,"line_start":171,"line_end":171,"column_start":21,"column_end":36},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":614},"to":{"krate":2,"index":10293}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":95444,"byte_end":95454,"line_start":339,"line_end":339,"column_start":6,"column_end":16},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":2548},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":97002,"byte_end":97012,"line_start":385,"line_end":385,"column_start":23,"column_end":33},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":2548},"to":{"krate":2,"index":10300}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":97794,"byte_end":97804,"line_start":401,"line_end":401,"column_start":16,"column_end":26},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":2548},"to":{"krate":1,"index":2576}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parsed.rs","byte_start":124050,"byte_end":124056,"line_start":128,"line_end":128,"column_start":6,"column_end":12},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":2591},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\parse.rs","byte_start":194098,"byte_end":194106,"line_start":478,"line_end":478,"column_start":23,"column_end":31},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":12994}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\strftime.rs","byte_start":244853,"byte_end":244866,"line_start":213,"line_end":213,"column_start":10,"column_end":23},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":2627},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\strftime.rs","byte_start":246253,"byte_end":246266,"line_start":256,"line_end":256,"column_start":23,"column_end":36},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":2627},"to":{"krate":2,"index":8603}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":113341,"byte_end":113354,"line_start":764,"line_end":764,"column_start":62,"column_end":75},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":2646},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":115349,"byte_end":115362,"line_start":827,"line_end":827,"column_start":79,"column_end":92},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":2646},"to":{"krate":2,"index":10300}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":116643,"byte_end":116650,"line_start":873,"line_end":873,"column_start":18,"column_end":25},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":2899},"to":{"krate":2,"index":12994}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\format\\mod.rs","byte_start":118602,"byte_end":118607,"line_start":947,"line_end":947,"column_start":18,"column_end":23},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2946},"to":{"krate":2,"index":12994}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":266402,"byte_end":266411,"line_start":62,"line_end":62,"column_start":6,"column_end":15},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2655},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":272150,"byte_end":272159,"line_start":207,"line_end":207,"column_start":6,"column_end":15},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":2660},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":313445,"byte_end":313454,"line_start":1280,"line_end":1280,"column_start":19,"column_end":28},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2660},"to":{"krate":0,"index":2266}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":325670,"byte_end":325679,"line_start":1644,"line_end":1644,"column_start":27,"column_end":36},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2660},"to":{"krate":2,"index":3331}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":325898,"byte_end":325907,"line_start":1653,"line_end":1653,"column_start":33,"column_end":42},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2660},"to":{"krate":2,"index":3362}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":326034,"byte_end":326043,"line_start":1660,"line_end":1660,"column_start":22,"column_end":31},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2660},"to":{"krate":2,"index":3331}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":327049,"byte_end":327058,"line_start":1688,"line_end":1688,"column_start":22,"column_end":31},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2660},"to":{"krate":2,"index":3336}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":329029,"byte_end":329038,"line_start":1736,"line_end":1736,"column_start":27,"column_end":36},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2660},"to":{"krate":2,"index":3336}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":329257,"byte_end":329266,"line_start":1745,"line_end":1745,"column_start":33,"column_end":42},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2660},"to":{"krate":2,"index":3366}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330442,"byte_end":330451,"line_start":1776,"line_end":1776,"column_start":25,"column_end":34},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2660},"to":{"krate":2,"index":3336}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":330804,"byte_end":330825,"line_start":1791,"line_end":1791,"column_start":19,"column_end":40},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":2679},"to":{"krate":2,"index":8603}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331426,"byte_end":331447,"line_start":1811,"line_end":1811,"column_start":28,"column_end":49},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2679},"to":{"krate":2,"index":8474}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331481,"byte_end":331502,"line_start":1813,"line_end":1813,"column_start":30,"column_end":51},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2679},"to":{"krate":2,"index":8449}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":331883,"byte_end":331905,"line_start":1829,"line_end":1829,"column_start":19,"column_end":41},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2700},"to":{"krate":2,"index":8603}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":332432,"byte_end":332454,"line_start":1847,"line_end":1847,"column_start":28,"column_end":50},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2700},"to":{"krate":2,"index":8474}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":332488,"byte_end":332510,"line_start":1849,"line_end":1849,"column_start":30,"column_end":52},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2700},"to":{"krate":2,"index":8449}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":333822,"byte_end":333831,"line_start":1886,"line_end":1886,"column_start":21,"column_end":30},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":2660},"to":{"krate":2,"index":10293}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":335087,"byte_end":335096,"line_start":1921,"line_end":1921,"column_start":23,"column_end":32},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":2660},"to":{"krate":2,"index":10300}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":335696,"byte_end":335705,"line_start":1943,"line_end":1943,"column_start":23,"column_end":32},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":2660},"to":{"krate":2,"index":12994}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\date.rs","byte_start":336540,"byte_end":336549,"line_start":1974,"line_end":1974,"column_start":18,"column_end":27},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":2660},"to":{"krate":2,"index":3241}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":372088,"byte_end":372101,"line_start":81,"line_end":81,"column_start":6,"column_end":19},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":2721},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":400071,"byte_end":400084,"line_start":753,"line_end":753,"column_start":19,"column_end":32},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2721},"to":{"krate":0,"index":2266}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":410714,"byte_end":410727,"line_start":1064,"line_end":1064,"column_start":19,"column_end":32},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":2721},"to":{"krate":0,"index":2285}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":418547,"byte_end":418560,"line_start":1276,"line_end":1276,"column_start":27,"column_end":40},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":2721},"to":{"krate":2,"index":3331}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":418791,"byte_end":418804,"line_start":1285,"line_end":1285,"column_start":33,"column_end":46},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":2721},"to":{"krate":2,"index":3362}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":421125,"byte_end":421138,"line_start":1340,"line_end":1340,"column_start":27,"column_end":40},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":2721},"to":{"krate":2,"index":3336}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":421369,"byte_end":421382,"line_start":1349,"line_end":1349,"column_start":33,"column_end":46},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":2721},"to":{"krate":2,"index":3366}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":423112,"byte_end":423125,"line_start":1395,"line_end":1395,"column_start":29,"column_end":42},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":2721},"to":{"krate":2,"index":3336}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":424323,"byte_end":424336,"line_start":1431,"line_end":1431,"column_start":21,"column_end":34},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":2721},"to":{"krate":2,"index":10293}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":425424,"byte_end":425437,"line_start":1462,"line_end":1462,"column_start":23,"column_end":36},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":2721},"to":{"krate":2,"index":10300}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":426167,"byte_end":426180,"line_start":1484,"line_end":1484,"column_start":23,"column_end":36},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":2721},"to":{"krate":2,"index":12994}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\datetime\\mod.rs","byte_start":427527,"byte_end":427540,"line_start":1526,"line_end":1526,"column_start":18,"column_end":31},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2721},"to":{"krate":2,"index":3241}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\internals.rs","byte_start":438190,"byte_end":438199,"line_start":113,"line_end":113,"column_start":6,"column_end":15},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":2741},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\internals.rs","byte_start":439138,"byte_end":439147,"line_start":150,"line_end":150,"column_start":21,"column_end":30},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2741},"to":{"krate":2,"index":10293}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\internals.rs","byte_start":447277,"byte_end":447279,"line_start":271,"line_end":271,"column_start":6,"column_end":8},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2754},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\internals.rs","byte_start":449357,"byte_end":449359,"line_start":355,"line_end":355,"column_start":21,"column_end":23},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2754},"to":{"krate":2,"index":10293}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\internals.rs","byte_start":449972,"byte_end":449975,"line_start":376,"line_end":376,"column_start":6,"column_end":9},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":2766},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\internals.rs","byte_start":451954,"byte_end":451957,"line_start":460,"line_end":460,"column_start":21,"column_end":24},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2766},"to":{"krate":2,"index":10293}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":466287,"byte_end":466294,"line_start":52,"line_end":52,"column_start":6,"column_end":13},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\isoweek.rs","byte_start":468828,"byte_end":468835,"line_start":134,"line_end":134,"column_start":21,"column_end":28},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2778},"to":{"krate":2,"index":10293}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":478022,"byte_end":478031,"line_start":197,"line_end":197,"column_start":6,"column_end":15},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2794},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":502216,"byte_end":502225,"line_start":807,"line_end":807,"column_start":19,"column_end":28},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2794},"to":{"krate":0,"index":2285}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":511776,"byte_end":511785,"line_start":1065,"line_end":1065,"column_start":27,"column_end":36},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2794},"to":{"krate":2,"index":3331}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":511966,"byte_end":511975,"line_start":1074,"line_end":1074,"column_start":33,"column_end":42},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2794},"to":{"krate":2,"index":3362}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":514334,"byte_end":514343,"line_start":1126,"line_end":1126,"column_start":27,"column_end":36},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2794},"to":{"krate":2,"index":3336}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":514524,"byte_end":514533,"line_start":1135,"line_end":1135,"column_start":33,"column_end":42},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":2794},"to":{"krate":2,"index":3366}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":516906,"byte_end":516915,"line_start":1187,"line_end":1187,"column_start":25,"column_end":34},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":2794},"to":{"krate":2,"index":3336}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":518299,"byte_end":518308,"line_start":1224,"line_end":1224,"column_start":21,"column_end":30},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2794},"to":{"krate":2,"index":10293}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":520157,"byte_end":520166,"line_start":1274,"line_end":1274,"column_start":23,"column_end":32},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2794},"to":{"krate":2,"index":10300}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":520936,"byte_end":520945,"line_start":1299,"line_end":1299,"column_start":23,"column_end":32},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":2794},"to":{"krate":2,"index":12994}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\naive\\time\\mod.rs","byte_start":521832,"byte_end":521841,"line_start":1331,"line_end":1331,"column_start":18,"column_end":27},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2794},"to":{"krate":2,"index":3241}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":547060,"byte_end":547071,"line_start":31,"line_end":31,"column_start":6,"column_end":17},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2814},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":549624,"byte_end":549635,"line_start":105,"line_end":105,"column_start":19,"column_end":30},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":2814},"to":{"krate":0,"index":2087}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":550223,"byte_end":550234,"line_start":127,"line_end":127,"column_start":17,"column_end":28},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":2814},"to":{"krate":0,"index":2085}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":550315,"byte_end":550326,"line_start":133,"line_end":133,"column_start":21,"column_end":32},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2814},"to":{"krate":2,"index":10293}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":550824,"byte_end":550835,"line_start":147,"line_end":147,"column_start":23,"column_end":34},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2814},"to":{"krate":2,"index":10300}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":551603,"byte_end":551612,"line_start":168,"line_end":168,"column_start":27,"column_end":36},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2794},"to":{"krate":2,"index":3331}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":551800,"byte_end":551809,"line_start":177,"line_end":177,"column_start":27,"column_end":36},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2794},"to":{"krate":2,"index":3336}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":551998,"byte_end":552011,"line_start":186,"line_end":186,"column_start":27,"column_end":40},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2721},"to":{"krate":2,"index":3331}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":552207,"byte_end":552220,"line_start":195,"line_end":195,"column_start":27,"column_end":40},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2721},"to":{"krate":2,"index":3336}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":552431,"byte_end":552439,"line_start":204,"line_end":204,"column_start":41,"column_end":49},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":3331}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\fixed.rs","byte_start":552651,"byte_end":552659,"line_start":213,"line_end":213,"column_start":41,"column_end":49},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2334},"to":{"krate":2,"index":3336}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\windows.rs","byte_start":567858,"byte_end":567866,"line_start":90,"line_end":90,"column_start":6,"column_end":14},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1959},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":555062,"byte_end":555067,"line_start":57,"line_end":57,"column_start":6,"column_end":11},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2829},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\local\\mod.rs","byte_start":556080,"byte_end":556085,"line_start":89,"line_end":89,"column_start":19,"column_end":24},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2829},"to":{"krate":0,"index":2087}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":574860,"byte_end":574863,"line_start":47,"line_end":47,"column_start":6,"column_end":9},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":2836},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":575889,"byte_end":575892,"line_start":78,"line_end":78,"column_start":19,"column_end":22},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":2836},"to":{"krate":0,"index":2087}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":576412,"byte_end":576415,"line_start":100,"line_end":100,"column_start":17,"column_end":20},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2836},"to":{"krate":0,"index":2085}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":576511,"byte_end":576514,"line_start":106,"line_end":106,"column_start":21,"column_end":24},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":2836},"to":{"krate":2,"index":10293}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\utc.rs","byte_start":576630,"byte_end":576633,"line_start":112,"line_end":112,"column_start":23,"column_end":26},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":2836},"to":{"krate":2,"index":10300}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":527136,"byte_end":527147,"line_start":52,"line_end":52,"column_start":9,"column_end":20},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":2847},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":528328,"byte_end":528339,"line_start":87,"line_end":87,"column_start":20,"column_end":31},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":2847},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":531549,"byte_end":531560,"line_start":180,"line_end":180,"column_start":21,"column_end":32},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":2847},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":532022,"byte_end":532027,"line_start":194,"line_end":194,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":3268},"to":{"krate":0,"index":2085}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":532030,"byte_end":532035,"line_start":194,"line_end":194,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":2882},"to":{"krate":0,"index":2085}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":532043,"byte_end":532048,"line_start":194,"line_end":194,"column_start":40,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":10293},"to":{"krate":0,"index":2085}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":532338,"byte_end":532343,"line_start":203,"line_end":203,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":3268},"to":{"krate":0,"index":2087}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\offset\\mod.rs","byte_start":532346,"byte_end":532351,"line_start":203,"line_end":203,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":2882},"to":{"krate":0,"index":2087}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":578558,"byte_end":578559,"line_start":47,"line_end":47,"column_start":25,"column_end":26},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":2167},"to":{"krate":0,"index":2163}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":580256,"byte_end":580261,"line_start":101,"line_end":101,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":3268},"to":{"krate":0,"index":2171}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":581940,"byte_end":581948,"line_start":148,"line_end":148,"column_start":38,"column_end":46},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":2334},"to":{"krate":0,"index":2171}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":582297,"byte_end":582310,"line_start":160,"line_end":160,"column_start":24,"column_end":37},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":2721},"to":{"krate":0,"index":2171}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":586186,"byte_end":586199,"line_start":280,"line_end":280,"column_start":23,"column_end":36},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":2881},"to":{"krate":2,"index":10300}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\round.rs","byte_start":586778,"byte_end":586791,"line_start":297,"line_end":297,"column_start":28,"column_end":41},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":2881},"to":{"krate":1,"index":2576}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":599413,"byte_end":599420,"line_start":31,"line_end":31,"column_start":6,"column_end":13},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":2899},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":603411,"byte_end":603418,"line_start":141,"line_end":141,"column_start":23,"column_end":30},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":2899},"to":{"krate":2,"index":10300}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":604066,"byte_end":604073,"line_start":158,"line_end":158,"column_start":36,"column_end":43},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":2899},"to":{"krate":19,"index":337}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":605042,"byte_end":605059,"line_start":195,"line_end":195,"column_start":28,"column_end":45},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":2935},"to":{"krate":1,"index":2576}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":605086,"byte_end":605103,"line_start":197,"line_end":197,"column_start":23,"column_end":40},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":2935},"to":{"krate":2,"index":10300}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\weekday.rs","byte_start":605242,"byte_end":605259,"line_start":203,"line_end":203,"column_start":21,"column_end":38},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":2935},"to":{"krate":2,"index":10293}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":609802,"byte_end":609807,"line_start":60,"line_end":60,"column_start":6,"column_end":11},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":2946},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":613037,"byte_end":613042,"line_start":155,"line_end":155,"column_start":36,"column_end":41},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":2946},"to":{"krate":19,"index":337}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":614345,"byte_end":614351,"line_start":196,"line_end":196,"column_start":6,"column_end":12},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":2997},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\month.rs","byte_start":614652,"byte_end":614667,"line_start":209,"line_end":209,"column_start":21,"column_end":36},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":3017},"to":{"krate":2,"index":10293}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":618903,"byte_end":618908,"line_start":4,"line_end":4,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":3268},"to":{"krate":0,"index":2266}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.22\\src\\traits.rs","byte_start":623139,"byte_end":623144,"line_start":122,"line_end":122,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":3268},"to":{"krate":0,"index":2285}}]}