{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4","program":"C:\\Users\\cax68\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","hdrhistogram","--edition=2018","C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"base64\"","--cfg","feature=\"crossbeam-channel\"","--cfg","feature=\"default\"","--cfg","feature=\"flate2\"","--cfg","feature=\"nom\"","--cfg","feature=\"serialization\"","--cfg","feature=\"sync\"","-C","metadata=a3a09603cf8dfe31","-C","extra-filename=-a3a09603cf8dfe31","--out-dir","c:\\Users\\cax68\\Documents\\VSCODE\\Rust\\trip-analyzer\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\cax68\\Documents\\VSCODE\\Rust\\trip-analyzer\\target\\rls\\debug\\deps","--extern","base64=c:\\Users\\cax68\\Documents\\VSCODE\\Rust\\trip-analyzer\\target\\rls\\debug\\deps\\libbase64-924250d05a2c09ba.rmeta","--extern","byteorder=c:\\Users\\cax68\\Documents\\VSCODE\\Rust\\trip-analyzer\\target\\rls\\debug\\deps\\libbyteorder-b7045114de3b9d65.rmeta","--extern","crossbeam_channel=c:\\Users\\cax68\\Documents\\VSCODE\\Rust\\trip-analyzer\\target\\rls\\debug\\deps\\libcrossbeam_channel-89aacd51fd666429.rmeta","--extern","flate2=c:\\Users\\cax68\\Documents\\VSCODE\\Rust\\trip-analyzer\\target\\rls\\debug\\deps\\libflate2-a33fc0e4e55bf5bb.rmeta","--extern","nom=c:\\Users\\cax68\\Documents\\VSCODE\\Rust\\trip-analyzer\\target\\rls\\debug\\deps\\libnom-a87b9550c3ce4945.rmeta","--extern","num_traits=c:\\Users\\cax68\\Documents\\VSCODE\\Rust\\trip-analyzer\\target\\rls\\debug\\deps\\libnum_traits-4ce3f2c607f84dfe.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\cax68\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\cax68\\Documents\\VSCODE\\Rust\\trip-analyzer\\target\\rls\\debug\\deps\\libhdrhistogram-a3a09603cf8dfe31.rmeta"},"prelude":{"crate_id":{"name":"hdrhistogram","disambiguator":[9043275981342072655,0]},"crate_root":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src","external_crates":[{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","num":1,"id":{"name":"std","disambiguator":[8220901491324417181,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","num":2,"id":{"name":"core","disambiguator":[17646335034858718245,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7543338740222325194,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4121655161238992384,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7221895495783829703,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[289704317308896518,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5672898907341438381,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4632090926257578515,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[1168759375612508108,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2527076414705739063,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[5451358767642273343,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[14077134330987967860,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[16523041212766607157,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[2148051765216828524,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[3381654416152841193,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","num":16,"id":{"name":"nom","disambiguator":[13349423433180148406,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","num":17,"id":{"name":"memchr","disambiguator":[3265594215985763849,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","num":18,"id":{"name":"num_traits","disambiguator":[12210629368417338578,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","num":19,"id":{"name":"byteorder","disambiguator":[10977197271980540618,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","num":20,"id":{"name":"flate2","disambiguator":[5493468984806111034,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","num":21,"id":{"name":"crc32fast","disambiguator":[15773177372225415407,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","num":22,"id":{"name":"cfg_if","disambiguator":[13731109126996355829,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","num":23,"id":{"name":"miniz_oxide","disambiguator":[12547478911856171876,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","num":24,"id":{"name":"adler","disambiguator":[12663821558820174128,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","num":25,"id":{"name":"base64","disambiguator":[11407220381426223871,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","num":26,"id":{"name":"crossbeam_channel","disambiguator":[6769418906071773089,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","num":27,"id":{"name":"crossbeam_utils","disambiguator":[10462910991319840674,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","num":28,"id":{"name":"cfg_if","disambiguator":[10672092798662160479,0]}},{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","num":29,"id":{"name":"lazy_static","disambiguator":[9105116696482691259,0]}}],"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":0,"byte_end":81261,"line_start":1,"line_end":1857,"column_start":1,"column_end":29}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":997},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":121678,"byte_end":121694,"line_start":192,"line_end":192,"column_start":31,"column_end":47},"alias_span":null,"name":"V2SerializeError","value":"","parent":{"krate":0,"index":388}},{"kind":"Use","ref_id":{"krate":0,"index":440},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":121696,"byte_end":121708,"line_start":192,"line_end":192,"column_start":49,"column_end":61},"alias_span":null,"name":"V2Serializer","value":"","parent":{"krate":0,"index":388}},{"kind":"Use","ref_id":{"krate":0,"index":1017},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":121777,"byte_end":121800,"line_start":195,"line_end":195,"column_start":39,"column_end":62},"alias_span":null,"name":"V2DeflateSerializeError","value":"","parent":{"krate":0,"index":388}},{"kind":"Use","ref_id":{"krate":0,"index":517},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":121802,"byte_end":121821,"line_start":195,"line_end":195,"column_start":64,"column_end":83},"alias_span":null,"name":"V2DeflateSerializer","value":"","parent":{"krate":0,"index":388}},{"kind":"Use","ref_id":{"krate":0,"index":1036},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":121872,"byte_end":121888,"line_start":198,"line_end":198,"column_start":30,"column_end":46},"alias_span":null,"name":"DeserializeError","value":"","parent":{"krate":0,"index":388}},{"kind":"Use","ref_id":{"krate":0,"index":589},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":121890,"byte_end":121902,"line_start":198,"line_end":198,"column_start":48,"column_end":60},"alias_span":null,"name":"Deserializer","value":"","parent":{"krate":0,"index":388}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":81147,"byte_end":81148,"line_start":1852,"line_end":1852,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"Counter","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":81166,"byte_end":81167,"line_start":1853,"line_end":1853,"column_start":17,"column_end":18},"alias_span":null,"name":"*","value":"RecordError, SubtractionError, AdditionError, CreationError, UsizeTypeTooSmall","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1803},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":81247,"byte_end":81260,"line_start":1857,"line_end":1857,"column_start":15,"column_end":28},"alias_span":null,"name":"SyncHistogram","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":0,"byte_end":81261,"line_start":1,"line_end":1857,"column_start":1,"column_end":29},"name":"","qualname":"::","value":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":888},{"krate":0,"index":906},{"krate":0,"index":25},{"krate":0,"index":230},{"krate":0,"index":319},{"krate":0,"index":325},{"krate":0,"index":330},{"krate":0,"index":333},{"krate":0,"index":337},{"krate":0,"index":340},{"krate":0,"index":343},{"krate":0,"index":347},{"krate":0,"index":351},{"krate":0,"index":354},{"krate":0,"index":357},{"krate":0,"index":362},{"krate":0,"index":385},{"krate":0,"index":388},{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":885}],"decl_id":null,"docs":" HdrSample is a port of Gil Tene's HdrHistogram to native Rust. It provides recording and\n analyzing of sampled data value counts across a large, configurable value range with\n configurable precision within the range. The resulting \"HDR\" histogram allows for fast and\n accurate analysis of the extreme ranges of data with non-normal distributions, like latency.","sig":null,"attributes":[{"value":"/ HdrSample is a port of Gil Tene's HdrHistogram to native Rust. It provides recording and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":0,"byte_end":92,"line_start":1,"line_end":1,"column_start":1,"column_end":93}},{"value":"/ analyzing of sampled data value counts across a large, configurable value range with","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":93,"byte_end":181,"line_start":2,"line_end":2,"column_start":1,"column_end":89}},{"value":"/ configurable precision within the range. The resulting \"HDR\" histogram allows for fast and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":182,"byte_end":276,"line_start":3,"line_end":3,"column_start":1,"column_end":95}},{"value":"/ accurate analysis of the extreme ranges of data with non-normal distributions, like latency.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":277,"byte_end":373,"line_start":4,"line_end":4,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":374,"byte_end":377,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ # HdrHistogram","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":378,"byte_end":396,"line_start":6,"line_end":6,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":397,"byte_end":400,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ What follows is a description from [the HdrHistogram","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":401,"byte_end":457,"line_start":8,"line_end":8,"column_start":1,"column_end":57}},{"value":"/ website](https://hdrhistogram.github.io/HdrHistogram/). Users are encouraged to read the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":458,"byte_end":550,"line_start":9,"line_end":9,"column_start":1,"column_end":93}},{"value":"/ documentation from the original [Java","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":551,"byte_end":592,"line_start":10,"line_end":10,"column_start":1,"column_end":42}},{"value":"/ implementation](https://github.com/HdrHistogram/HdrHistogram), as most of the concepts","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":593,"byte_end":683,"line_start":11,"line_end":11,"column_start":1,"column_end":91}},{"value":"/ translate directly to the Rust port.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":684,"byte_end":724,"line_start":12,"line_end":12,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":725,"byte_end":728,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ HdrHistogram supports the recording and analyzing of sampled data value counts across a","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":729,"byte_end":820,"line_start":14,"line_end":14,"column_start":1,"column_end":92}},{"value":"/ configurable integer value range with configurable value precision within the range. Value","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":821,"byte_end":915,"line_start":15,"line_end":15,"column_start":1,"column_end":95}},{"value":"/ precision is expressed as the number of significant digits in the value recording, and provides","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":916,"byte_end":1015,"line_start":16,"line_end":16,"column_start":1,"column_end":100}},{"value":"/ control over value quantization behavior across the value range and the subsequent value","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":1016,"byte_end":1108,"line_start":17,"line_end":17,"column_start":1,"column_end":93}},{"value":"/ resolution at any given level.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":1109,"byte_end":1143,"line_start":18,"line_end":18,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":1144,"byte_end":1147,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ For example, a Histogram could be configured to track the counts of observed integer values","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":1148,"byte_end":1243,"line_start":20,"line_end":20,"column_start":1,"column_end":96}},{"value":"/ between 0 and 3,600,000,000 while maintaining a value precision of 3 significant digits across","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":1244,"byte_end":1342,"line_start":21,"line_end":21,"column_start":1,"column_end":99}},{"value":"/ that range. Value quantization within the range will thus be no larger than 1/1,000th (or 0.1%)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":1343,"byte_end":1442,"line_start":22,"line_end":22,"column_start":1,"column_end":100}},{"value":"/ of any value. This example Histogram could be used to track and analyze the counts of observed","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":1443,"byte_end":1541,"line_start":23,"line_end":23,"column_start":1,"column_end":99}},{"value":"/ response times ranging between 1 microsecond and 1 hour in magnitude, while maintaining a value","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":1542,"byte_end":1641,"line_start":24,"line_end":24,"column_start":1,"column_end":100}},{"value":"/ resolution of 1 microsecond up to 1 millisecond, a resolution of 1 millisecond (or better) up","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":1642,"byte_end":1739,"line_start":25,"line_end":25,"column_start":1,"column_end":98}},{"value":"/ to one second, and a resolution of 1 second (or better) up to 1,000 seconds. At it's maximum","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":1740,"byte_end":1836,"line_start":26,"line_end":26,"column_start":1,"column_end":97}},{"value":"/ tracked value (1 hour), it would still maintain a resolution of 3.6 seconds (or better).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":1837,"byte_end":1929,"line_start":27,"line_end":27,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":1930,"byte_end":1933,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ HDR Histogram is designed for recording histograms of value measurements in latency and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":1934,"byte_end":2025,"line_start":29,"line_end":29,"column_start":1,"column_end":92}},{"value":"/ performance sensitive applications. Measurements show value recording times as low as 3-6","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":2026,"byte_end":2119,"line_start":30,"line_end":30,"column_start":1,"column_end":94}},{"value":"/ nanoseconds on modern (circa 2014) Intel CPUs. The HDR Histogram maintains a fixed cost in both","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":2120,"byte_end":2219,"line_start":31,"line_end":31,"column_start":1,"column_end":100}},{"value":"/ space and time. A Histogram's memory footprint is constant, with no allocation operations","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":2220,"byte_end":2313,"line_start":32,"line_end":32,"column_start":1,"column_end":94}},{"value":"/ involved in recording data values or in iterating through them. The memory footprint is fixed","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":2314,"byte_end":2411,"line_start":33,"line_end":33,"column_start":1,"column_end":98}},{"value":"/ regardless of the number of data value samples recorded, and depends solely on the dynamic","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":2412,"byte_end":2506,"line_start":34,"line_end":34,"column_start":1,"column_end":95}},{"value":"/ range and precision chosen. The amount of work involved in recording a sample is constant, and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":2507,"byte_end":2605,"line_start":35,"line_end":35,"column_start":1,"column_end":99}},{"value":"/ directly computes storage index locations such that no iteration or searching is ever involved","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":2606,"byte_end":2704,"line_start":36,"line_end":36,"column_start":1,"column_end":99}},{"value":"/ in recording data values.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":2705,"byte_end":2734,"line_start":37,"line_end":37,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":2735,"byte_end":2738,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ If you are looking for FFI bindings to","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":2739,"byte_end":2781,"line_start":39,"line_end":39,"column_start":1,"column_end":43}},{"value":"/ [`HdrHistogram_c`](https://github.com/HdrHistogram/HdrHistogram_c), you want the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":2782,"byte_end":2866,"line_start":40,"line_end":40,"column_start":1,"column_end":85}},{"value":"/ [`hdrhistogram_c`](https://crates.io/crates/hdrhistogram_c) crate instead.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":2867,"byte_end":2945,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":2946,"byte_end":2949,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ # Interacting with the library","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":2950,"byte_end":2984,"line_start":43,"line_end":43,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":2985,"byte_end":2988,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ HdrSample's API follows that of the original HdrHistogram Java implementation, with some","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":2989,"byte_end":3081,"line_start":45,"line_end":45,"column_start":1,"column_end":93}},{"value":"/ modifications to make its use more idiomatic in Rust. The description in this section has been","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":3082,"byte_end":3180,"line_start":46,"line_end":46,"column_start":1,"column_end":99}},{"value":"/ adapted from that given by the [Python port](https://github.com/HdrHistogram/HdrHistogram_py),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":3181,"byte_end":3279,"line_start":47,"line_end":47,"column_start":1,"column_end":99}},{"value":"/ as it gives a nicer first-time introduction to the use of HdrHistogram than the Java docs do.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":3280,"byte_end":3377,"line_start":48,"line_end":48,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":3378,"byte_end":3381,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ HdrSample is generally used in one of two modes: recording samples, or querying for analytics.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":3382,"byte_end":3480,"line_start":50,"line_end":50,"column_start":1,"column_end":99}},{"value":"/ In distributed deployments, the recording may be performed remotely (and possibly in multiple","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":3481,"byte_end":3578,"line_start":51,"line_end":51,"column_start":1,"column_end":98}},{"value":"/ locations), to then be aggregated later in a central location for analysis.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":3579,"byte_end":3658,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":3659,"byte_end":3662,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ## Recording samples","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":3663,"byte_end":3687,"line_start":54,"line_end":54,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":3688,"byte_end":3691,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ A histogram instance is created using the `::new` methods on the `Histogram` struct. These come","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":3692,"byte_end":3791,"line_start":56,"line_end":56,"column_start":1,"column_end":100}},{"value":"/ in three variants: `new`, `new_with_max`, and `new_with_bounds`. The first of these only sets","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":3792,"byte_end":3889,"line_start":57,"line_end":57,"column_start":1,"column_end":98}},{"value":"/ the required precision of the sampled data, but leaves the value range open such that any value","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":3890,"byte_end":3989,"line_start":58,"line_end":58,"column_start":1,"column_end":100}},{"value":"/ may be recorded. A `Histogram` created this way (or one where auto-resize has been explicitly","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":3990,"byte_end":4087,"line_start":59,"line_end":59,"column_start":1,"column_end":98}},{"value":"/ enabled) will automatically resize itself if a value that is too large to fit in the current","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":4088,"byte_end":4184,"line_start":60,"line_end":60,"column_start":1,"column_end":97}},{"value":"/ dataset is encountered. `new_with_max` sets an upper bound on the values to be recorded, and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":4185,"byte_end":4281,"line_start":61,"line_end":61,"column_start":1,"column_end":97}},{"value":"/ disables auto-resizing, thus preventing any re-allocation during recording. If the application","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":4282,"byte_end":4380,"line_start":62,"line_end":62,"column_start":1,"column_end":99}},{"value":"/ attempts to record a larger value than this maximum bound, the `record` call will return an","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":4381,"byte_end":4476,"line_start":63,"line_end":63,"column_start":1,"column_end":96}},{"value":"/ error. Finally, `new_with_bounds` restricts the lowest representable value of the dataset,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":4477,"byte_end":4571,"line_start":64,"line_end":64,"column_start":1,"column_end":95}},{"value":"/ such that a smaller range needs to be covered (thus reducing the overall allocation size).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":4572,"byte_end":4666,"line_start":65,"line_end":65,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":4667,"byte_end":4670,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ For example the example below shows how to create a `Histogram` that can count values in the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":4671,"byte_end":4767,"line_start":67,"line_end":67,"column_start":1,"column_end":97}},{"value":"/ `[1..3600000]` range with 1% precision, which could be used to track latencies in the range `[1","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":4768,"byte_end":4867,"line_start":68,"line_end":68,"column_start":1,"column_end":100}},{"value":"/ msec..1 hour]`).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":4868,"byte_end":4888,"line_start":69,"line_end":69,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":4889,"byte_end":4892,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":4893,"byte_end":4900,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"/ use hdrhistogram::Histogram;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":4901,"byte_end":4933,"line_start":72,"line_end":72,"column_start":1,"column_end":33}},{"value":"/ let mut hist = Histogram::<u64>::new_with_bounds(1, 60 * 60 * 1000, 2).unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":4934,"byte_end":5018,"line_start":73,"line_end":73,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":5019,"byte_end":5022,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ // samples can be recorded using .record, which will error if the value is too small or large","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":5023,"byte_end":5120,"line_start":75,"line_end":75,"column_start":1,"column_end":98}},{"value":"/ hist.record(54321).expect(\"value 54321 should be in range\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":5121,"byte_end":5185,"line_start":76,"line_end":76,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":5186,"byte_end":5189,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ // for ergonomics, samples can also be recorded with +=","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":5190,"byte_end":5249,"line_start":78,"line_end":78,"column_start":1,"column_end":60}},{"value":"/ // this call will panic if the value is out of range!","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":5250,"byte_end":5307,"line_start":79,"line_end":79,"column_start":1,"column_end":58}},{"value":"/ hist += 54321;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":5308,"byte_end":5326,"line_start":80,"line_end":80,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":5327,"byte_end":5330,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // if the code that generates the values is subject to Coordinated Omission,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":5331,"byte_end":5411,"line_start":82,"line_end":82,"column_start":1,"column_end":81}},{"value":"/ // the self-correcting record method should be used instead.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":5412,"byte_end":5476,"line_start":83,"line_end":83,"column_start":1,"column_end":65}},{"value":"/ // for example, if the expected sampling interval is 10 msec:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":5477,"byte_end":5542,"line_start":84,"line_end":84,"column_start":1,"column_end":66}},{"value":"/ hist.record_correct(54321, 10).expect(\"value 54321 should be in range\");","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":5543,"byte_end":5619,"line_start":85,"line_end":85,"column_start":1,"column_end":77}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":5620,"byte_end":5627,"line_start":86,"line_end":86,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":5628,"byte_end":5631,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ Note the `u64` type. This type can be changed to reduce the storage overhead for all the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":5632,"byte_end":5724,"line_start":88,"line_end":88,"column_start":1,"column_end":93}},{"value":"/ histogram bins, at the cost of a risk of saturating if a large number of samples end up in the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":5725,"byte_end":5823,"line_start":89,"line_end":89,"column_start":1,"column_end":99}},{"value":"/ same bin.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":5824,"byte_end":5837,"line_start":90,"line_end":90,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":5838,"byte_end":5841,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ ## Querying samples","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":5842,"byte_end":5865,"line_start":92,"line_end":92,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":5866,"byte_end":5869,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ At any time, the histogram can be queried to return interesting statistical measurements, such","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":5870,"byte_end":5968,"line_start":94,"line_end":94,"column_start":1,"column_end":99}},{"value":"/ as the total number of recorded samples, or the value at a given quantile:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":5969,"byte_end":6047,"line_start":95,"line_end":95,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6048,"byte_end":6051,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6052,"byte_end":6059,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/ use hdrhistogram::Histogram;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6060,"byte_end":6092,"line_start":98,"line_end":98,"column_start":1,"column_end":33}},{"value":"/ let hist = Histogram::<u64>::new(2).unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6093,"byte_end":6142,"line_start":99,"line_end":99,"column_start":1,"column_end":50}},{"value":"/ // ...","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6143,"byte_end":6153,"line_start":100,"line_end":100,"column_start":1,"column_end":11}},{"value":"/ println!(\"# of samples: {}\", hist.len());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6154,"byte_end":6199,"line_start":101,"line_end":101,"column_start":1,"column_end":46}},{"value":"/ println!(\"99.9'th percentile: {}\", hist.value_at_quantile(0.999));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6200,"byte_end":6270,"line_start":102,"line_end":102,"column_start":1,"column_end":71}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6271,"byte_end":6278,"line_start":103,"line_end":103,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6279,"byte_end":6282,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ Several useful iterators are also provided for quickly getting an overview of the dataset. The","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6283,"byte_end":6381,"line_start":105,"line_end":105,"column_start":1,"column_end":99}},{"value":"/ simplest one is `iter_recorded()`, which yields one item for every non-empty sample bin. All","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6382,"byte_end":6478,"line_start":106,"line_end":106,"column_start":1,"column_end":97}},{"value":"/ the HdrHistogram iterators are supported in HdrSample, so look for the `*Iterator` classes in","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6479,"byte_end":6576,"line_start":107,"line_end":107,"column_start":1,"column_end":98}},{"value":"/ the [Java documentation](https://hdrhistogram.github.io/HdrHistogram/JavaDoc/).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6577,"byte_end":6660,"line_start":108,"line_end":108,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6661,"byte_end":6664,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6665,"byte_end":6672,"line_start":110,"line_end":110,"column_start":1,"column_end":8}},{"value":"/ use hdrhistogram::Histogram;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6673,"byte_end":6705,"line_start":111,"line_end":111,"column_start":1,"column_end":33}},{"value":"/ let hist = Histogram::<u64>::new(2).unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6706,"byte_end":6755,"line_start":112,"line_end":112,"column_start":1,"column_end":50}},{"value":"/ // ...","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6756,"byte_end":6766,"line_start":113,"line_end":113,"column_start":1,"column_end":11}},{"value":"/ for v in hist.iter_recorded() {","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6767,"byte_end":6802,"line_start":114,"line_end":114,"column_start":1,"column_end":36}},{"value":"/     println!(\"{}'th percentile of data is {} with {} samples\",","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6803,"byte_end":6869,"line_start":115,"line_end":115,"column_start":1,"column_end":67}},{"value":"/         v.percentile(), v.value_iterated_to(), v.count_at_value());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6870,"byte_end":6941,"line_start":116,"line_end":116,"column_start":1,"column_end":72}},{"value":"/ }","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6942,"byte_end":6947,"line_start":117,"line_end":117,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6948,"byte_end":6955,"line_start":118,"line_end":118,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6956,"byte_end":6959,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ ## Panics and error handling","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6960,"byte_end":6992,"line_start":120,"line_end":120,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6993,"byte_end":6996,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ As long as you're using safe, non-panicking functions (see below), this library should never","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":6997,"byte_end":7093,"line_start":122,"line_end":122,"column_start":1,"column_end":97}},{"value":"/ panic. Any panics you encounter are a bug; please file them in the issue tracker.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":7094,"byte_end":7179,"line_start":123,"line_end":123,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":7180,"byte_end":7183,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ A few functions have their functionality exposed via `AddAssign` and `SubAssign`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":7184,"byte_end":7268,"line_start":125,"line_end":125,"column_start":1,"column_end":85}},{"value":"/ implementations. These alternate forms are equivalent to simply calling `unwrap()` on the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":7269,"byte_end":7362,"line_start":126,"line_end":126,"column_start":1,"column_end":94}},{"value":"/ normal functions, so the normal rules of `unwrap()` apply: view with suspicion when used in","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":7363,"byte_end":7458,"line_start":127,"line_end":127,"column_start":1,"column_end":96}},{"value":"/ production code, etc.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":7459,"byte_end":7484,"line_start":128,"line_end":128,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":7485,"byte_end":7488,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ | Returns Result                 | Panics on error    | Functionality                   |","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":7489,"byte_end":7582,"line_start":130,"line_end":130,"column_start":1,"column_end":94}},{"value":"/ | ------------------------------ | ------------------ | ------------------------------- |","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":7583,"byte_end":7676,"line_start":131,"line_end":131,"column_start":1,"column_end":94}},{"value":"/ | `h.record(v)`                  | `h += v`           | Increment count for value `v`   |","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":7677,"byte_end":7770,"line_start":132,"line_end":132,"column_start":1,"column_end":94}},{"value":"/ | `h.add(h2)`                    | `h += h2`          | Add `h2`'s counts to `h`        |","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":7771,"byte_end":7864,"line_start":133,"line_end":133,"column_start":1,"column_end":94}},{"value":"/ | `h.subtract(h2)`               | `h -= h2`          | Subtract `h2`'s counts from `h` |","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":7865,"byte_end":7958,"line_start":134,"line_end":134,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":7959,"byte_end":7962,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ Other than the panicking forms of the above functions, everything will return `Result` or","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":7963,"byte_end":8056,"line_start":136,"line_end":136,"column_start":1,"column_end":94}},{"value":"/ `Option` if it can fail.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":8057,"byte_end":8085,"line_start":137,"line_end":137,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":8086,"byte_end":8089,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ ## `usize` limitations","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":8090,"byte_end":8116,"line_start":139,"line_end":139,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":8117,"byte_end":8120,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ Depending on the configured number of significant digits and maximum value, a histogram's","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":8121,"byte_end":8214,"line_start":141,"line_end":141,"column_start":1,"column_end":94}},{"value":"/ internal storage may have hundreds of thousands of cells. Systems with a 16-bit `usize` cannot","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":8215,"byte_end":8313,"line_start":142,"line_end":142,"column_start":1,"column_end":99}},{"value":"/ represent pointer offsets that large, so relevant operations (creation, deserialization, etc)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":8314,"byte_end":8411,"line_start":143,"line_end":143,"column_start":1,"column_end":98}},{"value":"/ will fail with a suitable error (e.g. `CreationError::UsizeTypeTooSmall`). If you are using such","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":8412,"byte_end":8512,"line_start":144,"line_end":144,"column_start":1,"column_end":101}},{"value":"/ a system and hitting these errors, reducing the number of significant digits will greatly reduce","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":8513,"byte_end":8613,"line_start":145,"line_end":145,"column_start":1,"column_end":101}},{"value":"/ memory consumption (and therefore the need for large `usize` values). Lowering the max value may","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":8614,"byte_end":8714,"line_start":146,"line_end":146,"column_start":1,"column_end":101}},{"value":"/ also help as long as resizing is disabled.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":8715,"byte_end":8761,"line_start":147,"line_end":147,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":8762,"byte_end":8765,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ 32- and above systems will not have any such issues, as all possible histograms fit within a","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":8766,"byte_end":8862,"line_start":149,"line_end":149,"column_start":1,"column_end":97}},{"value":"/ 32-bit index.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":8863,"byte_end":8880,"line_start":150,"line_end":150,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":8881,"byte_end":8884,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ ## Floating point accuracy","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":8885,"byte_end":8915,"line_start":152,"line_end":152,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":8916,"byte_end":8919,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ Some calculations inherently involve floating point values, like `value_at_quantile`, and are","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":8920,"byte_end":9017,"line_start":154,"line_end":154,"column_start":1,"column_end":98}},{"value":"/ therefore subject to the precision limits of IEEE754 floating point calculations. The user-","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":9018,"byte_end":9113,"line_start":155,"line_end":155,"column_start":1,"column_end":96}},{"value":"/ visible consequence of this is that in certain corner cases, you might end up with a bucket (and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":9114,"byte_end":9214,"line_start":156,"line_end":156,"column_start":1,"column_end":101}},{"value":"/ therefore value) that is higher or lower than it would be if the calculation had been done","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":9215,"byte_end":9309,"line_start":157,"line_end":157,"column_start":1,"column_end":95}},{"value":"/ with arbitrary-precision arithmetic. However, double-precision IEEE754 (i.e. `f64`) is very","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":9310,"byte_end":9405,"line_start":158,"line_end":158,"column_start":1,"column_end":96}},{"value":"/ good at its job, so these cases should be rare. Also, we haven't seen a case that was off by","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":9406,"byte_end":9502,"line_start":159,"line_end":159,"column_start":1,"column_end":97}},{"value":"/ more than one bucket.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":9503,"byte_end":9528,"line_start":160,"line_end":160,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":9529,"byte_end":9532,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ To minimize FP precision losses, we favor working with quantiles rather than percentiles. A","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":9533,"byte_end":9628,"line_start":162,"line_end":162,"column_start":1,"column_end":96}},{"value":"/ quantile represents a portion of a set with a number in `[0, 1]`. A percentile is the same","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":9629,"byte_end":9723,"line_start":163,"line_end":163,"column_start":1,"column_end":95}},{"value":"/ concept, except it uses the range `[0, 100]`. Working just with quantiles means we can skip an","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":9724,"byte_end":9822,"line_start":164,"line_end":164,"column_start":1,"column_end":99}},{"value":"/ FP operation in a few places, and therefore avoid opportunities for precision loss to creep in.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":9823,"byte_end":9922,"line_start":165,"line_end":165,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":9923,"byte_end":9926,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ # Limitations and Caveats","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":9927,"byte_end":9956,"line_start":167,"line_end":167,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":9957,"byte_end":9960,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ As with all the other HdrHistogram ports, the latest features and bug fixes from the upstream","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":9961,"byte_end":10058,"line_start":169,"line_end":169,"column_start":1,"column_end":98}},{"value":"/ HdrHistogram implementations may not be available in this port. A number of features have also","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":10059,"byte_end":10157,"line_start":170,"line_end":170,"column_start":1,"column_end":99}},{"value":"/ not (yet) been implemented:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":10158,"byte_end":10189,"line_start":171,"line_end":171,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":10190,"byte_end":10193,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/  - Concurrency support (`AtomicHistogram`, `ConcurrentHistogram`, …).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":10194,"byte_end":10269,"line_start":173,"line_end":173,"column_start":1,"column_end":74}},{"value":"/  - `DoubleHistogram`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":10270,"byte_end":10295,"line_start":174,"line_end":174,"column_start":1,"column_end":26}},{"value":"/  - The `Recorder` feature of HdrHistogram.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":10296,"byte_end":10342,"line_start":175,"line_end":175,"column_start":1,"column_end":47}},{"value":"/  - Value shifting (\"normalization\").","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":10343,"byte_end":10383,"line_start":176,"line_end":176,"column_start":1,"column_end":41}},{"value":"/  - Textual output methods. These seem almost orthogonal to HdrSample, though it might be","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":10384,"byte_end":10476,"line_start":177,"line_end":177,"column_start":1,"column_end":93}},{"value":"/    convenient if we implemented some relevant traits (CSV, JSON, and possibly simple","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":10477,"byte_end":10565,"line_start":178,"line_end":178,"column_start":1,"column_end":89}},{"value":"/    `fmt::Display`).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":10566,"byte_end":10589,"line_start":179,"line_end":179,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":10590,"byte_end":10593,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ Most of these should be fairly straightforward to add, as the code aligns pretty well with the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":10594,"byte_end":10692,"line_start":181,"line_end":181,"column_start":1,"column_end":99}},{"value":"/ original Java/C# code. If you do decide to implement one and send a PR, please make sure you","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":10693,"byte_end":10789,"line_start":182,"line_end":182,"column_start":1,"column_end":97}},{"value":"/ also port the [test","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":10790,"byte_end":10813,"line_start":183,"line_end":183,"column_start":1,"column_end":24}},{"value":"/ cases](https://github.com/HdrHistogram/HdrHistogram/tree/master/src/test/java/org/HdrHistogram),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":10814,"byte_end":10914,"line_start":184,"line_end":184,"column_start":1,"column_end":101}},{"value":"/ and try to make sure you implement appropriate traits to make the use of the feature as","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":10915,"byte_end":11006,"line_start":185,"line_end":185,"column_start":1,"column_end":92}},{"value":"/ ergonomic as possible.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":11007,"byte_end":11033,"line_start":186,"line_end":186,"column_start":1,"column_end":27}},{"value":"deny(missing_docs, trivial_casts, trivial_numeric_casts,\nunused_extern_crates, unused_import_braces, unused_results,\nvariant_size_differences)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":11035,"byte_end":11211,"line_start":188,"line_end":196,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":888},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":13968,"byte_end":13977,"line_start":252,"line_end":252,"column_start":12,"column_end":21},"name":"Histogram","qualname":"::Histogram","value":"Histogram {  }","parent":null,"children":[{"krate":0,"index":890},{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":896},{"krate":0,"index":897},{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":904},{"krate":0,"index":905}],"decl_id":null,"docs":" `Histogram` is the core data structure in HdrSample. It records values, and performs analytics.","sig":null,"attributes":[{"value":"/ `Histogram` is the core data structure in HdrSample. It records values, and performs analytics.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":11853,"byte_end":11952,"line_start":218,"line_end":218,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":11953,"byte_end":11956,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ At its heart, it keeps the count for recorded samples in \"buckets\" of values. The resolution","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":11957,"byte_end":12053,"line_start":220,"line_end":220,"column_start":1,"column_end":97}},{"value":"/ and distribution of these buckets is tuned based on the desired highest trackable value, as","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":12054,"byte_end":12149,"line_start":221,"line_end":221,"column_start":1,"column_end":96}},{"value":"/ well as the user-specified number of significant decimal digits to preserve. The values for the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":12150,"byte_end":12249,"line_start":222,"line_end":222,"column_start":1,"column_end":100}},{"value":"/ buckets are kept in a way that resembles floats and doubles: there is a mantissa and an","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":12250,"byte_end":12341,"line_start":223,"line_end":223,"column_start":1,"column_end":92}},{"value":"/ exponent, and each bucket represents a different exponent. The \"sub-buckets\" within a bucket","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":12342,"byte_end":12438,"line_start":224,"line_end":224,"column_start":1,"column_end":97}},{"value":"/ represent different values for the mantissa.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":12439,"byte_end":12487,"line_start":225,"line_end":225,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":12488,"byte_end":12491,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ To a first approximation, the sub-buckets of the first","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":12492,"byte_end":12550,"line_start":227,"line_end":227,"column_start":1,"column_end":59}},{"value":"/ bucket would hold the values `0`, `1`, `2`, `3`, …, the sub-buckets of the second bucket would","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":12551,"byte_end":12651,"line_start":228,"line_end":228,"column_start":1,"column_end":99}},{"value":"/ hold `0`, `2`, `4`, `6`, …, the third would hold `0`, `4`, `8`, and so on. However, the low","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":12652,"byte_end":12749,"line_start":229,"line_end":229,"column_start":1,"column_end":96}},{"value":"/ half of each bucket (except bucket 0) is unnecessary, since those values are already covered by","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":12750,"byte_end":12849,"line_start":230,"line_end":230,"column_start":1,"column_end":100}},{"value":"/ the sub-buckets of all the preceeding buckets. Thus, `Histogram` keeps the top half of every","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":12850,"byte_end":12946,"line_start":231,"line_end":231,"column_start":1,"column_end":97}},{"value":"/ such bucket.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":12947,"byte_end":12963,"line_start":232,"line_end":232,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":12964,"byte_end":12967,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ For the purposes of explanation, consider a `Histogram` with 2048 sub-buckets for every bucket,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":12968,"byte_end":13067,"line_start":234,"line_end":234,"column_start":1,"column_end":100}},{"value":"/ and a lowest discernible value of 1:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":13068,"byte_end":13108,"line_start":235,"line_end":235,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":13109,"byte_end":13112,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ <pre>","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":13113,"byte_end":13122,"line_start":237,"line_end":237,"column_start":1,"column_end":10}},{"value":"/ The 0th bucket covers 0...2047 in multiples of 1, using all 2048 sub-buckets","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":13123,"byte_end":13203,"line_start":238,"line_end":238,"column_start":1,"column_end":81}},{"value":"/ The 1st bucket covers 2048..4097 in multiples of 2, using only the top 1024 sub-buckets","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":13204,"byte_end":13295,"line_start":239,"line_end":239,"column_start":1,"column_end":92}},{"value":"/ The 2nd bucket covers 4096..8191 in multiple of 4, using only the top 1024 sub-buckets","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":13296,"byte_end":13386,"line_start":240,"line_end":240,"column_start":1,"column_end":91}},{"value":"/ ...","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":13387,"byte_end":13394,"line_start":241,"line_end":241,"column_start":1,"column_end":8}},{"value":"/ </pre>","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":13395,"byte_end":13405,"line_start":242,"line_end":242,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":13406,"byte_end":13409,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ Bucket 0 is \"special\" here. It is the only one that has 2048 entries. All the rest have","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":13410,"byte_end":13501,"line_start":244,"line_end":244,"column_start":1,"column_end":92}},{"value":"/ 1024 entries (because their bottom half overlaps with and is already covered by the all of","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":13502,"byte_end":13596,"line_start":245,"line_end":245,"column_start":1,"column_end":95}},{"value":"/ the previous buckets put together). In other words, the `k`'th bucket could represent `0 *","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":13597,"byte_end":13691,"line_start":246,"line_end":246,"column_start":1,"column_end":95}},{"value":"/ 2^k` to `2048 * 2^k` in 2048 buckets with `2^k` precision, but the midpoint of `1024 * 2^k","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":13692,"byte_end":13786,"line_start":247,"line_end":247,"column_start":1,"column_end":95}},{"value":"/ = 2048 * 2^(k-1)`, which is the k-1'th bucket's end. So, we would use the previous bucket","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":13787,"byte_end":13880,"line_start":248,"line_end":248,"column_start":1,"column_end":94}},{"value":"/ for those lower values as it has better precision.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":13881,"byte_end":13935,"line_start":249,"line_end":249,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":13936,"byte_end":13939,"line_start":250,"line_end":250,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"iterators","qualname":"::iterators","value":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":65},{"krate":0,"index":98},{"krate":0,"index":132},{"krate":0,"index":159},{"krate":0,"index":186},{"krate":0,"index":189},{"krate":0,"index":191},{"krate":0,"index":195},{"krate":0,"index":909},{"krate":0,"index":916},{"krate":0,"index":919},{"krate":0,"index":921},{"krate":0,"index":209},{"krate":0,"index":218},{"krate":0,"index":223}],"decl_id":null,"docs":" Module containing the implementations of all `Histogram` iterators.\n","sig":null,"attributes":[{"value":"/ Module containing the implementations of all `Histogram` iterators.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":15042,"byte_end":15113,"line_start":290,"line_end":290,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\quantile.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"quantile","qualname":"::iterators::quantile","value":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\quantile.rs","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":56},{"krate":0,"index":60}],"decl_id":null,"docs":" An iterator that iterates over histogram quantiles.\n","sig":null,"attributes":[{"value":"/ An iterator that iterates over histogram quantiles.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":81321,"byte_end":81376,"line_start":4,"line_end":4,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\quantile.rs","byte_start":91387,"byte_end":91391,"line_start":6,"line_end":6,"column_start":12,"column_end":16},"name":"Iter","qualname":"::iterators::quantile::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55}],"decl_id":null,"docs":" An iterator that will yield at quantile steps through the histogram's value range.\n","sig":null,"attributes":[{"value":"/ An iterator that will yield at quantile steps through the histogram's value range.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\quantile.rs","byte_start":91289,"byte_end":91375,"line_start":5,"line_end":5,"column_start":1,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\quantile.rs","byte_start":91666,"byte_end":91669,"line_start":15,"line_end":15,"column_start":12,"column_end":15},"name":"new","qualname":"<Iter>::new","value":"fn new(&'a Histogram<T>, u32) -> HistogramIterator","parent":null,"children":[],"decl_id":null,"docs":" Construct a new iterator. See `Histogram::iter_quantiles` for details.\n","sig":null,"attributes":[{"value":"/ Construct a new iterator. See `Histogram::iter_quantiles` for details.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\quantile.rs","byte_start":91580,"byte_end":91654,"line_start":14,"line_end":14,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\quantile.rs","byte_start":92257,"byte_end":92261,"line_start":38,"line_end":38,"column_start":8,"column_end":12},"name":"pick","qualname":"<Iter as iterators::PickyIterator>::pick","value":"fn pick<'_>(&'_ mut Self, usize, u64, T) -> Option<PickMetadata>","parent":{"krate":0,"index":191},"children":[],"decl_id":{"krate":0,"index":193},"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: float_cmp)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\quantile.rs","byte_start":92222,"byte_end":92249,"line_start":37,"line_end":37,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\quantile.rs","byte_start":99740,"byte_end":99744,"line_start":160,"line_end":160,"column_start":8,"column_end":12},"name":"more","qualname":"<Iter as iterators::PickyIterator>::more","value":"fn more<'_>(&'_ mut Self, usize) -> bool","parent":{"krate":0,"index":191},"children":[],"decl_id":{"krate":0,"index":194},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\linear.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"linear","qualname":"::iterators::linear","value":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\linear.rs","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":89},{"krate":0,"index":93}],"decl_id":null,"docs":" An iterator that iterates linearly over histogram values.\n","sig":null,"attributes":[{"value":"/ An iterator that iterates linearly over histogram values.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":81396,"byte_end":81457,"line_start":7,"line_end":7,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\linear.rs","byte_start":100521,"byte_end":100525,"line_start":6,"line_end":6,"column_start":12,"column_end":16},"name":"Iter","qualname":"::iterators::linear::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88}],"decl_id":null,"docs":" An iterator that will yield at fixed-size steps through the histogram's value range.\n","sig":null,"attributes":[{"value":"/ An iterator that will yield at fixed-size steps through the histogram's value range.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\linear.rs","byte_start":100421,"byte_end":100509,"line_start":5,"line_end":5,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\linear.rs","byte_start":100864,"byte_end":100867,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<Iter>::new","value":"fn new(&'a Histogram<T>, u64) -> HistogramIterator","parent":null,"children":[],"decl_id":null,"docs":" Construct a new linear iterator. See `Histogram::iter_linear` for details.\n","sig":null,"attributes":[{"value":"/ Construct a new linear iterator. See `Histogram::iter_linear` for details.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\linear.rs","byte_start":100774,"byte_end":100852,"line_start":16,"line_end":16,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\linear.rs","byte_start":101644,"byte_end":101648,"line_start":41,"line_end":41,"column_start":8,"column_end":12},"name":"pick","qualname":"<Iter as iterators::PickyIterator>::pick","value":"fn pick<'_>(&'_ mut Self, usize, u64, T) -> Option<PickMetadata>","parent":{"krate":0,"index":191},"children":[],"decl_id":{"krate":0,"index":193},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\linear.rs","byte_start":102343,"byte_end":102347,"line_start":57,"line_end":57,"column_start":8,"column_end":12},"name":"more","qualname":"<Iter as iterators::PickyIterator>::more","value":"fn more<'_>(&'_ mut Self, usize) -> bool","parent":{"krate":0,"index":191},"children":[],"decl_id":{"krate":0,"index":194},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\log.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"log","qualname":"::iterators::log","value":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\log.rs","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":123},{"krate":0,"index":127}],"decl_id":null,"docs":" An iterator that iterates logarithmically over histogram values.\n","sig":null,"attributes":[{"value":"/ An iterator that iterates logarithmically over histogram values.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":81475,"byte_end":81543,"line_start":10,"line_end":10,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\log.rs","byte_start":103386,"byte_end":103390,"line_start":6,"line_end":6,"column_start":12,"column_end":16},"name":"Iter","qualname":"::iterators::log::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122}],"decl_id":null,"docs":" An iterator that will yield at log-size steps through the histogram's value range.\n","sig":null,"attributes":[{"value":"/ An iterator that will yield at log-size steps through the histogram's value range.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\log.rs","byte_start":103288,"byte_end":103374,"line_start":5,"line_end":5,"column_start":1,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\log.rs","byte_start":103770,"byte_end":103773,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"new","qualname":"<Iter>::new","value":"fn new(&'a Histogram<T>, u64, f64) -> HistogramIterator","parent":null,"children":[],"decl_id":null,"docs":" Construct a new logarithmic iterator. See `Histogram::iter_log` for details.\n","sig":null,"attributes":[{"value":"/ Construct a new logarithmic iterator. See `Histogram::iter_log` for details.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\log.rs","byte_start":103678,"byte_end":103758,"line_start":19,"line_end":19,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\log.rs","byte_start":104648,"byte_end":104652,"line_start":46,"line_end":46,"column_start":8,"column_end":12},"name":"pick","qualname":"<Iter as iterators::PickyIterator>::pick","value":"fn pick<'_>(&'_ mut Self, usize, u64, T) -> Option<PickMetadata>","parent":{"krate":0,"index":191},"children":[],"decl_id":{"krate":0,"index":193},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\log.rs","byte_start":105575,"byte_end":105579,"line_start":66,"line_end":66,"column_start":8,"column_end":12},"name":"more","qualname":"<Iter as iterators::PickyIterator>::more","value":"fn more<'_>(&'_ mut Self, usize) -> bool","parent":{"krate":0,"index":191},"children":[],"decl_id":{"krate":0,"index":194},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\recorded.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"recorded","qualname":"::iterators::recorded","value":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\recorded.rs","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":140},{"krate":0,"index":143},{"krate":0,"index":146},{"krate":0,"index":149},{"krate":0,"index":151},{"krate":0,"index":154}],"decl_id":null,"docs":" An iterator that iterates over recorded histogram values.\n","sig":null,"attributes":[{"value":"/ An iterator that iterates over recorded histogram values.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":81558,"byte_end":81619,"line_start":13,"line_end":13,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\recorded.rs","byte_start":106347,"byte_end":106351,"line_start":6,"line_end":6,"column_start":12,"column_end":16},"name":"Iter","qualname":"::iterators::recorded::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":150}],"decl_id":null,"docs":" An iterator that will yield only bins with at least one sample.\n","sig":null,"attributes":[{"value":"/ An iterator that will yield only bins with at least one sample.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\recorded.rs","byte_start":106268,"byte_end":106335,"line_start":5,"line_end":5,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\recorded.rs","byte_start":106494,"byte_end":106497,"line_start":12,"line_end":12,"column_start":12,"column_end":15},"name":"new","qualname":"<Iter>::new","value":"fn new<T, '_>(&'_ Histogram<T>) -> HistogramIterator where T: Counter","parent":null,"children":[],"decl_id":null,"docs":" Construct a new sampled iterator. See `Histogram::iter_recorded` for details.\n","sig":null,"attributes":[{"value":"/ Construct a new sampled iterator. See `Histogram::iter_recorded` for details.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\recorded.rs","byte_start":106401,"byte_end":106482,"line_start":11,"line_end":11,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\recorded.rs","byte_start":106685,"byte_end":106689,"line_start":18,"line_end":18,"column_start":8,"column_end":12},"name":"pick","qualname":"<Iter as iterators::PickyIterator>::pick","value":"fn pick<'_>(&'_ mut Self, usize, u64, T) -> Option<PickMetadata>","parent":{"krate":0,"index":191},"children":[],"decl_id":{"krate":0,"index":193},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\recorded.rs","byte_start":106994,"byte_end":106998,"line_start":26,"line_end":26,"column_start":8,"column_end":12},"name":"more","qualname":"<Iter as iterators::PickyIterator>::more","value":"fn more<'_>(&'_ mut Self, usize) -> bool","parent":{"krate":0,"index":191},"children":[],"decl_id":{"krate":0,"index":194},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":159},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\all.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"all","qualname":"::iterators::all","value":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\all.rs","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":167},{"krate":0,"index":170},{"krate":0,"index":173},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":181}],"decl_id":null,"docs":" An iterator that iterates over histogram values.\n","sig":null,"attributes":[{"value":"/ An iterator that iterates over histogram values.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":81639,"byte_end":81691,"line_start":16,"line_end":16,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\all.rs","byte_start":107237,"byte_end":107241,"line_start":6,"line_end":6,"column_start":12,"column_end":16},"name":"Iter","qualname":"::iterators::all::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":177}],"decl_id":null,"docs":" An iterator that will yield every bin.\n","sig":null,"attributes":[{"value":"/ An iterator that will yield every bin.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\all.rs","byte_start":107183,"byte_end":107225,"line_start":5,"line_end":5,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\all.rs","byte_start":107376,"byte_end":107379,"line_start":12,"line_end":12,"column_start":12,"column_end":15},"name":"new","qualname":"<Iter>::new","value":"fn new<T, '_>(&'_ Histogram<T>) -> HistogramIterator where T: Counter","parent":null,"children":[],"decl_id":null,"docs":" Construct a new full iterator. See `Histogram::iter_all` for details.\n","sig":null,"attributes":[{"value":"/ Construct a new full iterator. See `Histogram::iter_all` for details.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\all.rs","byte_start":107291,"byte_end":107364,"line_start":11,"line_end":11,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\all.rs","byte_start":107567,"byte_end":107571,"line_start":18,"line_end":18,"column_start":8,"column_end":12},"name":"pick","qualname":"<Iter as iterators::PickyIterator>::pick","value":"fn pick<'_>(&'_ mut Self, usize, u64, T) -> Option<PickMetadata>","parent":{"krate":0,"index":191},"children":[],"decl_id":{"krate":0,"index":193},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\all.rs","byte_start":107891,"byte_end":107895,"line_start":28,"line_end":28,"column_start":8,"column_end":12},"name":"more","qualname":"<Iter as iterators::PickyIterator>::more","value":"fn more<'_>(&'_ mut Self, usize) -> bool","parent":{"krate":0,"index":191},"children":[],"decl_id":{"krate":0,"index":194},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":81803,"byte_end":81815,"line_start":20,"line_end":20,"column_start":12,"column_end":24},"name":"PickMetadata","qualname":"::iterators::PickMetadata","value":"PickMetadata {  }","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":188}],"decl_id":null,"docs":" Extra information about the picked point in the histogram provided by the picker.\n","sig":null,"attributes":[{"value":"/ Extra information about the picked point in the histogram provided by the picker.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":81706,"byte_end":81791,"line_start":19,"line_end":19,"column_start":1,"column_end":86}}]},{"kind":"Trait","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":82586,"byte_end":82599,"line_start":41,"line_end":41,"column_start":11,"column_end":24},"name":"PickyIterator","qualname":"::iterators::PickyIterator","value":"PickyIterator<T>","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194}],"decl_id":null,"docs":" A trait for designing an subset iterator over values in a `Histogram`.\n","sig":null,"attributes":[{"value":"/ A trait for designing an subset iterator over values in a `Histogram`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":82501,"byte_end":82575,"line_start":40,"line_end":40,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":82961,"byte_end":82965,"line_start":48,"line_end":48,"column_start":8,"column_end":12},"name":"pick","qualname":"::iterators::PickyIterator::pick","value":"fn pick<'_>(&'_ mut Self, usize, u64, T) -> Option<PickMetadata>","parent":{"krate":0,"index":191},"children":[],"decl_id":null,"docs":" Return `Some` if an `IterationValue` should be emitted at this point.","sig":null,"attributes":[{"value":"/ Return `Some` if an `IterationValue` should be emitted at this point.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":82618,"byte_end":82691,"line_start":42,"line_end":42,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":82696,"byte_end":82699,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ `index` is a valid index in the relevant histogram.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":82704,"byte_end":82759,"line_start":44,"line_end":44,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":82764,"byte_end":82767,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This will be called with the same index until it returns `None`. This enables modes of","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":82772,"byte_end":82862,"line_start":46,"line_end":46,"column_start":5,"column_end":95}},{"value":"/ iteration that pick different values represented by the same bucket, for instance.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":82867,"byte_end":82953,"line_start":47,"line_end":47,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":83457,"byte_end":83461,"line_start":61,"line_end":61,"column_start":8,"column_end":12},"name":"more","qualname":"::iterators::PickyIterator::more","value":"fn more<'_>(&'_ mut Self, usize) -> bool","parent":{"krate":0,"index":191},"children":[],"decl_id":null,"docs":" Should we keep iterating even though the last index with non-zero count has already been\n picked at least once?","sig":null,"attributes":[{"value":"/ Should we keep iterating even though the last index with non-zero count has already been","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":83106,"byte_end":83198,"line_start":55,"line_end":55,"column_start":5,"column_end":97}},{"value":"/ picked at least once?","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":83203,"byte_end":83228,"line_start":56,"line_end":56,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":83233,"byte_end":83236,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ This will be called on every iteration once the last index with non-zero count has been","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":83241,"byte_end":83332,"line_start":58,"line_end":58,"column_start":5,"column_end":96}},{"value":"/ picked, even if the index was not advanced in the last iteration (because `pick()` returned","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":83337,"byte_end":83432,"line_start":59,"line_end":59,"column_start":5,"column_end":100}},{"value":"/ `Some`).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":83437,"byte_end":83449,"line_start":60,"line_end":60,"column_start":5,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":195},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":83987,"byte_end":84004,"line_start":71,"line_end":71,"column_start":12,"column_end":29},"name":"HistogramIterator","qualname":"::iterators::HistogramIterator","value":"HistogramIterator {  }","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208}],"decl_id":null,"docs":" `HistogramIterator` provides a base iterator for a `Histogram`.","sig":null,"attributes":[{"value":"/ `HistogramIterator` provides a base iterator for a `Histogram`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":83507,"byte_end":83574,"line_start":64,"line_end":64,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":83575,"byte_end":83578,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ It will iterate over all discrete values until there are no more recorded values (i.e., *not*","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":83579,"byte_end":83676,"line_start":66,"line_end":66,"column_start":1,"column_end":98}},{"value":"/ necessarily until all bins have been exhausted). To facilitate the development of more","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":83677,"byte_end":83767,"line_start":67,"line_end":67,"column_start":1,"column_end":91}},{"value":"/ sophisticated iterators, a *picker* is also provided, which is allowed to only select some bins","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":83768,"byte_end":83867,"line_start":68,"line_end":68,"column_start":1,"column_end":100}},{"value":"/ that should be yielded. The picker may also extend the iteration to include a suffix of empty","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":83868,"byte_end":83965,"line_start":69,"line_end":69,"column_start":1,"column_end":98}},{"value":"/ bins.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":83966,"byte_end":83975,"line_start":70,"line_end":70,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":909},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":84413,"byte_end":84427,"line_start":86,"line_end":86,"column_start":12,"column_end":26},"name":"IterationValue","qualname":"::iterators::IterationValue","value":"IterationValue {  }","parent":null,"children":[{"krate":0,"index":911},{"krate":0,"index":912},{"krate":0,"index":913},{"krate":0,"index":914},{"krate":0,"index":915}],"decl_id":null,"docs":" The value emitted at each step when iterating over a `Histogram`.\n","sig":null,"attributes":[{"value":"/ The value emitted at each step when iterating over a `Histogram`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":84304,"byte_end":84373,"line_start":84,"line_end":84,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":84668,"byte_end":84671,"line_start":96,"line_end":96,"column_start":12,"column_end":15},"name":"new","qualname":"<IterationValue<T>>::new","value":"fn new(u64, f64, f64, T, u64) -> IterationValue<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a new IterationValue.\n","sig":null,"attributes":[{"value":"/ Create a new IterationValue.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":84624,"byte_end":84656,"line_start":95,"line_end":95,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":85221,"byte_end":85238,"line_start":114,"line_end":114,"column_start":12,"column_end":29},"name":"value_iterated_to","qualname":"<IterationValue<T>>::value_iterated_to","value":"fn value_iterated_to<'_>(&'_ Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The value iterated to. Some iterators provide a specific value inside the bucket, while\n others just use the highest value in the bucket.\n","sig":null,"attributes":[{"value":"/ The value iterated to. Some iterators provide a specific value inside the bucket, while","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":85061,"byte_end":85152,"line_start":112,"line_end":112,"column_start":5,"column_end":96}},{"value":"/ others just use the highest value in the bucket.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":85157,"byte_end":85209,"line_start":113,"line_end":113,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":85539,"byte_end":85549,"line_start":121,"line_end":121,"column_start":12,"column_end":22},"name":"percentile","qualname":"<IterationValue<T>>::percentile","value":"fn percentile<'_>(&'_ Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Percent of recorded values that are at or below the current bucket.\n This is simply the quantile multiplied by 100.0, so if you care about maintaining the best\n floating-point precision, use `quantile()` instead.\n","sig":null,"attributes":[{"value":"/ Percent of recorded values that are at or below the current bucket.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":85297,"byte_end":85368,"line_start":118,"line_end":118,"column_start":5,"column_end":76}},{"value":"/ This is simply the quantile multiplied by 100.0, so if you care about maintaining the best","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":85373,"byte_end":85467,"line_start":119,"line_end":119,"column_start":5,"column_end":99}},{"value":"/ floating-point precision, use `quantile()` instead.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":85472,"byte_end":85527,"line_start":120,"line_end":120,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":85691,"byte_end":85699,"line_start":126,"line_end":126,"column_start":12,"column_end":20},"name":"quantile","qualname":"<IterationValue<T>>::quantile","value":"fn quantile<'_>(&'_ Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Quantile of recorded values that are at or below the current bucket.\n","sig":null,"attributes":[{"value":"/ Quantile of recorded values that are at or below the current bucket.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":85607,"byte_end":85679,"line_start":125,"line_end":125,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":85920,"byte_end":85940,"line_start":132,"line_end":132,"column_start":12,"column_end":32},"name":"quantile_iterated_to","qualname":"<IterationValue<T>>::quantile_iterated_to","value":"fn quantile_iterated_to<'_>(&'_ Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Quantile iterated to, which may be different than `quantile()` when an iterator provides\n information about the specific quantile it's iterating to.\n","sig":null,"attributes":[{"value":"/ Quantile iterated to, which may be different than `quantile()` when an iterator provides","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":85749,"byte_end":85841,"line_start":130,"line_end":130,"column_start":5,"column_end":97}},{"value":"/ information about the specific quantile it's iterating to.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":85846,"byte_end":85908,"line_start":131,"line_end":131,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":86065,"byte_end":86079,"line_start":137,"line_end":137,"column_start":12,"column_end":26},"name":"count_at_value","qualname":"<IterationValue<T>>::count_at_value","value":"fn count_at_value<'_>(&'_ Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Recorded count for values equivalent to `value`\n","sig":null,"attributes":[{"value":"/ Recorded count for values equivalent to `value`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":86002,"byte_end":86053,"line_start":136,"line_end":136,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":86205,"byte_end":86231,"line_start":142,"line_end":142,"column_start":12,"column_end":38},"name":"count_since_last_iteration","qualname":"<IterationValue<T>>::count_since_last_iteration","value":"fn count_since_last_iteration<'_>(&'_ Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Number of values traversed since the last iteration step\n","sig":null,"attributes":[{"value":"/ Number of values traversed since the last iteration step","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":86133,"byte_end":86193,"line_start":141,"line_end":141,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":87009,"byte_end":87013,"line_start":170,"line_end":170,"column_start":8,"column_end":12},"name":"next","qualname":"<HistogramIterator as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":15512,"byte_end":15527,"line_start":299,"line_end":299,"column_start":12,"column_end":27},"name":"distinct_values","qualname":"<Histogram<T>>::distinct_values","value":"fn distinct_values<'_>(&'_ Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the current number of distinct values that can be represented in the histogram.\n","sig":null,"attributes":[{"value":"/ Get the current number of distinct values that can be represented in the histogram.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":15413,"byte_end":15500,"line_start":298,"line_end":298,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":15679,"byte_end":15682,"line_start":304,"line_end":304,"column_start":12,"column_end":15},"name":"low","qualname":"<Histogram<T>>::low","value":"fn low<'_>(&'_ Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the lowest discernible value for the histogram in its current configuration.\n","sig":null,"attributes":[{"value":"/ Get the lowest discernible value for the histogram in its current configuration.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":15583,"byte_end":15667,"line_start":303,"line_end":303,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":15843,"byte_end":15847,"line_start":309,"line_end":309,"column_start":12,"column_end":16},"name":"high","qualname":"<Histogram<T>>::high","value":"fn high<'_>(&'_ Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the highest trackable value for the histogram in its current configuration.\n","sig":null,"attributes":[{"value":"/ Get the highest trackable value for the histogram in its current configuration.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":15748,"byte_end":15831,"line_start":308,"line_end":308,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":15994,"byte_end":16000,"line_start":314,"line_end":314,"column_start":12,"column_end":18},"name":"sigfig","qualname":"<Histogram<T>>::sigfig","value":"fn sigfig<'_>(&'_ Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the number of significant value digits kept by this histogram.\n","sig":null,"attributes":[{"value":"/ Get the number of significant value digits kept by this histogram.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":15912,"byte_end":15982,"line_start":313,"line_end":313,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":16185,"byte_end":16190,"line_start":320,"line_end":320,"column_start":12,"column_end":17},"name":"count","qualname":"<Histogram<T>>::count","value":"fn count<'_>(&'_ Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the total number of samples recorded.\n","sig":null,"attributes":[{"value":"/ Get the total number of samples recorded.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":16065,"byte_end":16110,"line_start":318,"line_end":318,"column_start":5,"column_end":50}},{"value":"deprecated(since = \"6.0.0\", note = \"use `len` instead\")","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":16115,"byte_end":16173,"line_start":319,"line_end":319,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":16300,"byte_end":16303,"line_start":325,"line_end":325,"column_start":12,"column_end":15},"name":"len","qualname":"<Histogram<T>>::len","value":"fn len<'_>(&'_ Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the total number of samples recorded.\n","sig":null,"attributes":[{"value":"/ Get the total number of samples recorded.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":16243,"byte_end":16288,"line_start":324,"line_end":324,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":16426,"byte_end":16434,"line_start":330,"line_end":330,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Histogram<T>>::is_empty","value":"fn is_empty<'_>(&'_ Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this histogram has no recorded values.\n","sig":null,"attributes":[{"value":"/ Returns true if this histogram has no recorded values.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":16356,"byte_end":16414,"line_start":329,"line_end":329,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":16788,"byte_end":16795,"line_start":340,"line_end":340,"column_start":12,"column_end":19},"name":"buckets","qualname":"<Histogram<T>>::buckets","value":"fn buckets<'_>(&'_ Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the number of buckets used by the histogram to cover the highest trackable value.","sig":null,"attributes":[{"value":"/ Get the number of buckets used by the histogram to cover the highest trackable value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":16493,"byte_end":16582,"line_start":334,"line_end":334,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":16587,"byte_end":16590,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ This method differs from `.len()` in that it does not count the sub buckets within each","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":16595,"byte_end":16686,"line_start":336,"line_end":336,"column_start":5,"column_end":96}},{"value":"/ bucket.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":16691,"byte_end":16702,"line_start":337,"line_end":337,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":16707,"byte_end":16710,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ This method is probably only useful for testing purposes.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":16715,"byte_end":16776,"line_start":339,"line_end":339,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":20844,"byte_end":20857,"line_start":419,"line_end":419,"column_start":12,"column_end":25},"name":"clone_correct","qualname":"<Histogram<T>>::clone_correct","value":"fn clone_correct<'_>(&'_ Self, u64) -> Histogram<T>","parent":null,"children":[],"decl_id":null,"docs":" Get a copy of this histogram, corrected for coordinated omission.","sig":null,"attributes":[{"value":"/ Get a copy of this histogram, corrected for coordinated omission.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":19789,"byte_end":19858,"line_start":402,"line_end":402,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":19863,"byte_end":19866,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ To compensate for the loss of sampled values when a recorded value is larger than the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":19871,"byte_end":19960,"line_start":404,"line_end":404,"column_start":5,"column_end":94}},{"value":"/ expected interval between value samples, the new histogram will include an auto-generated","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":19965,"byte_end":20058,"line_start":405,"line_end":405,"column_start":5,"column_end":98}},{"value":"/ additional series of decreasingly-smaller (down to the `interval`) value records for each","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":20063,"byte_end":20156,"line_start":406,"line_end":406,"column_start":5,"column_end":98}},{"value":"/ count found in the current histogram that is larger than the `interval`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":20161,"byte_end":20237,"line_start":407,"line_end":407,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":20242,"byte_end":20245,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ Note: This is a post-correction method, as opposed to the at-recording correction method","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":20250,"byte_end":20342,"line_start":409,"line_end":409,"column_start":5,"column_end":97}},{"value":"/ provided by `record_correct`. The two methods are mutually exclusive, and only one of the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":20347,"byte_end":20440,"line_start":410,"line_end":410,"column_start":5,"column_end":98}},{"value":"/ two should be be used on a given data set to correct for the same coordinated omission","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":20445,"byte_end":20535,"line_start":411,"line_end":411,"column_start":5,"column_end":95}},{"value":"/ issue.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":20540,"byte_end":20550,"line_start":412,"line_end":412,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":20555,"byte_end":20558,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ See notes in the description of the Histogram calls for an illustration of why this","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":20563,"byte_end":20650,"line_start":414,"line_end":414,"column_start":5,"column_end":92}},{"value":"/ corrective behavior is important.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":20655,"byte_end":20692,"line_start":415,"line_end":415,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":20697,"byte_end":20700,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ If `interval` is larger than 0, add auto-generated value records as appropriate if value is","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":20705,"byte_end":20800,"line_start":417,"line_end":417,"column_start":5,"column_end":100}},{"value":"/ larger than `interval`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":20805,"byte_end":20832,"line_start":418,"line_end":418,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":21317,"byte_end":21323,"line_start":430,"line_end":430,"column_start":12,"column_end":18},"name":"set_to","qualname":"<Histogram<T>>::set_to","value":"fn set_to<B, '_>(&'_ mut Self, B) -> Result<(), AdditionError> where\nB: Borrow<Histogram<T>>","parent":null,"children":[],"decl_id":null,"docs":" Overwrite this histogram with the given histogram. All data and statistics in this\n histogram will be overwritten.\n","sig":null,"attributes":[{"value":"/ Overwrite this histogram with the given histogram. All data and statistics in this","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":21180,"byte_end":21266,"line_start":428,"line_end":428,"column_start":5,"column_end":91}},{"value":"/ histogram will be overwritten.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":21271,"byte_end":21305,"line_start":429,"line_end":429,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":21738,"byte_end":21754,"line_start":438,"line_end":438,"column_start":12,"column_end":28},"name":"set_to_corrected","qualname":"<Histogram<T>>::set_to_corrected","value":"fn set_to_corrected<B, '_>(&'_ mut Self, B, u64) -> Result<(), RecordError>\nwhere B: Borrow<Histogram<T>>","parent":null,"children":[],"decl_id":null,"docs":" Overwrite this histogram with the given histogram while correcting for coordinated\n omission. All data and statistics in this histogram will be overwritten. See\n `clone_correct` for more detailed explanation about how correction is applied\n","sig":null,"attributes":[{"value":"/ Overwrite this histogram with the given histogram while correcting for coordinated","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":21469,"byte_end":21555,"line_start":435,"line_end":435,"column_start":5,"column_end":91}},{"value":"/ omission. All data and statistics in this histogram will be overwritten. See","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":21560,"byte_end":21640,"line_start":436,"line_end":436,"column_start":5,"column_end":85}},{"value":"/ `clone_correct` for more detailed explanation about how correction is applied","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":21645,"byte_end":21726,"line_start":437,"line_end":437,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":22405,"byte_end":22408,"line_start":454,"line_end":454,"column_start":12,"column_end":15},"name":"add","qualname":"<Histogram<T>>::add","value":"fn add<B, '_>(&'_ mut Self, B) -> Result<(), AdditionError> where\nB: Borrow<Histogram<T>>","parent":null,"children":[],"decl_id":null,"docs":" Add the contents of another histogram to this one.","sig":null,"attributes":[{"value":"/ Add the contents of another histogram to this one.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":22234,"byte_end":22288,"line_start":451,"line_end":451,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":22293,"byte_end":22296,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ Returns an error if values in the other histogram cannot be stored; see `AdditionError`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":22301,"byte_end":22393,"line_start":453,"line_end":453,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":26950,"byte_end":26961,"line_start":551,"line_end":551,"column_start":12,"column_end":23},"name":"add_correct","qualname":"<Histogram<T>>::add_correct","value":"fn add_correct<B, '_>(&'_ mut Self, B, u64) -> Result<(), RecordError> where\nB: Borrow<Histogram<T>>","parent":null,"children":[],"decl_id":null,"docs":" Add the contents of another histogram to this one, while correcting for coordinated\n omission.","sig":null,"attributes":[{"value":"/ Add the contents of another histogram to this one, while correcting for coordinated","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":25930,"byte_end":26017,"line_start":534,"line_end":534,"column_start":5,"column_end":92}},{"value":"/ omission.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":26022,"byte_end":26035,"line_start":535,"line_end":535,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":26040,"byte_end":26043,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ To compensate for the loss of sampled values when a recorded value is larger than the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":26048,"byte_end":26137,"line_start":537,"line_end":537,"column_start":5,"column_end":94}},{"value":"/ expected interval between value samples, the values added will include an auto-generated","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":26142,"byte_end":26234,"line_start":538,"line_end":538,"column_start":5,"column_end":97}},{"value":"/ additional series of decreasingly-smaller (down to the given `interval`) value records for","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":26239,"byte_end":26333,"line_start":539,"line_end":539,"column_start":5,"column_end":99}},{"value":"/ each count found in the current histogram that is larger than `interval`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":26338,"byte_end":26415,"line_start":540,"line_end":540,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":26420,"byte_end":26423,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ Note: This is a post-recording correction method, as opposed to the at-recording correction","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":26428,"byte_end":26523,"line_start":542,"line_end":542,"column_start":5,"column_end":100}},{"value":"/ method provided by `record_correct`. The two methods are mutually exclusive, and only one","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":26528,"byte_end":26621,"line_start":543,"line_end":543,"column_start":5,"column_end":98}},{"value":"/ of the two should be be used on a given data set to correct for the same coordinated","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":26626,"byte_end":26714,"line_start":544,"line_end":544,"column_start":5,"column_end":93}},{"value":"/ omission issue.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":26719,"byte_end":26738,"line_start":545,"line_end":545,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":26743,"byte_end":26746,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ See notes in the description of the `Histogram` calls for an illustration of why this","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":26751,"byte_end":26840,"line_start":547,"line_end":547,"column_start":5,"column_end":94}},{"value":"/ corrective behavior is important.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":26845,"byte_end":26882,"line_start":548,"line_end":548,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":26887,"byte_end":26890,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ See `RecordError` for error conditions.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":26895,"byte_end":26938,"line_start":550,"line_end":550,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":27424,"byte_end":27432,"line_start":567,"line_end":567,"column_start":12,"column_end":20},"name":"subtract","qualname":"<Histogram<T>>::subtract","value":"fn subtract<B, '_>(&'_ mut Self, B) -> Result<(), SubtractionError> where\nB: Borrow<Histogram<T>>","parent":null,"children":[],"decl_id":null,"docs":" Subtract the contents of another histogram from this one.","sig":null,"attributes":[{"value":"/ Subtract the contents of another histogram from this one.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":27290,"byte_end":27351,"line_start":564,"line_end":564,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":27356,"byte_end":27359,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ See `SubtractionError` for error conditions.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":27364,"byte_end":27412,"line_start":566,"line_end":566,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":30377,"byte_end":30382,"line_start":636,"line_end":636,"column_start":12,"column_end":17},"name":"clear","qualname":"<Histogram<T>>::clear","value":"fn clear<'_>(&'_ mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clear the contents of this histogram while preserving its statistics and configuration.\n","sig":null,"attributes":[{"value":"/ Clear the contents of this histogram while preserving its statistics and configuration.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":30274,"byte_end":30365,"line_start":635,"line_end":635,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":30614,"byte_end":30619,"line_start":644,"line_end":644,"column_start":12,"column_end":17},"name":"reset","qualname":"<Histogram<T>>::reset","value":"fn reset<'_>(&'_ mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the contents and statistics of this histogram, preserving only its configuration.\n","sig":null,"attributes":[{"value":"/ Reset the contents and statistics of this histogram, preserving only its configuration.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":30511,"byte_end":30602,"line_start":643,"line_end":643,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":31084,"byte_end":31088,"line_start":657,"line_end":657,"column_start":12,"column_end":16},"name":"auto","qualname":"<Histogram<T>>::auto","value":"fn auto<'_>(&'_ mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Control whether or not the histogram can auto-resize and auto-adjust it's highest trackable\n value as high-valued samples are recorded.\n","sig":null,"attributes":[{"value":"/ Control whether or not the histogram can auto-resize and auto-adjust it's highest trackable","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":30926,"byte_end":31021,"line_start":655,"line_end":655,"column_start":5,"column_end":100}},{"value":"/ value as high-valued samples are recorded.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":31026,"byte_end":31072,"line_start":656,"line_end":656,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":31730,"byte_end":31733,"line_start":672,"line_end":672,"column_start":12,"column_end":15},"name":"new","qualname":"<Histogram<T>>::new","value":"fn new(u8) -> Result<Histogram<T>, CreationError>","parent":null,"children":[],"decl_id":null,"docs":" Construct an auto-resizing `Histogram` with a lowest discernible value of 1 and an\n auto-adjusting highest trackable value. Can auto-resize up to track values up to\n `(i64::max_value() / 2)`.","sig":null,"attributes":[{"value":"/ Construct an auto-resizing `Histogram` with a lowest discernible value of 1 and an","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":31386,"byte_end":31472,"line_start":665,"line_end":665,"column_start":5,"column_end":91}},{"value":"/ auto-adjusting highest trackable value. Can auto-resize up to track values up to","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":31477,"byte_end":31561,"line_start":666,"line_end":666,"column_start":5,"column_end":89}},{"value":"/ `(i64::max_value() / 2)`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":31566,"byte_end":31595,"line_start":667,"line_end":667,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":31600,"byte_end":31603,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ See [`new_with_bounds`] for info on `sigfig`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":31608,"byte_end":31657,"line_start":669,"line_end":669,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":31662,"byte_end":31665,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ [`new_with_bounds`]: #method.new_with_bounds","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":31670,"byte_end":31718,"line_start":671,"line_end":671,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":32347,"byte_end":32359,"line_start":687,"line_end":687,"column_start":12,"column_end":24},"name":"new_with_max","qualname":"<Histogram<T>>::new_with_max","value":"fn new_with_max(u64, u8) -> Result<Histogram<T>, CreationError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a `Histogram` given a known maximum value to be tracked, and a number of\n significant decimal digits. The histogram will be constructed to implicitly track\n (distinguish from 0) values as low as 1. Auto-resizing will be disabled.","sig":null,"attributes":[{"value":"/ Construct a `Histogram` given a known maximum value to be tracked, and a number of","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":31944,"byte_end":32030,"line_start":680,"line_end":680,"column_start":5,"column_end":91}},{"value":"/ significant decimal digits. The histogram will be constructed to implicitly track","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":32035,"byte_end":32120,"line_start":681,"line_end":681,"column_start":5,"column_end":90}},{"value":"/ (distinguish from 0) values as low as 1. Auto-resizing will be disabled.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":32125,"byte_end":32201,"line_start":682,"line_end":682,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":32206,"byte_end":32209,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ See [`new_with_bounds`] for info on `high` and `sigfig`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":32214,"byte_end":32274,"line_start":684,"line_end":684,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":32279,"byte_end":32282,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ [`new_with_bounds`]: #method.new_with_bounds","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":32287,"byte_end":32335,"line_start":686,"line_end":686,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":33922,"byte_end":33937,"line_start":711,"line_end":711,"column_start":12,"column_end":27},"name":"new_with_bounds","qualname":"<Histogram<T>>::new_with_bounds","value":"fn new_with_bounds(u64, u64, u8) -> Result<Histogram<T>, CreationError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a `Histogram` with known upper and lower bounds for recorded sample values.","sig":null,"attributes":[{"value":"/ Construct a `Histogram` with known upper and lower bounds for recorded sample values.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":32482,"byte_end":32571,"line_start":691,"line_end":691,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":32576,"byte_end":32579,"line_start":692,"line_end":692,"column_start":5,"column_end":8}},{"value":"/ `low` is the lowest value that can be discerned (distinguished from 0) by the histogram,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":32584,"byte_end":32676,"line_start":693,"line_end":693,"column_start":5,"column_end":97}},{"value":"/ and must be a positive integer that is >= 1. It may be internally rounded down to nearest","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":32681,"byte_end":32774,"line_start":694,"line_end":694,"column_start":5,"column_end":98}},{"value":"/ power of 2. Providing a lowest discernible value (`low`) is useful is situations where the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":32779,"byte_end":32873,"line_start":695,"line_end":695,"column_start":5,"column_end":99}},{"value":"/ units used for the histogram's values are much smaller that the minimal accuracy required.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":32878,"byte_end":32972,"line_start":696,"line_end":696,"column_start":5,"column_end":99}},{"value":"/ E.g. when tracking time values stated in nanosecond units, where the minimal accuracy","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":32977,"byte_end":33066,"line_start":697,"line_end":697,"column_start":5,"column_end":94}},{"value":"/ required is a microsecond, the proper value for `low` would be 1000. If you're not sure,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":33071,"byte_end":33163,"line_start":698,"line_end":698,"column_start":5,"column_end":97}},{"value":"/ use 1.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":33168,"byte_end":33178,"line_start":699,"line_end":699,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":33183,"byte_end":33186,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ `high` is the highest value to be tracked by the histogram, and must be a","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":33191,"byte_end":33268,"line_start":701,"line_end":701,"column_start":5,"column_end":82}},{"value":"/ positive integer that is `>= (2 * low)`. If you're not sure, use `u64::max_value()`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":33273,"byte_end":33361,"line_start":702,"line_end":702,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":33366,"byte_end":33369,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ `sigfig` Specifies the number of significant figures to maintain. This is the number of","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":33374,"byte_end":33465,"line_start":704,"line_end":704,"column_start":5,"column_end":96}},{"value":"/ significant decimal digits to which the histogram will maintain value resolution and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":33470,"byte_end":33558,"line_start":705,"line_end":705,"column_start":5,"column_end":93}},{"value":"/ separation. Must be in the range [0, 5]. If you're not sure, use 3. As `sigfig` increases,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":33563,"byte_end":33657,"line_start":706,"line_end":706,"column_start":5,"column_end":99}},{"value":"/ memory usage grows exponentially, so choose carefully if there will be many histograms in","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":33662,"byte_end":33755,"line_start":707,"line_end":707,"column_start":5,"column_end":98}},{"value":"/ memory at once or if storage is otherwise a concern.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":33760,"byte_end":33816,"line_start":708,"line_end":708,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":33821,"byte_end":33824,"line_start":709,"line_end":709,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the provided parameters are invalid; see `CreationError`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":33829,"byte_end":33910,"line_start":710,"line_end":710,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":37941,"byte_end":37949,"line_start":801,"line_end":801,"column_start":12,"column_end":20},"name":"new_from","qualname":"<Histogram<T>>::new_from","value":"fn new_from<F, '_>(&'_ Histogram<F>) -> Histogram<T> where F: Counter","parent":null,"children":[],"decl_id":null,"docs":" Construct a `Histogram` with the same range settings as a given source histogram,\n duplicating the source's start/end timestamps (but NOT its contents).\n","sig":null,"attributes":[{"value":"/ Construct a `Histogram` with the same range settings as a given source histogram,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":37766,"byte_end":37851,"line_start":799,"line_end":799,"column_start":5,"column_end":90}},{"value":"/ duplicating the source's start/end timestamps (but NOT its contents).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":37856,"byte_end":37929,"line_start":800,"line_end":800,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":38860,"byte_end":38866,"line_start":824,"line_end":824,"column_start":12,"column_end":18},"name":"record","qualname":"<Histogram<T>>::record","value":"fn record<'_>(&'_ mut Self, u64) -> Result<(), RecordError>","parent":null,"children":[],"decl_id":null,"docs":" Record `value` in the histogram.","sig":null,"attributes":[{"value":"/ Record `value` in the histogram.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":38695,"byte_end":38731,"line_start":820,"line_end":820,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":38736,"byte_end":38739,"line_start":821,"line_end":821,"column_start":5,"column_end":8}},{"value":"/ Returns an error if `value` exceeds the highest trackable value and auto-resize is","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":38744,"byte_end":38830,"line_start":822,"line_end":822,"column_start":5,"column_end":91}},{"value":"/ disabled.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":38835,"byte_end":38848,"line_start":823,"line_end":823,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":39446,"byte_end":39463,"line_start":834,"line_end":834,"column_start":12,"column_end":29},"name":"saturating_record","qualname":"<Histogram<T>>::saturating_record","value":"fn saturating_record<'_>(&'_ mut Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" Record `value` in the histogram, clamped to the range of the histogram.","sig":null,"attributes":[{"value":"/ Record `value` in the histogram, clamped to the range of the histogram.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":38969,"byte_end":39044,"line_start":828,"line_end":828,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":39049,"byte_end":39052,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ This method cannot fail, as any values that are too small or too large to be tracked will","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":39057,"byte_end":39150,"line_start":830,"line_end":830,"column_start":5,"column_end":98}},{"value":"/ automatically be clamed to be in range. Be aware that this *will* hide extreme outliers","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":39155,"byte_end":39246,"line_start":831,"line_end":831,"column_start":5,"column_end":96}},{"value":"/ from the resulting histogram without warning. Since the values are clamped, the histogram","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":39251,"byte_end":39344,"line_start":832,"line_end":832,"column_start":5,"column_end":98}},{"value":"/ will also not be resized to accomodate the value, even if auto-resize is enabled.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":39349,"byte_end":39434,"line_start":833,"line_end":833,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":39817,"byte_end":39825,"line_start":843,"line_end":843,"column_start":12,"column_end":20},"name":"record_n","qualname":"<Histogram<T>>::record_n","value":"fn record_n<'_>(&'_ mut Self, u64, T) -> Result<(), RecordError>","parent":null,"children":[],"decl_id":null,"docs":" Record multiple samples for a value in the histogram, adding to the value's current count.","sig":null,"attributes":[{"value":"/ Record multiple samples for a value in the histogram, adding to the value's current count.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":39550,"byte_end":39644,"line_start":838,"line_end":838,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":39649,"byte_end":39652,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ `count` is the number of occurrences of this value to record.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":39657,"byte_end":39722,"line_start":840,"line_end":840,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":39727,"byte_end":39730,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ Returns an error if `value` cannot be recorded; see `RecordError`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":39735,"byte_end":39805,"line_start":842,"line_end":842,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":40533,"byte_end":40552,"line_start":856,"line_end":856,"column_start":12,"column_end":31},"name":"saturating_record_n","qualname":"<Histogram<T>>::saturating_record_n","value":"fn saturating_record_n<'_>(&'_ mut Self, u64, T)","parent":null,"children":[],"decl_id":null,"docs":" Record multiple samples for a value in the histogram, each one clamped to the histogram's\n range.","sig":null,"attributes":[{"value":"/ Record multiple samples for a value in the histogram, each one clamped to the histogram's","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":39948,"byte_end":40041,"line_start":847,"line_end":847,"column_start":5,"column_end":98}},{"value":"/ range.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":40046,"byte_end":40056,"line_start":848,"line_end":848,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":40061,"byte_end":40064,"line_start":849,"line_end":849,"column_start":5,"column_end":8}},{"value":"/ `count` is the number of occurrences of this value to record.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":40069,"byte_end":40134,"line_start":850,"line_end":850,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":40139,"byte_end":40142,"line_start":851,"line_end":851,"column_start":5,"column_end":8}},{"value":"/ This method cannot fail, as values that are too small or too large to be recorded will","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":40147,"byte_end":40237,"line_start":852,"line_end":852,"column_start":5,"column_end":95}},{"value":"/ automatically be clamed to be in range. Be aware that this *will* hide extreme outliers","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":40242,"byte_end":40333,"line_start":853,"line_end":853,"column_start":5,"column_end":96}},{"value":"/ from the resulting histogram without warning. Since the values are clamped, the histogram","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":40338,"byte_end":40431,"line_start":854,"line_end":854,"column_start":5,"column_end":98}},{"value":"/ will also not be resized to accomodate the value, even if auto-resize is enabled.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":40436,"byte_end":40521,"line_start":855,"line_end":855,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":42740,"byte_end":42754,"line_start":909,"line_end":909,"column_start":12,"column_end":26},"name":"record_correct","qualname":"<Histogram<T>>::record_correct","value":"fn record_correct<'_>(&'_ mut Self, u64, u64) -> Result<(), RecordError>","parent":null,"children":[],"decl_id":null,"docs":" Record a value in the histogram while correcting for coordinated omission.","sig":null,"attributes":[{"value":"/ Record a value in the histogram while correcting for coordinated omission.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":42584,"byte_end":42662,"line_start":906,"line_end":906,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":42667,"byte_end":42670,"line_start":907,"line_end":907,"column_start":5,"column_end":8}},{"value":"/ See `record_n_correct` for further documentation.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":42675,"byte_end":42728,"line_start":908,"line_end":908,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":43709,"byte_end":43725,"line_start":926,"line_end":926,"column_start":12,"column_end":28},"name":"record_n_correct","qualname":"<Histogram<T>>::record_n_correct","value":"fn record_n_correct<'_>(&'_ mut Self, u64, T, u64) -> Result<(), RecordError>","parent":null,"children":[],"decl_id":null,"docs":" Record multiple values in the histogram while correcting for coordinated omission.","sig":null,"attributes":[{"value":"/ Record multiple values in the histogram while correcting for coordinated omission.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":42890,"byte_end":42976,"line_start":913,"line_end":913,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":42981,"byte_end":42984,"line_start":914,"line_end":914,"column_start":5,"column_end":8}},{"value":"/ To compensate for the loss of sampled values when a recorded value is larger than the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":42989,"byte_end":43078,"line_start":915,"line_end":915,"column_start":5,"column_end":94}},{"value":"/ expected interval between value samples, this method will auto-generate and record an","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":43083,"byte_end":43172,"line_start":916,"line_end":916,"column_start":5,"column_end":94}},{"value":"/ additional series of decreasingly-smaller (down to `interval`) value records.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":43177,"byte_end":43258,"line_start":917,"line_end":917,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":43263,"byte_end":43266,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ Note: This is a at-recording correction method, as opposed to the post-recording correction","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":43271,"byte_end":43366,"line_start":919,"line_end":919,"column_start":5,"column_end":100}},{"value":"/ method provided by `correct_clone`. The two methods are mutually exclusive, and only one of","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":43371,"byte_end":43466,"line_start":920,"line_end":920,"column_start":5,"column_end":100}},{"value":"/ the two should be be used on a given data set to correct for the same coordinated omission","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":43471,"byte_end":43565,"line_start":921,"line_end":921,"column_start":5,"column_end":99}},{"value":"/ issue.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":43570,"byte_end":43580,"line_start":922,"line_end":922,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":43585,"byte_end":43588,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ Returns an error if `value` exceeds the highest trackable value and auto-resize is","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":43593,"byte_end":43679,"line_start":924,"line_end":924,"column_start":5,"column_end":91}},{"value":"/ disabled.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":43684,"byte_end":43697,"line_start":925,"line_end":925,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":47456,"byte_end":47470,"line_start":1019,"line_end":1019,"column_start":12,"column_end":26},"name":"iter_quantiles","qualname":"<Histogram<T>>::iter_quantiles","value":"fn iter_quantiles<'_>(&'_ Self, u32) -> HistogramIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate through histogram values by quantile levels.","sig":null,"attributes":[{"value":"/ Iterate through histogram values by quantile levels.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":44526,"byte_end":44582,"line_start":953,"line_end":953,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":44587,"byte_end":44590,"line_start":954,"line_end":954,"column_start":5,"column_end":8}},{"value":"/ The iteration mechanic for this iterator may appear somewhat confusing, but it yields","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":44595,"byte_end":44684,"line_start":955,"line_end":955,"column_start":5,"column_end":94}},{"value":"/ fairly pleasing output. The iterator starts with a *quantile step size* of","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":44689,"byte_end":44767,"line_start":956,"line_end":956,"column_start":5,"column_end":83}},{"value":"/ `1/halving_period`. For every iteration, it yields a value whose quantile is that much","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":44772,"byte_end":44862,"line_start":957,"line_end":957,"column_start":5,"column_end":95}},{"value":"/ greater than the previously emitted quantile (i.e., initially 0, 0.1, 0.2, etc.). Once","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":44867,"byte_end":44957,"line_start":958,"line_end":958,"column_start":5,"column_end":95}},{"value":"/ `halving_period` values have been emitted, the quantile  step size is halved, and the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":44962,"byte_end":45051,"line_start":959,"line_end":959,"column_start":5,"column_end":94}},{"value":"/ iteration continues.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":45056,"byte_end":45080,"line_start":960,"line_end":960,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":45085,"byte_end":45088,"line_start":961,"line_end":961,"column_start":5,"column_end":8}},{"value":"/ `ticks_per_half_distance` must be at least 1.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":45093,"byte_end":45142,"line_start":962,"line_end":962,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":45147,"byte_end":45150,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/ The iterator yields an `iterators::IterationValue` struct.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":45155,"byte_end":45217,"line_start":964,"line_end":964,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":45222,"byte_end":45225,"line_start":965,"line_end":965,"column_start":5,"column_end":8}},{"value":"/ One subtlety of this iterator is that you can reach a value whose cumulative count yields","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":45230,"byte_end":45323,"line_start":966,"line_end":966,"column_start":5,"column_end":98}},{"value":"/ a quantile of 1.0 far sooner than the quantile iteration would reach 1.0. Consider a","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":45328,"byte_end":45416,"line_start":967,"line_end":967,"column_start":5,"column_end":93}},{"value":"/ histogram with count 1 at value 1, and count 1000000 at value 1000. At any quantile","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":45421,"byte_end":45508,"line_start":968,"line_end":968,"column_start":5,"column_end":92}},{"value":"/ iteration above `1/1000001 = 0.000000999`, iteration will have necessarily proceeded to","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":45513,"byte_end":45604,"line_start":969,"line_end":969,"column_start":5,"column_end":96}},{"value":"/ the index for value 1000, which has all the remaining counts, and therefore quantile (for","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":45609,"byte_end":45702,"line_start":970,"line_end":970,"column_start":5,"column_end":98}},{"value":"/ the value) of 1.0. This is why `IterationValue` has both `quantile()` and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":45707,"byte_end":45784,"line_start":971,"line_end":971,"column_start":5,"column_end":82}},{"value":"/ `quantile_iterated_to()`. Additionally, to avoid a bunch of unhelpful iterations once","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":45789,"byte_end":45878,"line_start":972,"line_end":972,"column_start":5,"column_end":94}},{"value":"/ iteration has reached the last value with non-zero count, quantile iteration will skip","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":45883,"byte_end":45973,"line_start":973,"line_end":973,"column_start":5,"column_end":95}},{"value":"/ straight to 1.0 as well.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":45978,"byte_end":46006,"line_start":974,"line_end":974,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46011,"byte_end":46014,"line_start":975,"line_end":975,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46019,"byte_end":46026,"line_start":976,"line_end":976,"column_start":5,"column_end":12}},{"value":"/ use hdrhistogram::Histogram;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46031,"byte_end":46063,"line_start":977,"line_end":977,"column_start":5,"column_end":37}},{"value":"/ use hdrhistogram::iterators::IterationValue;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46068,"byte_end":46116,"line_start":978,"line_end":978,"column_start":5,"column_end":53}},{"value":"/ let mut hist = Histogram::<u64>::new_with_max(10000, 4).unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46121,"byte_end":46190,"line_start":979,"line_end":979,"column_start":5,"column_end":74}},{"value":"/ for i in 0..10000 {","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46195,"byte_end":46218,"line_start":980,"line_end":980,"column_start":5,"column_end":28}},{"value":"/     hist += i;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46223,"byte_end":46241,"line_start":981,"line_end":981,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46246,"byte_end":46251,"line_start":982,"line_end":982,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46256,"byte_end":46259,"line_start":983,"line_end":983,"column_start":5,"column_end":8}},{"value":"/ let mut perc = hist.iter_quantiles(1);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46264,"byte_end":46306,"line_start":984,"line_end":984,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46311,"byte_end":46314,"line_start":985,"line_end":985,"column_start":5,"column_end":8}},{"value":"/ println!(\"{:?}\", hist.iter_quantiles(1).collect::<Vec<_>>());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46319,"byte_end":46384,"line_start":986,"line_end":986,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46389,"byte_end":46392,"line_start":987,"line_end":987,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46397,"byte_end":46412,"line_start":988,"line_end":988,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46417,"byte_end":46437,"line_start":989,"line_end":989,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(hist.value_at_quantile(0.0001), 0.0001, 0.0, 1, 1))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46442,"byte_end":46526,"line_start":990,"line_end":990,"column_start":5,"column_end":89}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46531,"byte_end":46537,"line_start":991,"line_end":991,"column_start":5,"column_end":11}},{"value":"/ // step size = 50","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46542,"byte_end":46563,"line_start":992,"line_end":992,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46568,"byte_end":46583,"line_start":993,"line_end":993,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46588,"byte_end":46608,"line_start":994,"line_end":994,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(hist.value_at_quantile(0.5), 0.5, 0.5, 1, 5000 - 1))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46613,"byte_end":46698,"line_start":995,"line_end":995,"column_start":5,"column_end":90}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46703,"byte_end":46709,"line_start":996,"line_end":996,"column_start":5,"column_end":11}},{"value":"/ // step size = 25","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46714,"byte_end":46735,"line_start":997,"line_end":997,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46740,"byte_end":46755,"line_start":998,"line_end":998,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46760,"byte_end":46780,"line_start":999,"line_end":999,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(hist.value_at_quantile(0.75), 0.75, 0.75, 1, 2500))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46785,"byte_end":46869,"line_start":1000,"line_end":1000,"column_start":5,"column_end":89}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46874,"byte_end":46880,"line_start":1001,"line_end":1001,"column_start":5,"column_end":11}},{"value":"/ // step size = 12.5","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46885,"byte_end":46908,"line_start":1002,"line_end":1002,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46913,"byte_end":46928,"line_start":1003,"line_end":1003,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46933,"byte_end":46953,"line_start":1004,"line_end":1004,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(hist.value_at_quantile(0.875), 0.875, 0.875, 1, 1250))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":46958,"byte_end":47045,"line_start":1005,"line_end":1005,"column_start":5,"column_end":92}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":47050,"byte_end":47056,"line_start":1006,"line_end":1006,"column_start":5,"column_end":11}},{"value":"/ // step size = 6.25","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":47061,"byte_end":47084,"line_start":1007,"line_end":1007,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":47089,"byte_end":47104,"line_start":1008,"line_end":1008,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":47109,"byte_end":47129,"line_start":1009,"line_end":1009,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(hist.value_at_quantile(0.9375), 0.9375, 0.9375, 1, 625))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":47134,"byte_end":47223,"line_start":1010,"line_end":1010,"column_start":5,"column_end":94}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":47228,"byte_end":47234,"line_start":1011,"line_end":1011,"column_start":5,"column_end":11}},{"value":"/ // step size = 3.125","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":47239,"byte_end":47263,"line_start":1012,"line_end":1012,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":47268,"byte_end":47283,"line_start":1013,"line_end":1013,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":47288,"byte_end":47308,"line_start":1014,"line_end":1014,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(hist.value_at_quantile(0.9688), 0.9688, 0.96875, 1, 313))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":47313,"byte_end":47403,"line_start":1015,"line_end":1015,"column_start":5,"column_end":95}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":47408,"byte_end":47414,"line_start":1016,"line_end":1016,"column_start":5,"column_end":11}},{"value":"/ // etc...","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":47419,"byte_end":47432,"line_start":1017,"line_end":1017,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":47437,"byte_end":47444,"line_start":1018,"line_end":1018,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":49920,"byte_end":49931,"line_start":1082,"line_end":1082,"column_start":12,"column_end":23},"name":"iter_linear","qualname":"<Histogram<T>>::iter_linear","value":"fn iter_linear<'_>(&'_ Self, u64) -> HistogramIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterates through histogram values using linear value steps. The iteration is performed in\n steps of size `step`, each one yielding the count for all values in the preceeding value\n range of size `step`. The iterator terminates when all recorded histogram values are\n exhausted.","sig":null,"attributes":[{"value":"/ Iterates through histogram values using linear value steps. The iteration is performed in","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":47749,"byte_end":47842,"line_start":1027,"line_end":1027,"column_start":5,"column_end":98}},{"value":"/ steps of size `step`, each one yielding the count for all values in the preceeding value","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":47847,"byte_end":47939,"line_start":1028,"line_end":1028,"column_start":5,"column_end":97}},{"value":"/ range of size `step`. The iterator terminates when all recorded histogram values are","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":47944,"byte_end":48032,"line_start":1029,"line_end":1029,"column_start":5,"column_end":93}},{"value":"/ exhausted.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48037,"byte_end":48051,"line_start":1030,"line_end":1030,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48056,"byte_end":48059,"line_start":1031,"line_end":1031,"column_start":5,"column_end":8}},{"value":"/ The iterator yields an `iterators::IterationValue` struct.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48064,"byte_end":48126,"line_start":1032,"line_end":1032,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48131,"byte_end":48134,"line_start":1033,"line_end":1033,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48139,"byte_end":48146,"line_start":1034,"line_end":1034,"column_start":5,"column_end":12}},{"value":"/ use hdrhistogram::Histogram;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48151,"byte_end":48183,"line_start":1035,"line_end":1035,"column_start":5,"column_end":37}},{"value":"/ use hdrhistogram::iterators::IterationValue;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48188,"byte_end":48236,"line_start":1036,"line_end":1036,"column_start":5,"column_end":53}},{"value":"/ let mut hist = Histogram::<u64>::new_with_max(1000, 3).unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48241,"byte_end":48309,"line_start":1037,"line_end":1037,"column_start":5,"column_end":73}},{"value":"/ hist += 100;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48314,"byte_end":48330,"line_start":1038,"line_end":1038,"column_start":5,"column_end":21}},{"value":"/ hist += 500;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48335,"byte_end":48351,"line_start":1039,"line_end":1039,"column_start":5,"column_end":21}},{"value":"/ hist += 800;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48356,"byte_end":48372,"line_start":1040,"line_end":1040,"column_start":5,"column_end":21}},{"value":"/ hist += 850;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48377,"byte_end":48393,"line_start":1041,"line_end":1041,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48398,"byte_end":48401,"line_start":1042,"line_end":1042,"column_start":5,"column_end":8}},{"value":"/ let mut perc = hist.iter_linear(100);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48406,"byte_end":48447,"line_start":1043,"line_end":1043,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48452,"byte_end":48467,"line_start":1044,"line_end":1044,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48472,"byte_end":48492,"line_start":1045,"line_end":1045,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(99, hist.quantile_below(99), hist.quantile_below(99), 0, 0))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48497,"byte_end":48590,"line_start":1046,"line_end":1046,"column_start":5,"column_end":98}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48595,"byte_end":48601,"line_start":1047,"line_end":1047,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48606,"byte_end":48621,"line_start":1048,"line_end":1048,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48626,"byte_end":48646,"line_start":1049,"line_end":1049,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(199, hist.quantile_below(199), hist.quantile_below(199), 0, 1))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48651,"byte_end":48747,"line_start":1050,"line_end":1050,"column_start":5,"column_end":101}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48752,"byte_end":48758,"line_start":1051,"line_end":1051,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48763,"byte_end":48778,"line_start":1052,"line_end":1052,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48783,"byte_end":48803,"line_start":1053,"line_end":1053,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(299, hist.quantile_below(299), hist.quantile_below(299), 0, 0))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48808,"byte_end":48904,"line_start":1054,"line_end":1054,"column_start":5,"column_end":101}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48909,"byte_end":48915,"line_start":1055,"line_end":1055,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48920,"byte_end":48935,"line_start":1056,"line_end":1056,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48940,"byte_end":48960,"line_start":1057,"line_end":1057,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(399, hist.quantile_below(399), hist.quantile_below(399), 0, 0))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":48965,"byte_end":49061,"line_start":1058,"line_end":1058,"column_start":5,"column_end":101}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":49066,"byte_end":49072,"line_start":1059,"line_end":1059,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":49077,"byte_end":49092,"line_start":1060,"line_end":1060,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":49097,"byte_end":49117,"line_start":1061,"line_end":1061,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(499, hist.quantile_below(499), hist.quantile_below(499), 0, 0))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":49122,"byte_end":49218,"line_start":1062,"line_end":1062,"column_start":5,"column_end":101}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":49223,"byte_end":49229,"line_start":1063,"line_end":1063,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":49234,"byte_end":49249,"line_start":1064,"line_end":1064,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":49254,"byte_end":49274,"line_start":1065,"line_end":1065,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(599, hist.quantile_below(599), hist.quantile_below(599), 0, 1))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":49279,"byte_end":49375,"line_start":1066,"line_end":1066,"column_start":5,"column_end":101}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":49380,"byte_end":49386,"line_start":1067,"line_end":1067,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":49391,"byte_end":49406,"line_start":1068,"line_end":1068,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":49411,"byte_end":49431,"line_start":1069,"line_end":1069,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(699, hist.quantile_below(699), hist.quantile_below(699), 0, 0))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":49436,"byte_end":49532,"line_start":1070,"line_end":1070,"column_start":5,"column_end":101}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":49537,"byte_end":49543,"line_start":1071,"line_end":1071,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":49548,"byte_end":49563,"line_start":1072,"line_end":1072,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":49568,"byte_end":49588,"line_start":1073,"line_end":1073,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(799, hist.quantile_below(799), hist.quantile_below(799), 0, 0))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":49593,"byte_end":49689,"line_start":1074,"line_end":1074,"column_start":5,"column_end":101}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":49694,"byte_end":49700,"line_start":1075,"line_end":1075,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":49705,"byte_end":49720,"line_start":1076,"line_end":1076,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":49725,"byte_end":49745,"line_start":1077,"line_end":1077,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(899, hist.quantile_below(899), hist.quantile_below(899), 0, 2))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":49750,"byte_end":49846,"line_start":1078,"line_end":1078,"column_start":5,"column_end":101}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":49851,"byte_end":49857,"line_start":1079,"line_end":1079,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(perc.next(), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":49862,"byte_end":49896,"line_start":1080,"line_end":1080,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":49901,"byte_end":49908,"line_start":1081,"line_end":1081,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":51407,"byte_end":51415,"line_start":1120,"line_end":1120,"column_start":12,"column_end":20},"name":"iter_log","qualname":"<Histogram<T>>::iter_log","value":"fn iter_log<'_>(&'_ Self, u64, f64) -> HistogramIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterates through histogram values at logarithmically increasing levels. The iteration is\n performed in steps that start at `start` and increase exponentially according to `exp`. The\n iterator terminates when all recorded histogram values are exhausted.","sig":null,"attributes":[{"value":"/ Iterates through histogram values at logarithmically increasing levels. The iteration is","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":50064,"byte_end":50156,"line_start":1086,"line_end":1086,"column_start":5,"column_end":97}},{"value":"/ performed in steps that start at `start` and increase exponentially according to `exp`. The","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":50161,"byte_end":50256,"line_start":1087,"line_end":1087,"column_start":5,"column_end":100}},{"value":"/ iterator terminates when all recorded histogram values are exhausted.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":50261,"byte_end":50334,"line_start":1088,"line_end":1088,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":50339,"byte_end":50342,"line_start":1089,"line_end":1089,"column_start":5,"column_end":8}},{"value":"/ The iterator yields an `iterators::IterationValue` struct.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":50347,"byte_end":50409,"line_start":1090,"line_end":1090,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":50414,"byte_end":50417,"line_start":1091,"line_end":1091,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":50422,"byte_end":50429,"line_start":1092,"line_end":1092,"column_start":5,"column_end":12}},{"value":"/ use hdrhistogram::Histogram;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":50434,"byte_end":50466,"line_start":1093,"line_end":1093,"column_start":5,"column_end":37}},{"value":"/ use hdrhistogram::iterators::IterationValue;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":50471,"byte_end":50519,"line_start":1094,"line_end":1094,"column_start":5,"column_end":53}},{"value":"/ let mut hist = Histogram::<u64>::new_with_max(1000, 3).unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":50524,"byte_end":50592,"line_start":1095,"line_end":1095,"column_start":5,"column_end":73}},{"value":"/ hist += 100;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":50597,"byte_end":50613,"line_start":1096,"line_end":1096,"column_start":5,"column_end":21}},{"value":"/ hist += 500;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":50618,"byte_end":50634,"line_start":1097,"line_end":1097,"column_start":5,"column_end":21}},{"value":"/ hist += 800;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":50639,"byte_end":50655,"line_start":1098,"line_end":1098,"column_start":5,"column_end":21}},{"value":"/ hist += 850;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":50660,"byte_end":50676,"line_start":1099,"line_end":1099,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":50681,"byte_end":50684,"line_start":1100,"line_end":1100,"column_start":5,"column_end":8}},{"value":"/ let mut perc = hist.iter_log(1, 10.0);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":50689,"byte_end":50731,"line_start":1101,"line_end":1101,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":50736,"byte_end":50751,"line_start":1102,"line_end":1102,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":50756,"byte_end":50776,"line_start":1103,"line_end":1103,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(0, hist.quantile_below(0), hist.quantile_below(0), 0, 0))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":50781,"byte_end":50871,"line_start":1104,"line_end":1104,"column_start":5,"column_end":95}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":50876,"byte_end":50882,"line_start":1105,"line_end":1105,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":50887,"byte_end":50902,"line_start":1106,"line_end":1106,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":50907,"byte_end":50927,"line_start":1107,"line_end":1107,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(9, hist.quantile_below(9), hist.quantile_below(9), 0, 0))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":50932,"byte_end":51022,"line_start":1108,"line_end":1108,"column_start":5,"column_end":95}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":51027,"byte_end":51033,"line_start":1109,"line_end":1109,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":51038,"byte_end":51053,"line_start":1110,"line_end":1110,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":51058,"byte_end":51078,"line_start":1111,"line_end":1111,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(99, hist.quantile_below(99), hist.quantile_below(99), 0, 0))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":51083,"byte_end":51176,"line_start":1112,"line_end":1112,"column_start":5,"column_end":98}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":51181,"byte_end":51187,"line_start":1113,"line_end":1113,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":51192,"byte_end":51207,"line_start":1114,"line_end":1114,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":51212,"byte_end":51232,"line_start":1115,"line_end":1115,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(999, hist.quantile_below(999), hist.quantile_below(999), 0, 4))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":51237,"byte_end":51333,"line_start":1116,"line_end":1116,"column_start":5,"column_end":101}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":51338,"byte_end":51344,"line_start":1117,"line_end":1117,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(perc.next(), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":51349,"byte_end":51383,"line_start":1118,"line_end":1118,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":51388,"byte_end":51395,"line_start":1119,"line_end":1119,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52919,"byte_end":52932,"line_start":1158,"line_end":1158,"column_start":12,"column_end":25},"name":"iter_recorded","qualname":"<Histogram<T>>::iter_recorded","value":"fn iter_recorded<'_>(&'_ Self) -> HistogramIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterates through all recorded histogram values using the finest granularity steps supported\n by the underlying representation. The iteration steps through all non-zero recorded value\n counts, and terminates when all recorded histogram values are exhausted.","sig":null,"attributes":[{"value":"/ Iterates through all recorded histogram values using the finest granularity steps supported","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":51559,"byte_end":51654,"line_start":1124,"line_end":1124,"column_start":5,"column_end":100}},{"value":"/ by the underlying representation. The iteration steps through all non-zero recorded value","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":51659,"byte_end":51752,"line_start":1125,"line_end":1125,"column_start":5,"column_end":98}},{"value":"/ counts, and terminates when all recorded histogram values are exhausted.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":51757,"byte_end":51833,"line_start":1126,"line_end":1126,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":51838,"byte_end":51841,"line_start":1127,"line_end":1127,"column_start":5,"column_end":8}},{"value":"/ The iterator yields an `iterators::IterationValue` struct.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":51846,"byte_end":51908,"line_start":1128,"line_end":1128,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":51913,"byte_end":51916,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":51921,"byte_end":51928,"line_start":1130,"line_end":1130,"column_start":5,"column_end":12}},{"value":"/ use hdrhistogram::Histogram;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":51933,"byte_end":51965,"line_start":1131,"line_end":1131,"column_start":5,"column_end":37}},{"value":"/ use hdrhistogram::iterators::IterationValue;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":51970,"byte_end":52018,"line_start":1132,"line_end":1132,"column_start":5,"column_end":53}},{"value":"/ let mut hist = Histogram::<u64>::new_with_max(1000, 3).unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52023,"byte_end":52091,"line_start":1133,"line_end":1133,"column_start":5,"column_end":73}},{"value":"/ hist += 100;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52096,"byte_end":52112,"line_start":1134,"line_end":1134,"column_start":5,"column_end":21}},{"value":"/ hist += 500;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52117,"byte_end":52133,"line_start":1135,"line_end":1135,"column_start":5,"column_end":21}},{"value":"/ hist += 800;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52138,"byte_end":52154,"line_start":1136,"line_end":1136,"column_start":5,"column_end":21}},{"value":"/ hist += 850;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52159,"byte_end":52175,"line_start":1137,"line_end":1137,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52180,"byte_end":52183,"line_start":1138,"line_end":1138,"column_start":5,"column_end":8}},{"value":"/ let mut perc = hist.iter_recorded();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52188,"byte_end":52228,"line_start":1139,"line_end":1139,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52233,"byte_end":52248,"line_start":1140,"line_end":1140,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52253,"byte_end":52273,"line_start":1141,"line_end":1141,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(100, hist.quantile_below(100), hist.quantile_below(100), 1, 1))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52278,"byte_end":52374,"line_start":1142,"line_end":1142,"column_start":5,"column_end":101}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52379,"byte_end":52385,"line_start":1143,"line_end":1143,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52390,"byte_end":52405,"line_start":1144,"line_end":1144,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52410,"byte_end":52430,"line_start":1145,"line_end":1145,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(500, hist.quantile_below(500), hist.quantile_below(500), 1, 1))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52435,"byte_end":52531,"line_start":1146,"line_end":1146,"column_start":5,"column_end":101}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52536,"byte_end":52542,"line_start":1147,"line_end":1147,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52547,"byte_end":52562,"line_start":1148,"line_end":1148,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52567,"byte_end":52587,"line_start":1149,"line_end":1149,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(800, hist.quantile_below(800), hist.quantile_below(800), 1, 1))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52592,"byte_end":52688,"line_start":1150,"line_end":1150,"column_start":5,"column_end":101}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52693,"byte_end":52699,"line_start":1151,"line_end":1151,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52704,"byte_end":52719,"line_start":1152,"line_end":1152,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52724,"byte_end":52744,"line_start":1153,"line_end":1153,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(850, hist.quantile_below(850), hist.quantile_below(850), 1, 1))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52749,"byte_end":52845,"line_start":1154,"line_end":1154,"column_start":5,"column_end":101}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52850,"byte_end":52856,"line_start":1155,"line_end":1155,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(perc.next(), None);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52861,"byte_end":52895,"line_start":1156,"line_end":1156,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":52900,"byte_end":52907,"line_start":1157,"line_end":1157,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":55299,"byte_end":55307,"line_start":1217,"line_end":1217,"column_start":12,"column_end":20},"name":"iter_all","qualname":"<Histogram<T>>::iter_all","value":"fn iter_all<'_>(&'_ Self) -> HistogramIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterates through all histogram values using the finest granularity steps supported by the\n underlying representation. The iteration steps through all possible unit value levels,\n regardless of whether or not there were recorded values for that value level, and\n terminates when all recorded histogram values are exhausted.","sig":null,"attributes":[{"value":"/ Iterates through all histogram values using the finest granularity steps supported by the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":53049,"byte_end":53142,"line_start":1162,"line_end":1162,"column_start":5,"column_end":98}},{"value":"/ underlying representation. The iteration steps through all possible unit value levels,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":53147,"byte_end":53237,"line_start":1163,"line_end":1163,"column_start":5,"column_end":95}},{"value":"/ regardless of whether or not there were recorded values for that value level, and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":53242,"byte_end":53327,"line_start":1164,"line_end":1164,"column_start":5,"column_end":90}},{"value":"/ terminates when all recorded histogram values are exhausted.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":53332,"byte_end":53396,"line_start":1165,"line_end":1165,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":53401,"byte_end":53404,"line_start":1166,"line_end":1166,"column_start":5,"column_end":8}},{"value":"/ The iterator yields an `iterators::IterationValue` struct.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":53409,"byte_end":53471,"line_start":1167,"line_end":1167,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":53476,"byte_end":53479,"line_start":1168,"line_end":1168,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":53484,"byte_end":53491,"line_start":1169,"line_end":1169,"column_start":5,"column_end":12}},{"value":"/ use hdrhistogram::Histogram;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":53496,"byte_end":53528,"line_start":1170,"line_end":1170,"column_start":5,"column_end":37}},{"value":"/ use hdrhistogram::iterators::IterationValue;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":53533,"byte_end":53581,"line_start":1171,"line_end":1171,"column_start":5,"column_end":53}},{"value":"/ let mut hist = Histogram::<u64>::new_with_max(10, 1).unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":53586,"byte_end":53652,"line_start":1172,"line_end":1172,"column_start":5,"column_end":71}},{"value":"/ hist += 1;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":53657,"byte_end":53671,"line_start":1173,"line_end":1173,"column_start":5,"column_end":19}},{"value":"/ hist += 5;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":53676,"byte_end":53690,"line_start":1174,"line_end":1174,"column_start":5,"column_end":19}},{"value":"/ hist += 8;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":53695,"byte_end":53709,"line_start":1175,"line_end":1175,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":53714,"byte_end":53717,"line_start":1176,"line_end":1176,"column_start":5,"column_end":8}},{"value":"/ let mut perc = hist.iter_all();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":53722,"byte_end":53757,"line_start":1177,"line_end":1177,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(perc.next(), Some(IterationValue::new(0, 0.0, 0.0, 0, 0)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":53762,"byte_end":53836,"line_start":1178,"line_end":1178,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":53841,"byte_end":53856,"line_start":1179,"line_end":1179,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":53861,"byte_end":53881,"line_start":1180,"line_end":1180,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(1, hist.quantile_below(1), hist.quantile_below(1), 1, 1))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":53886,"byte_end":53976,"line_start":1181,"line_end":1181,"column_start":5,"column_end":95}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":53981,"byte_end":53987,"line_start":1182,"line_end":1182,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":53992,"byte_end":54007,"line_start":1183,"line_end":1183,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54012,"byte_end":54032,"line_start":1184,"line_end":1184,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(2, hist.quantile_below(2), hist.quantile_below(2), 0, 0))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54037,"byte_end":54127,"line_start":1185,"line_end":1185,"column_start":5,"column_end":95}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54132,"byte_end":54138,"line_start":1186,"line_end":1186,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54143,"byte_end":54158,"line_start":1187,"line_end":1187,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54163,"byte_end":54183,"line_start":1188,"line_end":1188,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(3, hist.quantile_below(3), hist.quantile_below(3), 0, 0))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54188,"byte_end":54278,"line_start":1189,"line_end":1189,"column_start":5,"column_end":95}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54283,"byte_end":54289,"line_start":1190,"line_end":1190,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54294,"byte_end":54309,"line_start":1191,"line_end":1191,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54314,"byte_end":54334,"line_start":1192,"line_end":1192,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(4, hist.quantile_below(4), hist.quantile_below(4), 0, 0))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54339,"byte_end":54429,"line_start":1193,"line_end":1193,"column_start":5,"column_end":95}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54434,"byte_end":54440,"line_start":1194,"line_end":1194,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54445,"byte_end":54460,"line_start":1195,"line_end":1195,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54465,"byte_end":54485,"line_start":1196,"line_end":1196,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(5, hist.quantile_below(5), hist.quantile_below(5), 1, 1))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54490,"byte_end":54580,"line_start":1197,"line_end":1197,"column_start":5,"column_end":95}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54585,"byte_end":54591,"line_start":1198,"line_end":1198,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54596,"byte_end":54611,"line_start":1199,"line_end":1199,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54616,"byte_end":54636,"line_start":1200,"line_end":1200,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(6, hist.quantile_below(6), hist.quantile_below(6), 0, 0))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54641,"byte_end":54731,"line_start":1201,"line_end":1201,"column_start":5,"column_end":95}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54736,"byte_end":54742,"line_start":1202,"line_end":1202,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54747,"byte_end":54762,"line_start":1203,"line_end":1203,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54767,"byte_end":54787,"line_start":1204,"line_end":1204,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(7, hist.quantile_below(7), hist.quantile_below(7), 0, 0))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54792,"byte_end":54882,"line_start":1205,"line_end":1205,"column_start":5,"column_end":95}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54887,"byte_end":54893,"line_start":1206,"line_end":1206,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54898,"byte_end":54913,"line_start":1207,"line_end":1207,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54918,"byte_end":54938,"line_start":1208,"line_end":1208,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(8, hist.quantile_below(8), hist.quantile_below(8), 1, 1))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":54943,"byte_end":55033,"line_start":1209,"line_end":1209,"column_start":5,"column_end":95}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":55038,"byte_end":55044,"line_start":1210,"line_end":1210,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":55049,"byte_end":55064,"line_start":1211,"line_end":1211,"column_start":5,"column_end":20}},{"value":"/     perc.next(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":55069,"byte_end":55089,"line_start":1212,"line_end":1212,"column_start":5,"column_end":25}},{"value":"/     Some(IterationValue::new(9, hist.quantile_below(9), hist.quantile_below(9), 0, 0))","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":55094,"byte_end":55184,"line_start":1213,"line_end":1213,"column_start":5,"column_end":95}},{"value":"/ );","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":55189,"byte_end":55195,"line_start":1214,"line_end":1214,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(perc.next(), Some(IterationValue::new(10, 1.0, 1.0, 0, 0)));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":55200,"byte_end":55275,"line_start":1215,"line_end":1215,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":55280,"byte_end":55287,"line_start":1216,"line_end":1216,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":55786,"byte_end":55789,"line_start":1227,"line_end":1227,"column_start":12,"column_end":15},"name":"min","qualname":"<Histogram<T>>::min","value":"fn min<'_>(&'_ Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the lowest recorded value level in the histogram.\n If the histogram has no recorded values, the value returned will be 0.\n","sig":null,"attributes":[{"value":"/ Get the lowest recorded value level in the histogram.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":55638,"byte_end":55695,"line_start":1225,"line_end":1225,"column_start":5,"column_end":62}},{"value":"/ If the histogram has no recorded values, the value returned will be 0.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":55700,"byte_end":55774,"line_start":1226,"line_end":1226,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":56221,"byte_end":56224,"line_start":1242,"line_end":1242,"column_start":12,"column_end":15},"name":"max","qualname":"<Histogram<T>>::max","value":"fn max<'_>(&'_ Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the highest recorded value level in the histogram.\n If the histogram has no recorded values, the value returned is undefined.\n","sig":null,"attributes":[{"value":"/ Get the highest recorded value level in the histogram.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":56069,"byte_end":56127,"line_start":1240,"line_end":1240,"column_start":5,"column_end":63}},{"value":"/ If the histogram has no recorded values, the value returned is undefined.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":56132,"byte_end":56209,"line_start":1241,"line_end":1241,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":56569,"byte_end":56575,"line_start":1252,"line_end":1252,"column_start":12,"column_end":18},"name":"min_nz","qualname":"<Histogram<T>>::min_nz","value":"fn min_nz<'_>(&'_ Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the lowest recorded non-zero value level in the histogram.\n If the histogram has no recorded values, the value returned is `u64::max_value()`.\n","sig":null,"attributes":[{"value":"/ Get the lowest recorded non-zero value level in the histogram.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":56400,"byte_end":56466,"line_start":1250,"line_end":1250,"column_start":5,"column_end":71}},{"value":"/ If the histogram has no recorded values, the value returned is `u64::max_value()`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":56471,"byte_end":56557,"line_start":1251,"line_end":1251,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":56988,"byte_end":56998,"line_start":1263,"line_end":1263,"column_start":12,"column_end":22},"name":"equivalent","qualname":"<Histogram<T>>::equivalent","value":"fn equivalent<'_>(&'_ Self, u64, u64) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Determine if two values are equivalent with the histogram's resolution. Equivalent here\n means that value samples recorded for any two equivalent values are counted in a common\n total count.\n","sig":null,"attributes":[{"value":"/ Determine if two values are equivalent with the histogram's resolution. Equivalent here","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":56768,"byte_end":56859,"line_start":1260,"line_end":1260,"column_start":5,"column_end":96}},{"value":"/ means that value samples recorded for any two equivalent values are counted in a common","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":56864,"byte_end":56955,"line_start":1261,"line_end":1261,"column_start":5,"column_end":96}},{"value":"/ total count.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":56960,"byte_end":56976,"line_start":1262,"line_end":1262,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":57210,"byte_end":57214,"line_start":1268,"line_end":1268,"column_start":12,"column_end":16},"name":"mean","qualname":"<Histogram<T>>::mean","value":"fn mean<'_>(&'_ Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Get the computed mean value of all recorded values in the histogram.\n","sig":null,"attributes":[{"value":"/ Get the computed mean value of all recorded values in the histogram.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":57126,"byte_end":57198,"line_start":1267,"line_end":1267,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":57665,"byte_end":57670,"line_start":1282,"line_end":1282,"column_start":12,"column_end":17},"name":"stdev","qualname":"<Histogram<T>>::stdev","value":"fn stdev<'_>(&'_ Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Get the computed standard deviation of all recorded values in the histogram\n","sig":null,"attributes":[{"value":"/ Get the computed standard deviation of all recorded values in the histogram","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":57574,"byte_end":57653,"line_start":1281,"line_end":1281,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":58296,"byte_end":58315,"line_start":1300,"line_end":1300,"column_start":12,"column_end":31},"name":"value_at_percentile","qualname":"<Histogram<T>>::value_at_percentile","value":"fn value_at_percentile<'_>(&'_ Self, f64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the value at a given percentile.","sig":null,"attributes":[{"value":"/ Get the value at a given percentile.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":58095,"byte_end":58135,"line_start":1296,"line_end":1296,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":58140,"byte_end":58143,"line_start":1297,"line_end":1297,"column_start":5,"column_end":8}},{"value":"/ This is simply `value_at_quantile` multiplied by 100.0. For best floating-point precision,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":58148,"byte_end":58242,"line_start":1298,"line_end":1298,"column_start":5,"column_end":99}},{"value":"/ use `value_at_quantile` directly.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":58247,"byte_end":58284,"line_start":1299,"line_end":1299,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":59060,"byte_end":59077,"line_start":1315,"line_end":1315,"column_start":12,"column_end":29},"name":"value_at_quantile","qualname":"<Histogram<T>>::value_at_quantile","value":"fn value_at_quantile<'_>(&'_ Self, f64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the value at a given quantile.","sig":null,"attributes":[{"value":"/ Get the value at a given quantile.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":58411,"byte_end":58449,"line_start":1304,"line_end":1304,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":58454,"byte_end":58457,"line_start":1305,"line_end":1305,"column_start":5,"column_end":8}},{"value":"/ When the given quantile is > 0.0, the value returned is the value that the given","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":58462,"byte_end":58546,"line_start":1306,"line_end":1306,"column_start":5,"column_end":89}},{"value":"/ percentage of the overall recorded value entries in the histogram are either smaller than","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":58551,"byte_end":58644,"line_start":1307,"line_end":1307,"column_start":5,"column_end":98}},{"value":"/ or equivalent to. When the given quantile is 0.0, the value returned is the value that","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":58649,"byte_end":58739,"line_start":1308,"line_end":1308,"column_start":5,"column_end":95}},{"value":"/ all value entries in the histogram are either larger than or equivalent to.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":58744,"byte_end":58823,"line_start":1309,"line_end":1309,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":58828,"byte_end":58831,"line_start":1310,"line_end":1310,"column_start":5,"column_end":8}},{"value":"/ Two values are considered \"equivalent\" if `self.equivalent` would return true.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":58836,"byte_end":58918,"line_start":1311,"line_end":1311,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":58923,"byte_end":58926,"line_start":1312,"line_end":1312,"column_start":5,"column_end":8}},{"value":"/ If the total count of the histogram has exceeded `u64::max_value()`, this will return","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":58931,"byte_end":59020,"line_start":1313,"line_end":1313,"column_start":5,"column_end":94}},{"value":"/ inaccurate results.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":59025,"byte_end":59048,"line_start":1314,"line_end":1314,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":60414,"byte_end":60430,"line_start":1350,"line_end":1350,"column_start":12,"column_end":28},"name":"percentile_below","qualname":"<Histogram<T>>::percentile_below","value":"fn percentile_below<'_>(&'_ Self, u64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Get the percentile of samples at and below a given value.","sig":null,"attributes":[{"value":"/ Get the percentile of samples at and below a given value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":60198,"byte_end":60259,"line_start":1346,"line_end":1346,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":60264,"byte_end":60267,"line_start":1347,"line_end":1347,"column_start":5,"column_end":8}},{"value":"/ This is simply `quantile_below* multiplied by 100.0. For best floating-point precision, use","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":60272,"byte_end":60367,"line_start":1348,"line_end":1348,"column_start":5,"column_end":100}},{"value":"/ `quantile_below` directly.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":60372,"byte_end":60402,"line_start":1349,"line_end":1349,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":61094,"byte_end":61108,"line_start":1366,"line_end":1366,"column_start":12,"column_end":26},"name":"quantile_below","qualname":"<Histogram<T>>::quantile_below","value":"fn quantile_below<'_>(&'_ Self, u64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Get the quantile of samples at or below a given value.","sig":null,"attributes":[{"value":"/ Get the quantile of samples at or below a given value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":60513,"byte_end":60571,"line_start":1354,"line_end":1354,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":60576,"byte_end":60579,"line_start":1355,"line_end":1355,"column_start":5,"column_end":8}},{"value":"/ The value returned is the quantile of values recorded in the histogram that are","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":60584,"byte_end":60667,"line_start":1356,"line_end":1356,"column_start":5,"column_end":88}},{"value":"/ smaller than or equivalent to the given value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":60672,"byte_end":60722,"line_start":1357,"line_end":1357,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":60727,"byte_end":60730,"line_start":1358,"line_end":1358,"column_start":5,"column_end":8}},{"value":"/ Two values are considered \"equivalent\" if `self.equivalent` would return true.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":60735,"byte_end":60817,"line_start":1359,"line_end":1359,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":60822,"byte_end":60825,"line_start":1360,"line_end":1360,"column_start":5,"column_end":8}},{"value":"/ If the value is larger than the maximum representable value, it will be clamped to the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":60830,"byte_end":60920,"line_start":1361,"line_end":1361,"column_start":5,"column_end":95}},{"value":"/ max representable value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":60925,"byte_end":60953,"line_start":1362,"line_end":1362,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":60958,"byte_end":60961,"line_start":1363,"line_end":1363,"column_start":5,"column_end":8}},{"value":"/ If the total count of the histogram has reached `u64::max_value()`, this will return","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":60966,"byte_end":61054,"line_start":1364,"line_end":1364,"column_start":5,"column_end":93}},{"value":"/ inaccurate results.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":61059,"byte_end":61082,"line_start":1365,"line_end":1365,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":62451,"byte_end":62464,"line_start":1392,"line_end":1392,"column_start":12,"column_end":25},"name":"count_between","qualname":"<Histogram<T>>::count_between","value":"fn count_between<'_>(&'_ Self, u64, u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the count of recorded values within a range of value levels (inclusive to within the\n histogram's resolution).","sig":null,"attributes":[{"value":"/ Get the count of recorded values within a range of value levels (inclusive to within the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":61653,"byte_end":61745,"line_start":1379,"line_end":1379,"column_start":5,"column_end":97}},{"value":"/ histogram's resolution).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":61750,"byte_end":61778,"line_start":1380,"line_end":1380,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":61783,"byte_end":61786,"line_start":1381,"line_end":1381,"column_start":5,"column_end":8}},{"value":"/ `low` gives the lower value bound on the range for which to provide the recorded count.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":61791,"byte_end":61882,"line_start":1382,"line_end":1382,"column_start":5,"column_end":96}},{"value":"/ Will be rounded down with `lowest_equivalent`. Similarly, `high` gives the higher value","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":61887,"byte_end":61978,"line_start":1383,"line_end":1383,"column_start":5,"column_end":96}},{"value":"/ bound on the range, and will be rounded up with `highest_equivalent`. The function returns","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":61983,"byte_end":62077,"line_start":1384,"line_end":1384,"column_start":5,"column_end":99}},{"value":"/ the total count of values recorded in the histogram within the value range that is `>=","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":62082,"byte_end":62172,"line_start":1385,"line_end":1385,"column_start":5,"column_end":95}},{"value":"/ lowest_equivalent(low)` and `<= highest_equivalent(high)`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":62177,"byte_end":62239,"line_start":1386,"line_end":1386,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":62244,"byte_end":62247,"line_start":1387,"line_end":1387,"column_start":5,"column_end":8}},{"value":"/ If either value is larger than the maximum representable value, it will be clamped to the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":62252,"byte_end":62345,"line_start":1388,"line_end":1388,"column_start":5,"column_end":98}},{"value":"/ max representable value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":62350,"byte_end":62378,"line_start":1389,"line_end":1389,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":62383,"byte_end":62386,"line_start":1390,"line_end":1390,"column_start":5,"column_end":8}},{"value":"/ The count will saturate at u64::max_value().","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":62391,"byte_end":62439,"line_start":1391,"line_end":1391,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":63369,"byte_end":63377,"line_start":1409,"line_end":1409,"column_start":12,"column_end":20},"name":"count_at","qualname":"<Histogram<T>>::count_at","value":"fn count_at<'_>(&'_ Self, u64) -> T","parent":null,"children":[],"decl_id":null,"docs":" Get the count of recorded values at a specific value (to within the histogram resolution at\n the value level).","sig":null,"attributes":[{"value":"/ Get the count of recorded values at a specific value (to within the histogram resolution at","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":62908,"byte_end":63003,"line_start":1401,"line_end":1401,"column_start":5,"column_end":100}},{"value":"/ the value level).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":63008,"byte_end":63029,"line_start":1402,"line_end":1402,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":63034,"byte_end":63037,"line_start":1403,"line_end":1403,"column_start":5,"column_end":8}},{"value":"/ The count is computed across values recorded in the histogram that are within the value","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":63042,"byte_end":63133,"line_start":1404,"line_end":1404,"column_start":5,"column_end":96}},{"value":"/ range that is `>= lowest_equivalent(value)` and `<= highest_equivalent(value)`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":63138,"byte_end":63221,"line_start":1405,"line_end":1405,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":63226,"byte_end":63229,"line_start":1406,"line_end":1406,"column_start":5,"column_end":8}},{"value":"/ If the value is larger than the maximum representable value, it will be clamped to the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":63234,"byte_end":63324,"line_start":1407,"line_end":1407,"column_start":5,"column_end":95}},{"value":"/ max representable value.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":63329,"byte_end":63357,"line_start":1408,"line_end":1408,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":63987,"byte_end":64004,"line_start":1421,"line_end":1421,"column_start":12,"column_end":29},"name":"lowest_equivalent","qualname":"<Histogram<T>>::lowest_equivalent","value":"fn lowest_equivalent<'_>(&'_ Self, u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the lowest value that is equivalent to the given value within the histogram's\n resolution. Equivalent here means that value samples recorded for any two equivalent values\n are counted in a common total count.\n","sig":null,"attributes":[{"value":"/ Get the lowest value that is equivalent to the given value within the histogram's","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":63745,"byte_end":63830,"line_start":1418,"line_end":1418,"column_start":5,"column_end":90}},{"value":"/ resolution. Equivalent here means that value samples recorded for any two equivalent values","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":63835,"byte_end":63930,"line_start":1419,"line_end":1419,"column_start":5,"column_end":100}},{"value":"/ are counted in a common total count.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":63935,"byte_end":63975,"line_start":1420,"line_end":1420,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":64547,"byte_end":64565,"line_start":1432,"line_end":1432,"column_start":12,"column_end":30},"name":"highest_equivalent","qualname":"<Histogram<T>>::highest_equivalent","value":"fn highest_equivalent<'_>(&'_ Self, u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the highest value that is equivalent to the given value within the histogram's\n resolution. Equivalent here means that value samples recorded for any two equivalent values\n are counted in a common total count.","sig":null,"attributes":[{"value":"/ Get the highest value that is equivalent to the given value within the histogram's","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":64228,"byte_end":64314,"line_start":1427,"line_end":1427,"column_start":5,"column_end":91}},{"value":"/ resolution. Equivalent here means that value samples recorded for any two equivalent values","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":64319,"byte_end":64414,"line_start":1428,"line_end":1428,"column_start":5,"column_end":100}},{"value":"/ are counted in a common total count.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":64419,"byte_end":64459,"line_start":1429,"line_end":1429,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":64464,"byte_end":64467,"line_start":1430,"line_end":1430,"column_start":5,"column_end":8}},{"value":"/ Note that the return value is capped at `u64::max_value()`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":64472,"byte_end":64535,"line_start":1431,"line_end":1431,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":65072,"byte_end":65089,"line_start":1445,"line_end":1445,"column_start":12,"column_end":29},"name":"median_equivalent","qualname":"<Histogram<T>>::median_equivalent","value":"fn median_equivalent<'_>(&'_ Self, u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get a value that lies in the middle (rounded up) of the range of values equivalent the\n given value. Equivalent here means that value samples recorded for any two equivalent\n values are counted in a common total count.","sig":null,"attributes":[{"value":"/ Get a value that lies in the middle (rounded up) of the range of values equivalent the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":64748,"byte_end":64838,"line_start":1440,"line_end":1440,"column_start":5,"column_end":95}},{"value":"/ given value. Equivalent here means that value samples recorded for any two equivalent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":64843,"byte_end":64932,"line_start":1441,"line_end":1441,"column_start":5,"column_end":94}},{"value":"/ values are counted in a common total count.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":64937,"byte_end":64984,"line_start":1442,"line_end":1442,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":64989,"byte_end":64992,"line_start":1443,"line_end":1443,"column_start":5,"column_end":8}},{"value":"/ Note that the return value is capped at `u64::max_value()`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":64997,"byte_end":65060,"line_start":1444,"line_end":1444,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":65687,"byte_end":65706,"line_start":1457,"line_end":1457,"column_start":12,"column_end":31},"name":"next_non_equivalent","qualname":"<Histogram<T>>::next_non_equivalent","value":"fn next_non_equivalent<'_>(&'_ Self, u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the next value that is *not* equivalent to the given value within the histogram's\n resolution. Equivalent means that value samples recorded for any two equivalent values are\n counted in a common total count.","sig":null,"attributes":[{"value":"/ Get the next value that is *not* equivalent to the given value within the histogram's","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":65370,"byte_end":65459,"line_start":1452,"line_end":1452,"column_start":5,"column_end":94}},{"value":"/ resolution. Equivalent means that value samples recorded for any two equivalent values are","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":65464,"byte_end":65558,"line_start":1453,"line_end":1453,"column_start":5,"column_end":99}},{"value":"/ counted in a common total count.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":65563,"byte_end":65599,"line_start":1454,"line_end":1454,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":65604,"byte_end":65607,"line_start":1455,"line_end":1455,"column_start":5,"column_end":8}},{"value":"/ Note that the return value is capped at `u64::max_value()`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":65612,"byte_end":65675,"line_start":1456,"line_end":1456,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":66117,"byte_end":66133,"line_start":1465,"line_end":1465,"column_start":12,"column_end":28},"name":"equivalent_range","qualname":"<Histogram<T>>::equivalent_range","value":"fn equivalent_range<'_>(&'_ Self, u64) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the size (in value units) of the range of values that are equivalent to the given value\n within the histogram's resolution. Equivalent here means that value samples recorded for\n any two equivalent values are counted in a common total count.\n","sig":null,"attributes":[{"value":"/ Get the size (in value units) of the range of values that are equivalent to the given value","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":65842,"byte_end":65937,"line_start":1462,"line_end":1462,"column_start":5,"column_end":100}},{"value":"/ within the histogram's resolution. Equivalent here means that value samples recorded for","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":65942,"byte_end":66034,"line_start":1463,"line_end":1463,"column_start":5,"column_end":97}},{"value":"/ any two equivalent values are counted in a common total count.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":66039,"byte_end":66105,"line_start":1464,"line_end":1464,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":66368,"byte_end":66377,"line_start":1472,"line_end":1472,"column_start":12,"column_end":21},"name":"into_sync","qualname":"<Histogram<T>>::into_sync","value":"fn into_sync(Self) -> SyncHistogram<T>","parent":null,"children":[],"decl_id":null,"docs":" Turn this histogram into a [`SyncHistogram`].\n","sig":null,"attributes":[{"value":"/ Turn this histogram into a [`SyncHistogram`].","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":66278,"byte_end":66327,"line_start":1470,"line_end":1470,"column_start":5,"column_end":54}},{"value":"cfg(feature = \"sync\")","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":66332,"byte_end":66356,"line_start":1471,"line_end":1471,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":78201,"byte_end":78206,"line_start":1744,"line_end":1744,"column_start":8,"column_end":13},"name":"clone","qualname":"<Histogram<T> as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2883},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":78441,"byte_end":78451,"line_start":1753,"line_end":1753,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<Histogram<T> as std::ops::AddAssign>::add_assign","value":"fn add_assign<'_>(&'_ mut Self, &'a Histogram<T>)","parent":{"krate":2,"index":3362},"children":[],"decl_id":{"krate":2,"index":3364},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":78602,"byte_end":78612,"line_start":1759,"line_end":1759,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<Histogram<T> as std::ops::AddAssign>::add_assign","value":"fn add_assign<'_>(&'_ mut Self, Histogram<T>)","parent":{"krate":2,"index":3362},"children":[],"decl_id":{"krate":2,"index":3364},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":78761,"byte_end":78764,"line_start":1766,"line_end":1766,"column_start":8,"column_end":11},"name":"sum","qualname":"<Histogram<T> as std::iter::Sum>::sum","value":"fn sum<I>(I) -> Self where I: Iterator<Item = Self>","parent":{"krate":2,"index":8364},"children":[],"decl_id":{"krate":2,"index":8366},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":79205,"byte_end":79215,"line_start":1783,"line_end":1783,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<Histogram<T> as std::ops::SubAssign>::sub_assign","value":"fn sub_assign<'_>(&'_ mut Self, &'a Histogram<T>)","parent":{"krate":2,"index":3366},"children":[],"decl_id":{"krate":2,"index":3368},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":79369,"byte_end":79379,"line_start":1789,"line_end":1789,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"<Histogram<T> as std::ops::SubAssign>::sub_assign","value":"fn sub_assign<'_>(&'_ mut Self, Histogram<T>)","parent":{"krate":2,"index":3366},"children":[],"decl_id":{"krate":2,"index":3368},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":79567,"byte_end":79577,"line_start":1796,"line_end":1796,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<Histogram<T> as std::ops::AddAssign>::add_assign","value":"fn add_assign<'_>(&'_ mut Self, u64)","parent":{"krate":2,"index":3362},"children":[],"decl_id":{"krate":2,"index":3364},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":79785,"byte_end":79787,"line_start":1806,"line_end":1806,"column_start":8,"column_end":10},"name":"eq","qualname":"<Histogram<T> as std::cmp::PartialEq>::eq","value":"fn eq<'_, '_>(&'_ Self, &'_ Histogram<F>) -> bool","parent":{"krate":2,"index":2915},"children":[],"decl_id":{"krate":2,"index":2917},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":370},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":108540,"byte_end":108547,"line_start":8,"line_end":8,"column_start":11,"column_end":18},"name":"Counter","qualname":"::core::counter::Counter","value":"Counter: num::Num + num::ToPrimitive + num::FromPrimitive + num::Saturating +\nnum::CheckedSub + num::CheckedAdd + Copy + PartialOrd<Self> + fmt::Debug","parent":null,"children":[{"krate":0,"index":371},{"krate":0,"index":372}],"decl_id":null,"docs":" This trait represents the operations a histogram must be able to perform on the underlying\n counter type. The `ToPrimitive` trait is needed to perform floating point operations on the\n counts (usually for quantiles). The `FromPrimitive` to convert back into an integer count.\n Partial ordering is used for threshholding, also usually in the context of quantiles.\n","sig":null,"attributes":[{"value":"/ This trait represents the operations a histogram must be able to perform on the underlying","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":108154,"byte_end":108248,"line_start":4,"line_end":4,"column_start":1,"column_end":95}},{"value":"/ counter type. The `ToPrimitive` trait is needed to perform floating point operations on the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":108249,"byte_end":108344,"line_start":5,"line_end":5,"column_start":1,"column_end":96}},{"value":"/ counts (usually for quantiles). The `FromPrimitive` to convert back into an integer count.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":108345,"byte_end":108439,"line_start":6,"line_end":6,"column_start":1,"column_end":95}},{"value":"/ Partial ordering is used for threshholding, also usually in the context of quantiles.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":108440,"byte_end":108529,"line_start":7,"line_end":7,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":108762,"byte_end":108768,"line_start":20,"line_end":20,"column_start":8,"column_end":14},"name":"as_f64","qualname":"::core::counter::Counter::as_f64","value":"fn as_f64<'_>(&'_ Self) -> f64","parent":{"krate":0,"index":370},"children":[],"decl_id":null,"docs":" Counter as a f64.\n","sig":null,"attributes":[{"value":"/ Counter as a f64.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":108733,"byte_end":108754,"line_start":19,"line_end":19,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":108817,"byte_end":108823,"line_start":22,"line_end":22,"column_start":8,"column_end":14},"name":"as_u64","qualname":"::core::counter::Counter::as_u64","value":"fn as_u64<'_>(&'_ Self) -> u64","parent":{"krate":0,"index":370},"children":[],"decl_id":null,"docs":" Counter as a u64.\n","sig":null,"attributes":[{"value":"/ Counter as a u64.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":108788,"byte_end":108809,"line_start":21,"line_end":21,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":108885,"byte_end":108891,"line_start":27,"line_end":27,"column_start":8,"column_end":14},"name":"as_f64","qualname":"<u8 as core::counter::Counter>::as_f64","value":"fn as_f64<'_>(&'_ Self) -> f64","parent":{"krate":0,"index":370},"children":[],"decl_id":{"krate":0,"index":371},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":108868,"byte_end":108877,"line_start":26,"line_end":26,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":108960,"byte_end":108966,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"as_u64","qualname":"<u8 as core::counter::Counter>::as_u64","value":"fn as_u64<'_>(&'_ Self) -> u64","parent":{"krate":0,"index":370},"children":[],"decl_id":{"krate":0,"index":372},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":108943,"byte_end":108952,"line_start":30,"line_end":30,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":109061,"byte_end":109067,"line_start":38,"line_end":38,"column_start":8,"column_end":14},"name":"as_f64","qualname":"<u16 as core::counter::Counter>::as_f64","value":"fn as_f64<'_>(&'_ Self) -> f64","parent":{"krate":0,"index":370},"children":[],"decl_id":{"krate":0,"index":371},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":109044,"byte_end":109053,"line_start":37,"line_end":37,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":109136,"byte_end":109142,"line_start":42,"line_end":42,"column_start":8,"column_end":14},"name":"as_u64","qualname":"<u16 as core::counter::Counter>::as_u64","value":"fn as_u64<'_>(&'_ Self) -> u64","parent":{"krate":0,"index":370},"children":[],"decl_id":{"krate":0,"index":372},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":109119,"byte_end":109128,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":109237,"byte_end":109243,"line_start":49,"line_end":49,"column_start":8,"column_end":14},"name":"as_f64","qualname":"<u32 as core::counter::Counter>::as_f64","value":"fn as_f64<'_>(&'_ Self) -> f64","parent":{"krate":0,"index":370},"children":[],"decl_id":{"krate":0,"index":371},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":109220,"byte_end":109229,"line_start":48,"line_end":48,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":109312,"byte_end":109318,"line_start":53,"line_end":53,"column_start":8,"column_end":14},"name":"as_u64","qualname":"<u32 as core::counter::Counter>::as_u64","value":"fn as_u64<'_>(&'_ Self) -> u64","parent":{"krate":0,"index":370},"children":[],"decl_id":{"krate":0,"index":372},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":109295,"byte_end":109304,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":109413,"byte_end":109419,"line_start":60,"line_end":60,"column_start":8,"column_end":14},"name":"as_f64","qualname":"<u64 as core::counter::Counter>::as_f64","value":"fn as_f64<'_>(&'_ Self) -> f64","parent":{"krate":0,"index":370},"children":[],"decl_id":{"krate":0,"index":371},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":109396,"byte_end":109405,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":109484,"byte_end":109490,"line_start":64,"line_end":64,"column_start":8,"column_end":14},"name":"as_u64","qualname":"<u64 as core::counter::Counter>::as_u64","value":"fn as_u64<'_>(&'_ Self) -> u64","parent":{"krate":0,"index":370},"children":[],"decl_id":{"krate":0,"index":372},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":109467,"byte_end":109476,"line_start":63,"line_end":63,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":385},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"errors","qualname":"::errors","value":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","parent":null,"children":[{"krate":0,"index":925},{"krate":0,"index":938},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":946},{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":954},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":959},{"krate":0,"index":960},{"krate":0,"index":962},{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":970},{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":978},{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":986},{"krate":0,"index":988},{"krate":0,"index":989},{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":994},{"krate":0,"index":996},{"krate":0,"index":386}],"decl_id":null,"docs":" Error types used throughout this library\n","sig":null,"attributes":[{"value":"/ Error types used throughout this library","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":109530,"byte_end":109574,"line_start":1,"line_end":1,"column_start":1,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":926},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":109750,"byte_end":109759,"line_start":7,"line_end":7,"column_start":5,"column_end":14},"name":"LowIsZero","qualname":"::errors::CreationError::LowIsZero","value":"CreationError::LowIsZero","parent":{"krate":0,"index":925},"children":[],"decl_id":null,"docs":" Lowest discernible value must be >= 1.\n","sig":null,"attributes":[{"value":"/ Lowest discernible value must be >= 1.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":109703,"byte_end":109745,"line_start":6,"line_end":6,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":928},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":109939,"byte_end":109952,"line_start":10,"line_end":10,"column_start":5,"column_end":18},"name":"LowExceedsMax","qualname":"::errors::CreationError::LowExceedsMax","value":"CreationError::LowExceedsMax","parent":{"krate":0,"index":925},"children":[],"decl_id":null,"docs":" Lowest discernible value must be <= `u64::max_value() / 2` because the highest value is\n a `u64` and the lowest value must be no bigger than half the highest.\n","sig":null,"attributes":[{"value":"/ Lowest discernible value must be <= `u64::max_value() / 2` because the highest value is","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":109765,"byte_end":109856,"line_start":8,"line_end":8,"column_start":5,"column_end":96}},{"value":"/ a `u64` and the lowest value must be no bigger than half the highest.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":109861,"byte_end":109934,"line_start":9,"line_end":9,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":930},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":110139,"byte_end":110159,"line_start":13,"line_end":13,"column_start":5,"column_end":25},"name":"HighLessThanTwiceLow","qualname":"::errors::CreationError::HighLessThanTwiceLow","value":"CreationError::HighLessThanTwiceLow","parent":{"krate":0,"index":925},"children":[],"decl_id":null,"docs":" Highest trackable value must be >= 2 * lowest discernible value for some internal\n calculations to work out. In practice, high is typically much higher than 2 * low.\n","sig":null,"attributes":[{"value":"/ Highest trackable value must be >= 2 * lowest discernible value for some internal","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":109958,"byte_end":110043,"line_start":11,"line_end":11,"column_start":5,"column_end":90}},{"value":"/ calculations to work out. In practice, high is typically much higher than 2 * low.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":110048,"byte_end":110134,"line_start":12,"line_end":12,"column_start":5,"column_end":91}}]},{"kind":"TupleVariant","id":{"krate":0,"index":932},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":110395,"byte_end":110411,"line_start":17,"line_end":17,"column_start":5,"column_end":21},"name":"SigFigExceedsMax","qualname":"::errors::CreationError::SigFigExceedsMax","value":"CreationError::SigFigExceedsMax","parent":{"krate":0,"index":925},"children":[],"decl_id":null,"docs":" Number of significant digits must be in the range `[0, 5]`. It is capped at 5 because 5\n significant digits is already more than almost anyone needs, and memory usage scales\n exponentially as this increases.\n","sig":null,"attributes":[{"value":"/ Number of significant digits must be in the range `[0, 5]`. It is capped at 5 because 5","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":110165,"byte_end":110256,"line_start":14,"line_end":14,"column_start":5,"column_end":96}},{"value":"/ significant digits is already more than almost anyone needs, and memory usage scales","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":110261,"byte_end":110349,"line_start":15,"line_end":15,"column_start":5,"column_end":93}},{"value":"/ exponentially as this increases.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":110354,"byte_end":110390,"line_start":16,"line_end":16,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":934},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":110966,"byte_end":110996,"line_start":25,"line_end":25,"column_start":5,"column_end":35},"name":"CannotRepresentSigFigBeyondLow","qualname":"::errors::CreationError::CannotRepresentSigFigBeyondLow","value":"CreationError::CannotRepresentSigFigBeyondLow","parent":{"krate":0,"index":925},"children":[],"decl_id":null,"docs":" Cannot represent sigfig worth of values beyond the lowest discernible value. Decrease the\n significant figures, lowest discernible value, or both.","sig":null,"attributes":[{"value":"/ Cannot represent sigfig worth of values beyond the lowest discernible value. Decrease the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":110417,"byte_end":110510,"line_start":18,"line_end":18,"column_start":5,"column_end":98}},{"value":"/ significant figures, lowest discernible value, or both.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":110515,"byte_end":110574,"line_start":19,"line_end":19,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":110579,"byte_end":110582,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ This could happen if low is very large (like 2^60) and sigfigs is 5, which requires 18","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":110587,"byte_end":110677,"line_start":21,"line_end":21,"column_start":5,"column_end":95}},{"value":"/ additional bits, which would then require more bits than will fit in a u64. Specifically,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":110682,"byte_end":110775,"line_start":22,"line_end":22,"column_start":5,"column_end":98}},{"value":"/ the exponent of the largest power of two that is smaller than the lowest value and the bits","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":110780,"byte_end":110875,"line_start":23,"line_end":23,"column_start":5,"column_end":100}},{"value":"/ needed to represent the requested significant figures must sum to 63 or less.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":110880,"byte_end":110961,"line_start":24,"line_end":24,"column_start":5,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":936},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":111134,"byte_end":111151,"line_start":28,"line_end":28,"column_start":5,"column_end":22},"name":"UsizeTypeTooSmall","qualname":"::errors::CreationError::UsizeTypeTooSmall","value":"CreationError::UsizeTypeTooSmall","parent":{"krate":0,"index":925},"children":[],"decl_id":null,"docs":" The `usize` type is too small to represent the desired configuration. Use fewer significant\n figures or a lower max.\n","sig":null,"attributes":[{"value":"/ The `usize` type is too small to represent the desired configuration. Use fewer significant","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":111002,"byte_end":111097,"line_start":26,"line_end":26,"column_start":5,"column_end":100}},{"value":"/ figures or a lower max.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":111102,"byte_end":111129,"line_start":27,"line_end":27,"column_start":5,"column_end":32}}]},{"kind":"Enum","id":{"krate":0,"index":925},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":109683,"byte_end":109696,"line_start":5,"line_end":5,"column_start":10,"column_end":23},"name":"CreationError","qualname":"::errors::CreationError","value":"enum CreationError {\n    LowIsZero,\n    LowExceedsMax,\n    HighLessThanTwiceLow,\n    SigFigExceedsMax,\n    CannotRepresentSigFigBeyondLow,\n    UsizeTypeTooSmall,\n}","parent":null,"children":[{"krate":0,"index":926},{"krate":0,"index":928},{"krate":0,"index":930},{"krate":0,"index":932},{"krate":0,"index":934},{"krate":0,"index":936}],"decl_id":null,"docs":" Errors that can occur when creating a histogram.\n","sig":null,"attributes":[{"value":"/ Errors that can occur when creating a histogram.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":109576,"byte_end":109628,"line_start":3,"line_end":3,"column_start":1,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":950},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":111498,"byte_end":111526,"line_start":37,"line_end":37,"column_start":5,"column_end":33},"name":"OtherAddendValueExceedsRange","qualname":"::errors::AdditionError::OtherAddendValueExceedsRange","value":"AdditionError::OtherAddendValueExceedsRange","parent":{"krate":0,"index":949},"children":[],"decl_id":null,"docs":" The other histogram includes values that do not fit in this histogram's range.\n Only possible when auto resize is disabled.\n","sig":null,"attributes":[{"value":"/ The other histogram includes values that do not fit in this histogram's range.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":111359,"byte_end":111441,"line_start":35,"line_end":35,"column_start":5,"column_end":87}},{"value":"/ Only possible when auto resize is disabled.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":111446,"byte_end":111493,"line_start":36,"line_end":36,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":952},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":111770,"byte_end":111799,"line_start":41,"line_end":41,"column_start":5,"column_end":34},"name":"ResizeFailedUsizeTypeTooSmall","qualname":"::errors::AdditionError::ResizeFailedUsizeTypeTooSmall","value":"AdditionError::ResizeFailedUsizeTypeTooSmall","parent":{"krate":0,"index":949},"children":[],"decl_id":null,"docs":" The other histogram includes values that would map to indexes in this histogram that are\n not expressible for `usize`. Configure this histogram to use fewer significant digits. Only\n possible when resize is enabled.\n","sig":null,"attributes":[{"value":"/ The other histogram includes values that would map to indexes in this histogram that are","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":111532,"byte_end":111624,"line_start":38,"line_end":38,"column_start":5,"column_end":97}},{"value":"/ not expressible for `usize`. Configure this histogram to use fewer significant digits. Only","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":111629,"byte_end":111724,"line_start":39,"line_end":39,"column_start":5,"column_end":100}},{"value":"/ possible when resize is enabled.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":111729,"byte_end":111765,"line_start":40,"line_end":40,"column_start":5,"column_end":41}}]},{"kind":"Enum","id":{"krate":0,"index":949},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":111339,"byte_end":111352,"line_start":34,"line_end":34,"column_start":10,"column_end":23},"name":"AdditionError","qualname":"::errors::AdditionError","value":"enum AdditionError {\n    OtherAddendValueExceedsRange,\n    ResizeFailedUsizeTypeTooSmall,\n}","parent":null,"children":[{"krate":0,"index":950},{"krate":0,"index":952}],"decl_id":null,"docs":" Errors that can occur when adding another histogram.\n","sig":null,"attributes":[{"value":"/ Errors that can occur when adding another histogram.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":111228,"byte_end":111284,"line_start":32,"line_end":32,"column_start":1,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":966},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":112082,"byte_end":112116,"line_start":49,"line_end":49,"column_start":5,"column_end":39},"name":"SubtrahendValueExceedsMinuendRange","qualname":"::errors::SubtractionError::SubtrahendValueExceedsMinuendRange","value":"SubtractionError::SubtrahendValueExceedsMinuendRange","parent":{"krate":0,"index":965},"children":[],"decl_id":null,"docs":" The other histogram includes values that do not fit in this histogram's range.\n Only possible when auto resize is disabled.\n","sig":null,"attributes":[{"value":"/ The other histogram includes values that do not fit in this histogram's range.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":111943,"byte_end":112025,"line_start":47,"line_end":47,"column_start":5,"column_end":87}},{"value":"/ Only possible when auto resize is disabled.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":112030,"byte_end":112077,"line_start":48,"line_end":48,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":968},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":112405,"byte_end":112439,"line_start":53,"line_end":53,"column_start":5,"column_end":39},"name":"SubtrahendCountExceedsMinuendCount","qualname":"::errors::SubtractionError::SubtrahendCountExceedsMinuendCount","value":"SubtractionError::SubtrahendCountExceedsMinuendCount","parent":{"krate":0,"index":965},"children":[],"decl_id":null,"docs":" The other histogram includes counts that are higher than the current count for a value, and\n counts cannot go negative. The subtraction may have been partially applied to some counts as\n this error is returned when the first impossible subtraction is detected.\n","sig":null,"attributes":[{"value":"/ The other histogram includes counts that are higher than the current count for a value, and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":112122,"byte_end":112217,"line_start":50,"line_end":50,"column_start":5,"column_end":100}},{"value":"/ counts cannot go negative. The subtraction may have been partially applied to some counts as","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":112222,"byte_end":112318,"line_start":51,"line_end":51,"column_start":5,"column_end":101}},{"value":"/ this error is returned when the first impossible subtraction is detected.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":112323,"byte_end":112400,"line_start":52,"line_end":52,"column_start":5,"column_end":82}}]},{"kind":"Enum","id":{"krate":0,"index":965},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":111920,"byte_end":111936,"line_start":46,"line_end":46,"column_start":10,"column_end":26},"name":"SubtractionError","qualname":"::errors::SubtractionError","value":"enum SubtractionError {\n    SubtrahendValueExceedsMinuendRange,\n    SubtrahendCountExceedsMinuendCount,\n}","parent":null,"children":[{"krate":0,"index":966},{"krate":0,"index":968}],"decl_id":null,"docs":" Errors that can occur when subtracting another histogram.\n","sig":null,"attributes":[{"value":"/ Errors that can occur when subtracting another histogram.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":111804,"byte_end":111865,"line_start":44,"line_end":44,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":982},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":112927,"byte_end":112956,"line_start":64,"line_end":64,"column_start":5,"column_end":34},"name":"ValueOutOfRangeResizeDisabled","qualname":"::errors::RecordError::ValueOutOfRangeResizeDisabled","value":"RecordError::ValueOutOfRangeResizeDisabled","parent":{"krate":0,"index":981},"children":[],"decl_id":null,"docs":" The value to record is not representable in this histogram and resizing is disabled.\n Configure a higher maximum value or enable resizing. Only possible when resizing is\n disabled.\n","sig":null,"attributes":[{"value":"/ The value to record is not representable in this histogram and resizing is disabled.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":112724,"byte_end":112812,"line_start":61,"line_end":61,"column_start":5,"column_end":93}},{"value":"/ Configure a higher maximum value or enable resizing. Only possible when resizing is","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":112817,"byte_end":112904,"line_start":62,"line_end":62,"column_start":5,"column_end":92}},{"value":"/ disabled.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":112909,"byte_end":112922,"line_start":63,"line_end":63,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":984},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":113247,"byte_end":113276,"line_start":68,"line_end":68,"column_start":5,"column_end":34},"name":"ResizeFailedUsizeTypeTooSmall","qualname":"::errors::RecordError::ResizeFailedUsizeTypeTooSmall","value":"RecordError::ResizeFailedUsizeTypeTooSmall","parent":{"krate":0,"index":981},"children":[],"decl_id":null,"docs":" Auto resizing is enabled and must be used to represent the provided value, but the histogram\n cannot be resized because `usize` cannot represent sufficient length. Configure this\n histogram to use fewer significant digits. Only possible when resizing is enabled.\n","sig":null,"attributes":[{"value":"/ Auto resizing is enabled and must be used to represent the provided value, but the histogram","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":112962,"byte_end":113058,"line_start":65,"line_end":65,"column_start":5,"column_end":101}},{"value":"/ cannot be resized because `usize` cannot represent sufficient length. Configure this","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":113063,"byte_end":113151,"line_start":66,"line_end":66,"column_start":5,"column_end":93}},{"value":"/ histogram to use fewer significant digits. Only possible when resizing is enabled.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":113156,"byte_end":113242,"line_start":67,"line_end":67,"column_start":5,"column_end":91}}]},{"kind":"Enum","id":{"krate":0,"index":981},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":112706,"byte_end":112717,"line_start":60,"line_end":60,"column_start":10,"column_end":21},"name":"RecordError","qualname":"::errors::RecordError","value":"enum RecordError {\n    ValueOutOfRangeResizeDisabled,\n    ResizeFailedUsizeTypeTooSmall,\n}","parent":null,"children":[{"krate":0,"index":982},{"krate":0,"index":984}],"decl_id":null,"docs":" Errors that can occur while recording a value and its associated count.\n","sig":null,"attributes":[{"value":"/ Errors that can occur while recording a value and its associated count.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":112576,"byte_end":112651,"line_start":58,"line_end":58,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":386},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":113315,"byte_end":113332,"line_start":72,"line_end":72,"column_start":12,"column_end":29},"name":"UsizeTypeTooSmall","qualname":"::errors::UsizeTypeTooSmall","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\errors\\mod.rs","byte_start":113281,"byte_end":113303,"line_start":71,"line_end":71,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":388},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"serialization","qualname":"::serialization","value":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","parent":null,"children":[{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":393},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":400},{"krate":0,"index":403},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":468},{"krate":0,"index":471},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":534},{"krate":0,"index":537},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":624},{"krate":0,"index":627},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":765}],"decl_id":null,"docs":" Serialization/deserialization support.","sig":null,"attributes":[{"value":"cfg(feature = \"serialization\")","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":81061,"byte_end":81094,"line_start":1850,"line_end":1850,"column_start":1,"column_end":34}},{"value":"/ Serialization/deserialization support.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":113335,"byte_end":113377,"line_start":1,"line_end":1,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":113378,"byte_end":113381,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The upstream Java project has established several different types of serialization. We have","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":113382,"byte_end":113477,"line_start":3,"line_end":3,"column_start":1,"column_end":96}},{"value":"/ currently implemented V2 and V2 + DEFLATE (following the names used by the Java implementation).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":113478,"byte_end":113578,"line_start":4,"line_end":4,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":113579,"byte_end":113582,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ These formats are compact binary representations of the state of the histogram. They are","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":113583,"byte_end":113675,"line_start":6,"line_end":6,"column_start":1,"column_end":93}},{"value":"/ intended to be used for archival or transmission to other systems for further analysis. A","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":113676,"byte_end":113769,"line_start":7,"line_end":7,"column_start":1,"column_end":94}},{"value":"/ typical use case would be to periodically serialize a histogram, save it somewhere, and reset","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":113770,"byte_end":113867,"line_start":8,"line_end":8,"column_start":1,"column_end":98}},{"value":"/ the histogram.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":113868,"byte_end":113886,"line_start":9,"line_end":9,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":113887,"byte_end":113890,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Histograms are designed to be added, subtracted, and otherwise manipulated, and an efficient","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":113891,"byte_end":113987,"line_start":11,"line_end":11,"column_start":1,"column_end":97}},{"value":"/ storage format facilitates this. As an example, you might be capturing histograms once a minute","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":113988,"byte_end":114087,"line_start":12,"line_end":12,"column_start":1,"column_end":100}},{"value":"/ to have a granular view into your performance over time, but you might also want to see longer","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":114088,"byte_end":114186,"line_start":13,"line_end":13,"column_start":1,"column_end":99}},{"value":"/ trends over an hour or day. Simply deserialize the last 60 minutes worth to recreate their","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":114187,"byte_end":114281,"line_start":14,"line_end":14,"column_start":1,"column_end":95}},{"value":"/ in-memory `Histogram` form, add them all together into one `Histogram`, and perform whatever","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":114282,"byte_end":114378,"line_start":15,"line_end":15,"column_start":1,"column_end":97}},{"value":"/ calculations you wish on the resulting histogram. This would allow you to correctly calculate","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":114379,"byte_end":114476,"line_start":16,"line_end":16,"column_start":1,"column_end":98}},{"value":"/ the 99.99th percentile for the entire hour, for instance, which is not something you can do","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":114477,"byte_end":114572,"line_start":17,"line_end":17,"column_start":1,"column_end":96}},{"value":"/ if you have only stored percentiles (as opposed to the entire histogram) for each minute.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":114573,"byte_end":114666,"line_start":18,"line_end":18,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":114667,"byte_end":114670,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Performance concerns","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":114671,"byte_end":114697,"line_start":20,"line_end":20,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":114698,"byte_end":114701,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Serialization is quite fast; serializing a histogram in V2 format that represents 1 to","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":114702,"byte_end":114792,"line_start":22,"line_end":22,"column_start":1,"column_end":91}},{"value":"/ `u64::max_value()` with 3 digits of precision with tens of thousands of recorded counts takes","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":114793,"byte_end":114890,"line_start":23,"line_end":23,"column_start":1,"column_end":98}},{"value":"/ about 40 microseconds on an E5-1650v3 Xeon. Deserialization is about 3x slower, but that will","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":114891,"byte_end":114988,"line_start":24,"line_end":24,"column_start":1,"column_end":98}},{"value":"/ improve as there are still some optimizations to perform.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":114989,"byte_end":115050,"line_start":25,"line_end":25,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":115051,"byte_end":115054,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ For the V2 format, the space used for a histogram will depend mainly on precision since higher","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":115055,"byte_end":115153,"line_start":27,"line_end":27,"column_start":1,"column_end":99}},{"value":"/ precision will reduce the extent to which different values are grouped into the same bucket.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":115154,"byte_end":115250,"line_start":28,"line_end":28,"column_start":1,"column_end":97}},{"value":"/ Having a large value range (e.g. 1 to `u64::max_value()`) will not directly impact the size if","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":115251,"byte_end":115349,"line_start":29,"line_end":29,"column_start":1,"column_end":99}},{"value":"/ there are many zero counts as zeros are compressed away.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":115350,"byte_end":115410,"line_start":30,"line_end":30,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":115411,"byte_end":115414,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ V2 + DEFLATE is significantly slower to serialize (around 10x) but only a little bit slower to","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":115415,"byte_end":115513,"line_start":32,"line_end":32,"column_start":1,"column_end":99}},{"value":"/ deserialize (less than 2x). YMMV depending on the compressibility of your histogram data, the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":115514,"byte_end":115611,"line_start":33,"line_end":33,"column_start":1,"column_end":98}},{"value":"/ speed of the underlying storage medium, etc. Naturally, you can always compress at a later time:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":115612,"byte_end":115712,"line_start":34,"line_end":34,"column_start":1,"column_end":101}},{"value":"/ there's no reason why you couldn't serialize as V2 and then later re-serialize it as V2 +","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":115713,"byte_end":115806,"line_start":35,"line_end":35,"column_start":1,"column_end":94}},{"value":"/ DEFLATE on another system (perhaps as a batch job) for better archival storage density.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":115807,"byte_end":115898,"line_start":36,"line_end":36,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":115899,"byte_end":115902,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # API","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":115903,"byte_end":115912,"line_start":38,"line_end":38,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":115913,"byte_end":115916,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ Each serialization format has its own serializer struct, but since each format is reliably","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":115917,"byte_end":116011,"line_start":40,"line_end":40,"column_start":1,"column_end":95}},{"value":"/ distinguishable from each other, there is only one `Deserializer` struct that will work for","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":116012,"byte_end":116107,"line_start":41,"line_end":41,"column_start":1,"column_end":96}},{"value":"/ any of the formats this library implements.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":116108,"byte_end":116155,"line_start":42,"line_end":42,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":116156,"byte_end":116159,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Serializers and deserializers are intended to be re-used for many histograms. You can use them","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":116160,"byte_end":116258,"line_start":44,"line_end":44,"column_start":1,"column_end":99}},{"value":"/ for one histogram and throw them away; it will just be less efficient as the cost of their","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":116259,"byte_end":116353,"line_start":45,"line_end":45,"column_start":1,"column_end":95}},{"value":"/ internal buffers will not be amortized across many histograms.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":116354,"byte_end":116420,"line_start":46,"line_end":46,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":116421,"byte_end":116424,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Serializers can write to any `Write` implementation, and `Deserializer` can read from any","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":116425,"byte_end":116518,"line_start":48,"line_end":48,"column_start":1,"column_end":94}},{"value":"/ `Read`. This should make it easy to use them in almost any context, as everything from i/o","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":116519,"byte_end":116613,"line_start":49,"line_end":49,"column_start":1,"column_end":95}},{"value":"/ streams to `Vec<u8>` can be a `Read` or `Write`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":116614,"byte_end":116666,"line_start":50,"line_end":50,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":116667,"byte_end":116670,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ # Interval logs","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":116671,"byte_end":116690,"line_start":52,"line_end":52,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":116691,"byte_end":116694,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ See the `interval_log` module.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":116695,"byte_end":116729,"line_start":54,"line_end":54,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":116730,"byte_end":116733,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ### Integration with general-purpose serialization libraries","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":116734,"byte_end":116798,"line_start":56,"line_end":56,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":116799,"byte_end":116802,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ In general, serializing histograms should be straightforward: pick the serialization format","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":116803,"byte_end":116898,"line_start":58,"line_end":58,"column_start":1,"column_end":96}},{"value":"/ that is suitable for your requirements (e.g. based on what formats are supported by other tools","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":116899,"byte_end":116998,"line_start":59,"line_end":59,"column_start":1,"column_end":100}},{"value":"/ that will consume the serialized histograms) and use the corresponding struct.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":116999,"byte_end":117081,"line_start":60,"line_end":60,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":117082,"byte_end":117085,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ However, there are some approaches to serialization like [serde's","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":117086,"byte_end":117155,"line_start":62,"line_end":62,"column_start":1,"column_end":70}},{"value":"/ `Serialize`](https://docs.serde.rs/serde/trait.Serialize.html) or [`rustc_serialize`'s","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":117156,"byte_end":117246,"line_start":63,"line_end":63,"column_start":1,"column_end":91}},{"value":"/ `Encodable`](https://doc.rust-lang.org/rustc-serialize/rustc_serialize/trait.Encodable.html)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":117247,"byte_end":117343,"line_start":64,"line_end":64,"column_start":1,"column_end":97}},{"value":"/ that effectively require that only one way of serialization can be used because a trait can","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":117344,"byte_end":117439,"line_start":65,"line_end":65,"column_start":1,"column_end":96}},{"value":"/ only be implemented once for a struct. This is too restrictive for histograms since they","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":117440,"byte_end":117532,"line_start":66,"line_end":66,"column_start":1,"column_end":93}},{"value":"/ inherently have multiple ways of being serialized, so as a library we cannot pick the format","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":117533,"byte_end":117629,"line_start":67,"line_end":67,"column_start":1,"column_end":97}},{"value":"/ for you. If you need to interoperate with such a restriction, a good approach is to first pick","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":117630,"byte_end":117728,"line_start":68,"line_end":68,"column_start":1,"column_end":99}},{"value":"/ your serialization format (V2, etc) like you normally would, then make a wrapper struct. The","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":117729,"byte_end":117825,"line_start":69,"line_end":69,"column_start":1,"column_end":97}},{"value":"/ wrapper effectively gives you a struct whose sole opportunity to implement a trait you can","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":117826,"byte_end":117920,"line_start":70,"line_end":70,"column_start":1,"column_end":95}},{"value":"/ expend to satisfy the way serde, etc, are structured.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":117921,"byte_end":117978,"line_start":71,"line_end":71,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":117979,"byte_end":117982,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ Here's a sketch of how that would look for serde's `Serialize`:","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":117983,"byte_end":118050,"line_start":73,"line_end":73,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118051,"byte_end":118054,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118055,"byte_end":118062,"line_start":75,"line_end":75,"column_start":1,"column_end":8}},{"value":"/ use hdrhistogram::Histogram;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118063,"byte_end":118095,"line_start":76,"line_end":76,"column_start":1,"column_end":33}},{"value":"/ use hdrhistogram::serialization::{Serializer, V2Serializer};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118096,"byte_end":118160,"line_start":77,"line_end":77,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118161,"byte_end":118164,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ mod serde {","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118165,"byte_end":118180,"line_start":79,"line_end":79,"column_start":1,"column_end":16}},{"value":"/     // part of serde, simplified","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118181,"byte_end":118217,"line_start":80,"line_end":80,"column_start":1,"column_end":37}},{"value":"/     pub trait Serializer {","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118218,"byte_end":118248,"line_start":81,"line_end":81,"column_start":1,"column_end":31}},{"value":"/        // ...","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118249,"byte_end":118266,"line_start":82,"line_end":82,"column_start":1,"column_end":18}},{"value":"/        fn serialize_bytes(self, value: &[u8]) -> Result<(), ()>;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118267,"byte_end":118335,"line_start":83,"line_end":83,"column_start":1,"column_end":69}},{"value":"/        // ...","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118336,"byte_end":118353,"line_start":84,"line_end":84,"column_start":1,"column_end":18}},{"value":"/     }","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118354,"byte_end":118363,"line_start":85,"line_end":85,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118364,"byte_end":118367,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/     // also in serde","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118368,"byte_end":118392,"line_start":87,"line_end":87,"column_start":1,"column_end":25}},{"value":"/     pub trait Serialize {","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118393,"byte_end":118422,"line_start":88,"line_end":88,"column_start":1,"column_end":30}},{"value":"/         fn serialize<S: Serializer>(&self, serializer: S) -> Result<(), ()>;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118423,"byte_end":118503,"line_start":89,"line_end":89,"column_start":1,"column_end":81}},{"value":"/     }","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118504,"byte_end":118513,"line_start":90,"line_end":90,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118514,"byte_end":118519,"line_start":91,"line_end":91,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118520,"byte_end":118523,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ // your custom wrapper","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118524,"byte_end":118550,"line_start":93,"line_end":93,"column_start":1,"column_end":27}},{"value":"/ #[allow(dead_code)] // to muffle warnings compiling this example","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118551,"byte_end":118619,"line_start":94,"line_end":94,"column_start":1,"column_end":69}},{"value":"/ struct V2HistogramWrapper {","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118620,"byte_end":118651,"line_start":95,"line_end":95,"column_start":1,"column_end":32}},{"value":"/     histogram: Histogram<u64>","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118652,"byte_end":118685,"line_start":96,"line_end":96,"column_start":1,"column_end":34}},{"value":"/ }","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118686,"byte_end":118691,"line_start":97,"line_end":97,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118692,"byte_end":118695,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ impl serde::Serialize for V2HistogramWrapper {","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118696,"byte_end":118746,"line_start":99,"line_end":99,"column_start":1,"column_end":51}},{"value":"/     fn serialize<S: serde::Serializer>(&self, serializer: S) -> Result<(), ()> {","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118747,"byte_end":118831,"line_start":100,"line_end":100,"column_start":1,"column_end":85}},{"value":"/         // Not optimal to not re-use the vec and serializer, but it'll work","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118832,"byte_end":118911,"line_start":101,"line_end":101,"column_start":1,"column_end":80}},{"value":"/         let mut vec = Vec::new();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118912,"byte_end":118949,"line_start":102,"line_end":102,"column_start":1,"column_end":38}},{"value":"/         // Pick the serialization format you want to use. Here, we use plain V2, but V2 +","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":118950,"byte_end":119043,"line_start":103,"line_end":103,"column_start":1,"column_end":94}},{"value":"/         // DEFLATE is also available.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119044,"byte_end":119085,"line_start":104,"line_end":104,"column_start":1,"column_end":42}},{"value":"/         // Map errors as appropriate for your use case.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119086,"byte_end":119145,"line_start":105,"line_end":105,"column_start":1,"column_end":60}},{"value":"/         V2Serializer::new().serialize(&self.histogram, &mut vec)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119146,"byte_end":119214,"line_start":106,"line_end":106,"column_start":1,"column_end":69}},{"value":"/             .map_err(|_| ())?;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119215,"byte_end":119249,"line_start":107,"line_end":107,"column_start":1,"column_end":35}},{"value":"/         serializer.serialize_bytes(&vec)?;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119250,"byte_end":119296,"line_start":108,"line_end":108,"column_start":1,"column_end":47}},{"value":"/         Ok(())","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119297,"byte_end":119315,"line_start":109,"line_end":109,"column_start":1,"column_end":19}},{"value":"/     }","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119316,"byte_end":119325,"line_start":110,"line_end":110,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119326,"byte_end":119331,"line_start":111,"line_end":111,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119332,"byte_end":119339,"line_start":112,"line_end":112,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119340,"byte_end":119343,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119344,"byte_end":119358,"line_start":114,"line_end":114,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119359,"byte_end":119362,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ Creating, serializing, and deserializing a single histogram using a `Vec<u8>` as a `Write` and a","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119363,"byte_end":119463,"line_start":116,"line_end":116,"column_start":1,"column_end":101}},{"value":"/ `&[u8]` slice from the vec as a `Read`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119464,"byte_end":119507,"line_start":117,"line_end":117,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119508,"byte_end":119511,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119512,"byte_end":119519,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/ use hdrhistogram::Histogram;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119520,"byte_end":119552,"line_start":120,"line_end":120,"column_start":1,"column_end":33}},{"value":"/ use hdrhistogram::serialization::{Deserializer, Serializer, V2Serializer};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119553,"byte_end":119631,"line_start":121,"line_end":121,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119632,"byte_end":119635,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ let mut vec = Vec::new();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119636,"byte_end":119665,"line_start":123,"line_end":123,"column_start":1,"column_end":30}},{"value":"/ let orig_histogram = Histogram::<u64>::new(1).unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119666,"byte_end":119725,"line_start":124,"line_end":124,"column_start":1,"column_end":60}},{"value":"/ V2Serializer::new().serialize(&orig_histogram, &mut vec).unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119726,"byte_end":119796,"line_start":125,"line_end":125,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119797,"byte_end":119800,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ let _histogram: Histogram<u64> = Deserializer::new()","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119801,"byte_end":119857,"line_start":127,"line_end":127,"column_start":1,"column_end":57}},{"value":"/     .deserialize(&mut vec.as_slice()).unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119858,"byte_end":119909,"line_start":128,"line_end":128,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119910,"byte_end":119917,"line_start":129,"line_end":129,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119918,"byte_end":119921,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ This example shows serializing several histograms into a `Vec<u8>` and deserializing them again,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":119922,"byte_end":120022,"line_start":131,"line_end":131,"column_start":1,"column_end":101}},{"value":"/ at which point they are summed into one histogram (for further hypothetical analysis).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120023,"byte_end":120113,"line_start":132,"line_end":132,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120114,"byte_end":120117,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120118,"byte_end":120125,"line_start":134,"line_end":134,"column_start":1,"column_end":8}},{"value":"/ use hdrhistogram::Histogram;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120126,"byte_end":120158,"line_start":135,"line_end":135,"column_start":1,"column_end":33}},{"value":"/ use hdrhistogram::serialization::{Deserializer, Serializer, V2Serializer};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120159,"byte_end":120237,"line_start":136,"line_end":136,"column_start":1,"column_end":79}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120238,"byte_end":120262,"line_start":137,"line_end":137,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120263,"byte_end":120266,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ // Naturally, do real error handling instead of unwrap() everywhere","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120267,"byte_end":120338,"line_start":139,"line_end":139,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120339,"byte_end":120342,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ let num_histograms = 4;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120343,"byte_end":120370,"line_start":141,"line_end":141,"column_start":1,"column_end":28}},{"value":"/ let mut histograms = Vec::new();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120371,"byte_end":120407,"line_start":142,"line_end":142,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120408,"byte_end":120411,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ // Make some histograms","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120412,"byte_end":120439,"line_start":144,"line_end":144,"column_start":1,"column_end":28}},{"value":"/ for _ in 0..num_histograms {","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120440,"byte_end":120472,"line_start":145,"line_end":145,"column_start":1,"column_end":33}},{"value":"/     let mut h = Histogram::<u64>::new_with_bounds(1, u64::max_value(), 3).unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120473,"byte_end":120560,"line_start":146,"line_end":146,"column_start":1,"column_end":88}},{"value":"/     h.record_n(42, 7).unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120561,"byte_end":120596,"line_start":147,"line_end":147,"column_start":1,"column_end":36}},{"value":"/     histograms.push(h);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120597,"byte_end":120624,"line_start":148,"line_end":148,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120625,"byte_end":120630,"line_start":149,"line_end":149,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120631,"byte_end":120634,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ let mut buf = Vec::new();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120635,"byte_end":120664,"line_start":151,"line_end":151,"column_start":1,"column_end":30}},{"value":"/ let mut serializer = V2Serializer::new();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120665,"byte_end":120710,"line_start":152,"line_end":152,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120711,"byte_end":120714,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ // Save them to the buffer","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120715,"byte_end":120745,"line_start":154,"line_end":154,"column_start":1,"column_end":31}},{"value":"/ for h in histograms.iter() {","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120746,"byte_end":120778,"line_start":155,"line_end":155,"column_start":1,"column_end":33}},{"value":"/     serializer.serialize(h, &mut buf).unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120779,"byte_end":120830,"line_start":156,"line_end":156,"column_start":1,"column_end":52}},{"value":"/ }","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120831,"byte_end":120836,"line_start":157,"line_end":157,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120837,"byte_end":120840,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ // Read them back out again","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120841,"byte_end":120872,"line_start":159,"line_end":159,"column_start":1,"column_end":32}},{"value":"/ let mut deserializer = Deserializer::new();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120873,"byte_end":120920,"line_start":160,"line_end":160,"column_start":1,"column_end":48}},{"value":"/ let mut cursor = Cursor::new(&buf);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120921,"byte_end":120960,"line_start":161,"line_end":161,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120961,"byte_end":120964,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ let mut accumulator =","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120965,"byte_end":120990,"line_start":163,"line_end":163,"column_start":1,"column_end":26}},{"value":"/     Histogram::<u64>::new_with_bounds(1, u64::max_value(), 3).unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":120991,"byte_end":121066,"line_start":164,"line_end":164,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":121067,"byte_end":121070,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ for _ in 0..num_histograms {","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":121071,"byte_end":121103,"line_start":166,"line_end":166,"column_start":1,"column_end":33}},{"value":"/     let h: Histogram<u64> = deserializer.deserialize(&mut cursor).unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":121104,"byte_end":121183,"line_start":167,"line_end":167,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":121184,"byte_end":121187,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/     // behold, they are restored as they were originally","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":121188,"byte_end":121248,"line_start":169,"line_end":169,"column_start":1,"column_end":61}},{"value":"/     assert_eq!(7, h.count_at(42));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":121249,"byte_end":121287,"line_start":170,"line_end":170,"column_start":1,"column_end":39}},{"value":"/     assert_eq!(0, h.count_at(1000));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":121288,"byte_end":121328,"line_start":171,"line_end":171,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":121329,"byte_end":121332,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/     accumulator.add(h).unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":121333,"byte_end":121369,"line_start":173,"line_end":173,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":121370,"byte_end":121375,"line_start":174,"line_end":174,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":121376,"byte_end":121379,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ // all the counts are there","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":121380,"byte_end":121411,"line_start":176,"line_end":176,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(num_histograms * 7, accumulator.count_at(42));","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":121412,"byte_end":121473,"line_start":177,"line_end":177,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":121474,"byte_end":121481,"line_start":178,"line_end":178,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":121482,"byte_end":121485,"line_start":179,"line_end":179,"column_start":1,"column_end":4}}]},{"kind":"TupleVariant","id":{"krate":0,"index":998},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":123153,"byte_end":123173,"line_start":12,"line_end":12,"column_start":5,"column_end":25},"name":"CountNotSerializable","qualname":"::serialization::v2_serializer::V2SerializeError::CountNotSerializable","value":"V2SerializeError::CountNotSerializable","parent":{"krate":0,"index":997},"children":[],"decl_id":null,"docs":" A count above i64::max_value() cannot be zig-zag encoded, and therefore cannot be\n serialized.\n","sig":null,"attributes":[{"value":"/ A count above i64::max_value() cannot be zig-zag encoded, and therefore cannot be","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":123043,"byte_end":123128,"line_start":10,"line_end":10,"column_start":5,"column_end":90}},{"value":"/ serialized.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":123133,"byte_end":123148,"line_start":11,"line_end":11,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1000},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":123295,"byte_end":123312,"line_start":15,"line_end":15,"column_start":5,"column_end":22},"name":"UsizeTypeTooSmall","qualname":"::serialization::v2_serializer::V2SerializeError::UsizeTypeTooSmall","value":"V2SerializeError::UsizeTypeTooSmall","parent":{"krate":0,"index":997},"children":[],"decl_id":null,"docs":" Internal calculations cannot be represented in `usize`. Use smaller histograms or beefier\n hardware.\n","sig":null,"attributes":[{"value":"/ Internal calculations cannot be represented in `usize`. Use smaller histograms or beefier","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":123179,"byte_end":123272,"line_start":13,"line_end":13,"column_start":5,"column_end":98}},{"value":"/ hardware.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":123277,"byte_end":123290,"line_start":14,"line_end":14,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1002},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":123351,"byte_end":123358,"line_start":17,"line_end":17,"column_start":5,"column_end":12},"name":"IoError","qualname":"::serialization::v2_serializer::V2SerializeError::IoError","value":"V2SerializeError::IoError(ErrorKind)","parent":{"krate":0,"index":997},"children":[],"decl_id":null,"docs":" An i/o operation failed.\n","sig":null,"attributes":[{"value":"/ An i/o operation failed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":123318,"byte_end":123346,"line_start":16,"line_end":16,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":1004},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":123359,"byte_end":123368,"line_start":17,"line_end":17,"column_start":13,"column_end":22},"name":"0","qualname":"::serialization::v2_serializer::V2SerializeError::IoError::0","value":"std::io::ErrorKind","parent":{"krate":0,"index":1002},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":997},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":123020,"byte_end":123036,"line_start":9,"line_end":9,"column_start":10,"column_end":26},"name":"V2SerializeError","qualname":"::serialization::v2_serializer::V2SerializeError","value":"enum V2SerializeError {\n    CountNotSerializable,\n    UsizeTypeTooSmall,\n    IoError(ErrorKind),\n}","parent":null,"children":[{"krate":0,"index":998},{"krate":0,"index":1000},{"krate":0,"index":1002}],"decl_id":null,"docs":" Errors that occur during serialization.\n","sig":null,"attributes":[{"value":"/ Errors that occur during serialization.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":122922,"byte_end":122965,"line_start":7,"line_end":7,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":123444,"byte_end":123448,"line_start":21,"line_end":21,"column_start":8,"column_end":12},"name":"from","qualname":"<V2SerializeError as std::convert::From>::from","value":"fn from(std::io::Error) -> Self","parent":{"krate":2,"index":3169},"children":[],"decl_id":{"krate":2,"index":3171},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":440},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":123583,"byte_end":123595,"line_start":27,"line_end":27,"column_start":12,"column_end":24},"name":"V2Serializer","qualname":"::serialization::v2_serializer::V2Serializer","value":"V2Serializer {  }","parent":null,"children":[{"krate":0,"index":441}],"decl_id":null,"docs":" Serializer for the V2 binary format.\n","sig":null,"attributes":[{"value":"/ Serializer for the V2 binary format.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":123531,"byte_end":123571,"line_start":26,"line_end":26,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":123658,"byte_end":123665,"line_start":32,"line_end":32,"column_start":8,"column_end":15},"name":"default","qualname":"<V2Serializer as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":123770,"byte_end":123773,"line_start":38,"line_end":38,"column_start":12,"column_end":15},"name":"new","qualname":"<V2Serializer>::new","value":"fn new() -> V2Serializer","parent":null,"children":[],"decl_id":null,"docs":" Create a new serializer.\n","sig":null,"attributes":[{"value":"/ Create a new serializer.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":123730,"byte_end":123758,"line_start":37,"line_end":37,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":123931,"byte_end":123940,"line_start":46,"line_end":46,"column_start":8,"column_end":17},"name":"serialize","qualname":"<V2Serializer as serialization::Serializer>::serialize","value":"fn serialize<T, W, '_, '_, '_>(&'_ mut Self, &'_ Histogram<T>, &'_ mut W)\n-> Result<usize, V2SerializeError> where T: Counter, W: Write","parent":{"krate":0,"index":765},"children":[],"decl_id":{"krate":0,"index":767},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1018},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":132127,"byte_end":132153,"line_start":15,"line_end":15,"column_start":5,"column_end":31},"name":"InternalSerializationError","qualname":"::serialization::v2_deflate_serializer::V2DeflateSerializeError::InternalSerializationError","value":"V2DeflateSerializeError::InternalSerializationError(V2SerializeError)","parent":{"krate":0,"index":1017},"children":[],"decl_id":null,"docs":" The underlying serialization failed\n","sig":null,"attributes":[{"value":"/ The underlying serialization failed","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":132083,"byte_end":132122,"line_start":14,"line_end":14,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":1020},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":132154,"byte_end":132170,"line_start":15,"line_end":15,"column_start":32,"column_end":48},"name":"0","qualname":"::serialization::v2_deflate_serializer::V2DeflateSerializeError::InternalSerializationError::0","value":"serialization::v2_serializer::V2SerializeError","parent":{"krate":0,"index":1018},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1021},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":132210,"byte_end":132217,"line_start":17,"line_end":17,"column_start":5,"column_end":12},"name":"IoError","qualname":"::serialization::v2_deflate_serializer::V2DeflateSerializeError::IoError","value":"V2DeflateSerializeError::IoError(ErrorKind)","parent":{"krate":0,"index":1017},"children":[],"decl_id":null,"docs":" An i/o operation failed.\n","sig":null,"attributes":[{"value":"/ An i/o operation failed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":132177,"byte_end":132205,"line_start":16,"line_end":16,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":1023},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":132218,"byte_end":132227,"line_start":17,"line_end":17,"column_start":13,"column_end":22},"name":"0","qualname":"::serialization::v2_deflate_serializer::V2DeflateSerializeError::IoError::0","value":"std::io::ErrorKind","parent":{"krate":0,"index":1021},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1017},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":132053,"byte_end":132076,"line_start":13,"line_end":13,"column_start":10,"column_end":33},"name":"V2DeflateSerializeError","qualname":"::serialization::v2_deflate_serializer::V2DeflateSerializeError","value":"enum V2DeflateSerializeError {\n    InternalSerializationError(V2SerializeError),\n    IoError(ErrorKind),\n}","parent":null,"children":[{"krate":0,"index":1018},{"krate":0,"index":1021}],"decl_id":null,"docs":" Errors that occur during serialization.\n","sig":null,"attributes":[{"value":"/ Errors that occur during serialization.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":131955,"byte_end":131998,"line_start":11,"line_end":11,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":132310,"byte_end":132314,"line_start":21,"line_end":21,"column_start":8,"column_end":12},"name":"from","qualname":"<V2DeflateSerializeError as std::convert::From>::from","value":"fn from(std::io::Error) -> Self","parent":{"krate":2,"index":3169},"children":[],"decl_id":{"krate":2,"index":3171},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":517},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":132633,"byte_end":132652,"line_start":30,"line_end":30,"column_start":12,"column_end":31},"name":"V2DeflateSerializer","qualname":"::serialization::v2_deflate_serializer::V2DeflateSerializer","value":"V2DeflateSerializer {  }","parent":null,"children":[{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520}],"decl_id":null,"docs":" Serializer for the V2 + DEFLATE binary format.","sig":null,"attributes":[{"value":"/ Serializer for the V2 + DEFLATE binary format.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":132404,"byte_end":132454,"line_start":26,"line_end":26,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":132455,"byte_end":132458,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ It's called \"deflate\" to stay consistent with the naming used in the Java implementation, but","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":132459,"byte_end":132556,"line_start":28,"line_end":28,"column_start":1,"column_end":98}},{"value":"/ it actually uses zlib's wrapper format around plain DEFLATE.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":132557,"byte_end":132621,"line_start":29,"line_end":29,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":132797,"byte_end":132804,"line_start":37,"line_end":37,"column_start":8,"column_end":15},"name":"default","qualname":"<V2DeflateSerializer as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":132917,"byte_end":132920,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"new","qualname":"<V2DeflateSerializer>::new","value":"fn new() -> V2DeflateSerializer","parent":null,"children":[],"decl_id":null,"docs":" Create a new serializer.\n","sig":null,"attributes":[{"value":"/ Create a new serializer.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":132877,"byte_end":132905,"line_start":43,"line_end":43,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":133228,"byte_end":133237,"line_start":56,"line_end":56,"column_start":8,"column_end":17},"name":"serialize","qualname":"<V2DeflateSerializer as serialization::Serializer>::serialize","value":"fn serialize<T, W, '_, '_, '_>(&'_ mut Self, &'_ Histogram<T>, &'_ mut W)\n-> Result<usize, V2DeflateSerializeError> where T: Counter, W: Write","parent":{"krate":0,"index":765},"children":[],"decl_id":{"krate":0,"index":767},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1037},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":136515,"byte_end":136522,"line_start":14,"line_end":14,"column_start":5,"column_end":12},"name":"IoError","qualname":"::serialization::deserializer::DeserializeError::IoError","value":"DeserializeError::IoError(ErrorKind)","parent":{"krate":0,"index":1036},"children":[],"decl_id":null,"docs":" An i/o operation failed.\n","sig":null,"attributes":[{"value":"/ An i/o operation failed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":136482,"byte_end":136510,"line_start":13,"line_end":13,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":1039},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":136523,"byte_end":136532,"line_start":14,"line_end":14,"column_start":13,"column_end":22},"name":"0","qualname":"::serialization::deserializer::DeserializeError::IoError::0","value":"std::io::ErrorKind","parent":{"krate":0,"index":1037},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1040},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":136619,"byte_end":136632,"line_start":16,"line_end":16,"column_start":5,"column_end":18},"name":"InvalidCookie","qualname":"::serialization::deserializer::DeserializeError::InvalidCookie","value":"DeserializeError::InvalidCookie","parent":{"krate":0,"index":1036},"children":[],"decl_id":null,"docs":" The cookie (first 4 bytes) did not match that for any supported format.\n","sig":null,"attributes":[{"value":"/ The cookie (first 4 bytes) did not match that for any supported format.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":136539,"byte_end":136614,"line_start":15,"line_end":15,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1042},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":136770,"byte_end":136788,"line_start":19,"line_end":19,"column_start":5,"column_end":23},"name":"UnsupportedFeature","qualname":"::serialization::deserializer::DeserializeError::UnsupportedFeature","value":"DeserializeError::UnsupportedFeature","parent":{"krate":0,"index":1036},"children":[],"decl_id":null,"docs":" The histogram uses features that this implementation doesn't support (yet), so it cannot\n be deserialized correctly.\n","sig":null,"attributes":[{"value":"/ The histogram uses features that this implementation doesn't support (yet), so it cannot","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":136638,"byte_end":136730,"line_start":17,"line_end":17,"column_start":5,"column_end":97}},{"value":"/ be deserialized correctly.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":136735,"byte_end":136765,"line_start":18,"line_end":18,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1044},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":136871,"byte_end":136892,"line_start":21,"line_end":21,"column_start":5,"column_end":26},"name":"UnsuitableCounterType","qualname":"::serialization::deserializer::DeserializeError::UnsuitableCounterType","value":"DeserializeError::UnsuitableCounterType","parent":{"krate":0,"index":1036},"children":[],"decl_id":null,"docs":" A count exceeded what can be represented in the chosen counter type.\n","sig":null,"attributes":[{"value":"/ A count exceeded what can be represented in the chosen counter type.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":136794,"byte_end":136866,"line_start":20,"line_end":20,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1046},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":137046,"byte_end":137063,"line_start":24,"line_end":24,"column_start":5,"column_end":22},"name":"InvalidParameters","qualname":"::serialization::deserializer::DeserializeError::InvalidParameters","value":"DeserializeError::InvalidParameters","parent":{"krate":0,"index":1036},"children":[],"decl_id":null,"docs":" The histogram instance could not be created because the serialized parameters were invalid\n (e.g. lowest value, highest value, etc.)\n","sig":null,"attributes":[{"value":"/ The histogram instance could not be created because the serialized parameters were invalid","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":136898,"byte_end":136992,"line_start":22,"line_end":22,"column_start":5,"column_end":99}},{"value":"/ (e.g. lowest value, highest value, etc.)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":136997,"byte_end":137041,"line_start":23,"line_end":23,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1048},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":137152,"byte_end":137169,"line_start":26,"line_end":26,"column_start":5,"column_end":22},"name":"UsizeTypeTooSmall","qualname":"::serialization::deserializer::DeserializeError::UsizeTypeTooSmall","value":"DeserializeError::UsizeTypeTooSmall","parent":{"krate":0,"index":1036},"children":[],"decl_id":null,"docs":" The current system's pointer width cannot represent the encoded histogram.\n","sig":null,"attributes":[{"value":"/ The current system's pointer width cannot represent the encoded histogram.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":137069,"byte_end":137147,"line_start":25,"line_end":25,"column_start":5,"column_end":83}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1050},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":137262,"byte_end":137281,"line_start":28,"line_end":28,"column_start":5,"column_end":24},"name":"EncodedArrayTooLong","qualname":"::serialization::deserializer::DeserializeError::EncodedArrayTooLong","value":"DeserializeError::EncodedArrayTooLong","parent":{"krate":0,"index":1036},"children":[],"decl_id":null,"docs":" The encoded array is longer than it should be for the histogram's value range.\n","sig":null,"attributes":[{"value":"/ The encoded array is longer than it should be for the histogram's value range.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":137175,"byte_end":137257,"line_start":27,"line_end":27,"column_start":5,"column_end":87}}]},{"kind":"Enum","id":{"krate":0,"index":1036},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":136459,"byte_end":136475,"line_start":12,"line_end":12,"column_start":10,"column_end":26},"name":"DeserializeError","qualname":"::serialization::deserializer::DeserializeError","value":"enum DeserializeError {\n    IoError(ErrorKind),\n    InvalidCookie,\n    UnsupportedFeature,\n    UnsuitableCounterType,\n    InvalidParameters,\n    UsizeTypeTooSmall,\n    EncodedArrayTooLong,\n}","parent":null,"children":[{"krate":0,"index":1037},{"krate":0,"index":1040},{"krate":0,"index":1042},{"krate":0,"index":1044},{"krate":0,"index":1046},{"krate":0,"index":1048},{"krate":0,"index":1050}],"decl_id":null,"docs":" Errors that can happen during deserialization.\n","sig":null,"attributes":[{"value":"/ Errors that can happen during deserialization.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":136354,"byte_end":136404,"line_start":10,"line_end":10,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":137356,"byte_end":137360,"line_start":32,"line_end":32,"column_start":8,"column_end":12},"name":"from","qualname":"<DeserializeError as std::convert::From>::from","value":"fn from(std::io::Error) -> Self","parent":{"krate":2,"index":3169},"children":[],"decl_id":{"krate":2,"index":3171},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":589},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":137680,"byte_end":137692,"line_start":41,"line_end":41,"column_start":12,"column_end":24},"name":"Deserializer","qualname":"::serialization::deserializer::Deserializer","value":"Deserializer {  }","parent":null,"children":[{"krate":0,"index":590}],"decl_id":null,"docs":" Deserializer for all supported formats.","sig":null,"attributes":[{"value":"/ Deserializer for all supported formats.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":137443,"byte_end":137486,"line_start":37,"line_end":37,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":137487,"byte_end":137490,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Since the serialization formats all include some magic bytes that allow reliable identification","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":137491,"byte_end":137590,"line_start":39,"line_end":39,"column_start":1,"column_end":100}},{"value":"/ of the different formats, only one Deserializer implementation is needed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":137591,"byte_end":137668,"line_start":40,"line_end":40,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":137763,"byte_end":137770,"line_start":46,"line_end":46,"column_start":8,"column_end":15},"name":"default","qualname":"<Deserializer as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":137878,"byte_end":137881,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<Deserializer>::new","value":"fn new() -> Deserializer","parent":null,"children":[],"decl_id":null,"docs":" Create a new deserializer.\n","sig":null,"attributes":[{"value":"/ Create a new deserializer.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":137836,"byte_end":137866,"line_start":52,"line_end":52,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":138208,"byte_end":138219,"line_start":63,"line_end":63,"column_start":12,"column_end":23},"name":"deserialize","qualname":"<Deserializer>::deserialize","value":"fn deserialize<T, R, '_, '_>(&'_ mut Self, &'_ mut R)\n-> Result<Histogram<T>, DeserializeError> where T: Counter, R: Read","parent":null,"children":[],"decl_id":null,"docs":" Deserialize an encoded histogram from the provided reader.","sig":null,"attributes":[{"value":"/ Deserialize an encoded histogram from the provided reader.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":137983,"byte_end":138045,"line_start":59,"line_end":59,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":138050,"byte_end":138053,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ Note that `&[u8]` and `Cursor` are convenient implementations of `Read` if you have some","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":138058,"byte_end":138150,"line_start":61,"line_end":61,"column_start":5,"column_end":97}},{"value":"/ bytes already in slice or `Vec` form.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":138155,"byte_end":138196,"line_start":62,"line_end":62,"column_start":5,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":627},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"interval_log","qualname":"::serialization::interval_log","value":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","parent":null,"children":[{"krate":0,"index":628},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":635},{"krate":0,"index":638},{"krate":0,"index":641},{"krate":0,"index":644},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":651},{"krate":0,"index":654},{"krate":0,"index":657},{"krate":0,"index":660},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":667},{"krate":0,"index":670},{"krate":0,"index":673},{"krate":0,"index":678},{"krate":0,"index":680},{"krate":0,"index":691},{"krate":0,"index":697},{"krate":0,"index":1064},{"krate":0,"index":1072},{"krate":0,"index":705},{"krate":0,"index":708},{"krate":0,"index":718},{"krate":0,"index":1075},{"krate":0,"index":1079},{"krate":0,"index":1082},{"krate":0,"index":1084},{"krate":0,"index":1088},{"krate":0,"index":1091},{"krate":0,"index":727},{"krate":0,"index":732},{"krate":0,"index":1093},{"krate":0,"index":1100},{"krate":0,"index":1102},{"krate":0,"index":1106},{"krate":0,"index":736},{"krate":0,"index":1109},{"krate":0,"index":1120},{"krate":0,"index":1122},{"krate":0,"index":1126},{"krate":0,"index":1129},{"krate":0,"index":1132},{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":743},{"krate":0,"index":748},{"krate":0,"index":751},{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":1138},{"krate":0,"index":1216},{"krate":0,"index":1294},{"krate":0,"index":1465},{"krate":0,"index":1531},{"krate":0,"index":1588},{"krate":0,"index":1645},{"krate":0,"index":757},{"krate":0,"index":759},{"krate":0,"index":1665}],"decl_id":null,"docs":" Interval log parsing and writing.","sig":null,"attributes":[{"value":"/ Interval log parsing and writing.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":146810,"byte_end":146847,"line_start":1,"line_end":1,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":146848,"byte_end":146851,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Interval logs, as handled by the Java implementation's `HistogramLogWriter`,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":146852,"byte_end":146932,"line_start":3,"line_end":3,"column_start":1,"column_end":81}},{"value":"/ `HistogramLogReader`, and `HistogramLogProcessor`, are a way to record a sequence of histograms","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":146933,"byte_end":147032,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"/ over time. Suppose you were running a load test for an hour: you might want to record a","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":147033,"byte_end":147124,"line_start":5,"line_end":5,"column_start":1,"column_end":92}},{"value":"/ histogram per second or minute so that you could correlate measurements with behavior you might","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":147125,"byte_end":147224,"line_start":6,"line_end":6,"column_start":1,"column_end":100}},{"value":"/ see in logs, etc.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":147225,"byte_end":147246,"line_start":7,"line_end":7,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":147247,"byte_end":147250,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ An interval log contains some initial metadata, then a sequence of histograms, each with some","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":147251,"byte_end":147348,"line_start":9,"line_end":9,"column_start":1,"column_end":98}},{"value":"/ additional metadata (timestamps, etc). See `IntervalLogHistogram`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":147349,"byte_end":147419,"line_start":10,"line_end":10,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":147420,"byte_end":147423,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ The intervals in the log should be ordered by start timestamp. It's possible to write (and","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":147424,"byte_end":147518,"line_start":12,"line_end":12,"column_start":1,"column_end":95}},{"value":"/ parse) logs with intervals in any order, but the expectation is that they will be sorted.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":147519,"byte_end":147612,"line_start":13,"line_end":13,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":147613,"byte_end":147616,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ To parse a log, see `IntervalLogIterator`. To write a log, see `IntervalLogWriterBuilder`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":147617,"byte_end":147711,"line_start":15,"line_end":15,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":147712,"byte_end":147715,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Timestamps","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":147716,"byte_end":147732,"line_start":17,"line_end":17,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":147733,"byte_end":147736,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Each interval has a timestamp in seconds associated with it. However, it's not necessarily as","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":147737,"byte_end":147834,"line_start":19,"line_end":19,"column_start":1,"column_end":98}},{"value":"/ simple as just interpreting the number as seconds since the epoch. There are two optional pieces","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":147835,"byte_end":147935,"line_start":20,"line_end":20,"column_start":1,"column_end":101}},{"value":"/ of header metadata: \"StartTime\" and \"BaseTime\". Neither, one, or both of these may be present.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":147936,"byte_end":148034,"line_start":21,"line_end":21,"column_start":1,"column_end":99}},{"value":"/ It is possible to have multiple StartTime or BaseTime entries in the log, or even interleaved","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":148035,"byte_end":148132,"line_start":22,"line_end":22,"column_start":1,"column_end":98}},{"value":"/ with interval histograms, but that is confusing, so this API prevents you from doing so.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":148133,"byte_end":148225,"line_start":23,"line_end":23,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":148226,"byte_end":148229,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ When BaseTime is present, per-interval timestamps are the number of seconds since BaseTime. When","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":148230,"byte_end":148330,"line_start":25,"line_end":25,"column_start":1,"column_end":101}},{"value":"/ it is absent, the per-interval timestamps represent fractional seconds since the epoch (aka","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":148331,"byte_end":148426,"line_start":26,"line_end":26,"column_start":1,"column_end":96}},{"value":"/ Unix time). BaseTime is useful because it allows you to have somewhat human-readable timestamps","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":148427,"byte_end":148526,"line_start":27,"line_end":27,"column_start":1,"column_end":100}},{"value":"/ for each interval -- it's easier to see 245.3 and see that that's 4 minutes after the start of","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":148527,"byte_end":148625,"line_start":28,"line_end":28,"column_start":1,"column_end":99}},{"value":"/ whatever it is you're doing than it is to mentally parse a Unix timestamp. Naturally, you can","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":148626,"byte_end":148723,"line_start":29,"line_end":29,"column_start":1,"column_end":98}},{"value":"/ always calculate the deltas after the fact if you're willing to write a little tooling, but in","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":148724,"byte_end":148822,"line_start":30,"line_end":30,"column_start":1,"column_end":99}},{"value":"/ some cases log files are consumed by humans too.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":148823,"byte_end":148875,"line_start":31,"line_end":31,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":148876,"byte_end":148879,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ While BaseTime is used to redefine per-interval timestamps for human readability, StartTime","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":148880,"byte_end":148975,"line_start":33,"line_end":33,"column_start":1,"column_end":96}},{"value":"/ provides information about when the process that is generating the log reached some \"start\"","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":148976,"byte_end":149071,"line_start":34,"line_end":34,"column_start":1,"column_end":96}},{"value":"/ condition. It's frequently the case that intervals will start some seconds after the process","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":149072,"byte_end":149168,"line_start":35,"line_end":35,"column_start":1,"column_end":97}},{"value":"/ started, whether due to initial warmup before a benchmark or because it just takes a","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":149169,"byte_end":149257,"line_start":36,"line_end":36,"column_start":1,"column_end":89}},{"value":"/ while to start up. If this is relevant to your workload, use StartTime to record the actual","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":149258,"byte_end":149353,"line_start":37,"line_end":37,"column_start":1,"column_end":96}},{"value":"/ process start time (or other relevant \"start\" condition, like when a benchmark begins on an","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":149354,"byte_end":149449,"line_start":38,"line_end":38,"column_start":1,"column_end":96}},{"value":"/ already long-running process). You could then use this when processing a log to more accurately","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":149450,"byte_end":149549,"line_start":39,"line_end":39,"column_start":1,"column_end":100}},{"value":"/ plot interval data over time. Put differently, StartTime doesn't change the interpretation of","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":149550,"byte_end":149647,"line_start":40,"line_end":40,"column_start":1,"column_end":98}},{"value":"/ interval timestamps directly like BaseTime; instead, it provides a hint to the consumer of the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":149648,"byte_end":149746,"line_start":41,"line_end":41,"column_start":1,"column_end":99}},{"value":"/ log that the \"start\" (whatever that means to you -- process start, etc) was at a different time","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":149747,"byte_end":149846,"line_start":42,"line_end":42,"column_start":1,"column_end":100}},{"value":"/ than that associated with the first interval.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":149847,"byte_end":149896,"line_start":43,"line_end":43,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":149897,"byte_end":149900,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ #### Example scenario","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":149901,"byte_end":149926,"line_start":45,"line_end":45,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":149927,"byte_end":149930,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ To explain their usage, suppose we're running a multi-hour benchmark on a process that starts","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":149931,"byte_end":150028,"line_start":47,"line_end":47,"column_start":1,"column_end":98}},{"value":"/ up at a Unix time of 1500000000. We'll be recording separate log files per hour just to","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":150029,"byte_end":150120,"line_start":48,"line_end":48,"column_start":1,"column_end":92}},{"value":"/ demonstrate the interaction between BaseTime, StartTime, and interval log timestamps.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":150121,"byte_end":150210,"line_start":49,"line_end":49,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":150211,"byte_end":150214,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ The process starts up, warms up its caches, JIT compiles, etc and is ready to start its","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":150215,"byte_end":150306,"line_start":51,"line_end":51,"column_start":1,"column_end":92}},{"value":"/ benchmark 40 seconds later, so we create the first interval log file and record a StartTime of","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":150307,"byte_end":150405,"line_start":52,"line_end":52,"column_start":1,"column_end":99}},{"value":"/ 1500000040. If the actual process start (rather than benchmark start) is more useful to you,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":150406,"byte_end":150502,"line_start":53,"line_end":53,"column_start":1,"column_end":97}},{"value":"/ using a StartTime of 1500000000 would be reasonable, but we'll stick with 1500000040.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":150503,"byte_end":150592,"line_start":54,"line_end":54,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":150593,"byte_end":150596,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ We'll use a BaseTime of 1500000040 because that's when the benchmark began, but 1500000000 would","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":150597,"byte_end":150697,"line_start":56,"line_end":56,"column_start":1,"column_end":101}},{"value":"/ also be a reasonable choice here -- it would just make the per-interval deltas 40 seconds","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":150698,"byte_end":150791,"line_start":57,"line_end":57,"column_start":1,"column_end":94}},{"value":"/ larger, which might be a more useful way of recording them, depending on the situation.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":150792,"byte_end":150883,"line_start":58,"line_end":58,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":150884,"byte_end":150887,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ The benchmark produces an interval histogram for each 60 seconds of workload, so the first one","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":150888,"byte_end":150986,"line_start":60,"line_end":60,"column_start":1,"column_end":99}},{"value":"/ is ready at 1500000100, and is recorded with a delta timestamp of 60. This goes on for another","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":150987,"byte_end":151085,"line_start":61,"line_end":61,"column_start":1,"column_end":99}},{"value":"/ hour, with the last one being 3540 seconds after the start of the benchmark with a corresponding","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":151086,"byte_end":151186,"line_start":62,"line_end":62,"column_start":1,"column_end":101}},{"value":"/ delta of 3540.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":151187,"byte_end":151205,"line_start":63,"line_end":63,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":151206,"byte_end":151209,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ At the start of the second hour, the time is 1500003640 and the first log file is ended (which","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":151210,"byte_end":151308,"line_start":65,"line_end":65,"column_start":1,"column_end":99}},{"value":"/ is straightforward: just stop writing to it and close the file) and the second log file is","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":151309,"byte_end":151403,"line_start":66,"line_end":66,"column_start":1,"column_end":95}},{"value":"/ opened. It still uses a StartTime of 1500000040 because we want to represent that this log","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":151404,"byte_end":151498,"line_start":67,"line_end":67,"column_start":1,"column_end":95}},{"value":"/ pertains to something that started an hour ago, but we'll use a BaseTime of 1500003640 so that","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":151499,"byte_end":151597,"line_start":68,"line_end":68,"column_start":1,"column_end":99}},{"value":"/ our delta timestamps start over at 0. Again, you could just as well decide to use the same","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":151598,"byte_end":151692,"line_start":69,"line_end":69,"column_start":1,"column_end":95}},{"value":"/ BaseTime of 1500000040 if you prefer, but it's arguably easier for a human to parse \"h hours","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":151693,"byte_end":151789,"line_start":70,"line_end":70,"column_start":1,"column_end":97}},{"value":"/ into the benchmark, s seconds past the hour\" than it is to mentally divide by 3600, so we'll","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":151790,"byte_end":151886,"line_start":71,"line_end":71,"column_start":1,"column_end":97}},{"value":"/ go with the new BaseTime.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":151887,"byte_end":151916,"line_start":72,"line_end":72,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":151917,"byte_end":151920,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ Suppose now you wanted to process these logs and show information (e.g. the 0.999th quantile of","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":151921,"byte_end":152020,"line_start":74,"line_end":74,"column_start":1,"column_end":100}},{"value":"/ each interval) as the y-axis on a plot where time is the x-axis. You would want to have","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":152021,"byte_end":152112,"line_start":75,"line_end":75,"column_start":1,"column_end":92}},{"value":"/ StartTime be the zero of the x-axis. For each interval, calculate the Unix time by adding its","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":152113,"byte_end":152210,"line_start":76,"line_end":76,"column_start":1,"column_end":98}},{"value":"/ timestamp to BaseTime, where BaseTime is assumed to be zero if it's not specified. The point on","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":152211,"byte_end":152310,"line_start":77,"line_end":77,"column_start":1,"column_end":100}},{"value":"/ the x-axis for that interval would be the result of subtracting StartTime from that Unix time.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":152311,"byte_end":152409,"line_start":78,"line_end":78,"column_start":1,"column_end":99}},{"value":"/ As an example, the 17th minute in the 2nd hour would have an interval timestamp of approximately","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":152410,"byte_end":152510,"line_start":79,"line_end":79,"column_start":1,"column_end":101}},{"value":"/ 1020, which when added to 1500003640 is 1500004660. The difference between StartTime and then is","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":152511,"byte_end":152611,"line_start":80,"line_end":80,"column_start":1,"column_end":101}},{"value":"/ 4620. You might choose to display that in units of minutes, which would be 4620 / 60 = 77.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":152612,"byte_end":152706,"line_start":81,"line_end":81,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":152707,"byte_end":152710,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ #### Java interop","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":152711,"byte_end":152732,"line_start":83,"line_end":83,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":152733,"byte_end":152736,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ Since you may be interoperating with the Java reference implementation, here's a summary of the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":152737,"byte_end":152836,"line_start":85,"line_end":85,"column_start":1,"column_end":100}},{"value":"/ logic used by the `HistogramLogReader` class for StartTime and BaseTime. It's slightly different","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":152837,"byte_end":152937,"line_start":86,"line_end":86,"column_start":1,"column_end":101}},{"value":"/ than what was described above, presumably for legacy compatibility reasons. This class stores","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":152938,"byte_end":153035,"line_start":87,"line_end":87,"column_start":1,"column_end":98}},{"value":"/ the StartTime as a field which is exposed via a getter, and also integrates filtering intervals","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":153036,"byte_end":153135,"line_start":88,"line_end":88,"column_start":1,"column_end":100}},{"value":"/ based on windows for either \"absolute\" (Unix time) timestamps or \"offset\" timestamps (delta vs","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":153136,"byte_end":153234,"line_start":89,"line_end":89,"column_start":1,"column_end":99}},{"value":"/ the StartTime), so if you're using that filtering functionality, you need to understand how it","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":153235,"byte_end":153333,"line_start":90,"line_end":90,"column_start":1,"column_end":99}},{"value":"/ ends up setting its internal version of StartTime.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":153334,"byte_end":153388,"line_start":91,"line_end":91,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":153389,"byte_end":153392,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ - Neither StartTime nor BaseTime are present: interval timestamps are interpreted as seconds","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":153393,"byte_end":153489,"line_start":93,"line_end":93,"column_start":1,"column_end":97}},{"value":"/ since the epoch. The first interval's timestamp is stored to the StartTime field.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":153490,"byte_end":153575,"line_start":94,"line_end":94,"column_start":1,"column_end":86}},{"value":"/ - StartTime is present: StartTime is a number of seconds since epoch, and interval timestamps","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":153576,"byte_end":153673,"line_start":95,"line_end":95,"column_start":1,"column_end":98}},{"value":"/ may be interpreted as deltas to be added to StartTime or as \"absolute\" Unix time depending on a","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":153674,"byte_end":153773,"line_start":96,"line_end":96,"column_start":1,"column_end":100}},{"value":"/ heuristic. In other words, the heuristic chooses between setting the effective BaseTime to 0 or","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":153774,"byte_end":153873,"line_start":97,"line_end":97,"column_start":1,"column_end":100}},{"value":"/ to StartTime. Specifically, the heuristic interprets interval timestamps as deltas if they are","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":153874,"byte_end":153972,"line_start":98,"line_end":98,"column_start":1,"column_end":99}},{"value":"/ more than a year's worth of seconds smaller than StartTime and as absolute timestamps otherwise.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":153973,"byte_end":154073,"line_start":99,"line_end":99,"column_start":1,"column_end":101}},{"value":"/ - BaseTime is present: BaseTime is a number of seconds since epoch, and interval timestamps are","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":154074,"byte_end":154173,"line_start":100,"line_end":100,"column_start":1,"column_end":100}},{"value":"/ interpreted as deltas. The first interval's (delta) timestamp is stored to the StartTime field.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":154174,"byte_end":154273,"line_start":101,"line_end":101,"column_start":1,"column_end":100}},{"value":"/ This is likely a bug, since StartTime should be an absolute timestamp, and appears to cause","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":154274,"byte_end":154369,"line_start":102,"line_end":102,"column_start":1,"column_end":96}},{"value":"/ erroneous behavior when filtering by offset timestamps.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":154370,"byte_end":154429,"line_start":103,"line_end":103,"column_start":1,"column_end":60}},{"value":"/ - BaseTime and StartTime are present: The BaseTime is used like it is when it's the only one","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":154430,"byte_end":154526,"line_start":104,"line_end":104,"column_start":1,"column_end":97}},{"value":"/ present: it's a number of seconds since epoch that serves as the starting point for the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":154527,"byte_end":154618,"line_start":105,"line_end":105,"column_start":1,"column_end":92}},{"value":"/ per-interval deltas to get a wall-clock time for each interval. No heuristics are applied to","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":154619,"byte_end":154715,"line_start":106,"line_end":106,"column_start":1,"column_end":97}},{"value":"/ guess whether or not the intervals are absolute or deltas.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":154716,"byte_end":154778,"line_start":107,"line_end":107,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":154779,"byte_end":154782,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ The Java implementation also supports re-setting the StartTime and BaseTime if those entries","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":154783,"byte_end":154879,"line_start":109,"line_end":109,"column_start":1,"column_end":97}},{"value":"/ exist more than once in the log. Suppose that you had an hour's worth of per-minute intervals,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":154880,"byte_end":154978,"line_start":110,"line_end":110,"column_start":1,"column_end":99}},{"value":"/ and then you set another StartTime to the current time and added a second hour's worth of","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":154979,"byte_end":155072,"line_start":111,"line_end":111,"column_start":1,"column_end":94}},{"value":"/ intervals. Filtering for \"all intervals between 5 and 10 minutes past the start\" would result in","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":155073,"byte_end":155173,"line_start":112,"line_end":112,"column_start":1,"column_end":101}},{"value":"/ two disjoint sequences of intervals, which is at the very least arguably unintuitive. However,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":155174,"byte_end":155272,"line_start":113,"line_end":113,"column_start":1,"column_end":99}},{"value":"/ you may well be working with log files that are structured that way, so this implementation's","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":155273,"byte_end":155370,"line_start":114,"line_end":114,"column_start":1,"column_end":98}},{"value":"/ `IntervalLogIterator` will expose multiple StartTime, etc, entries as they appear in the log","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":155371,"byte_end":155467,"line_start":115,"line_end":115,"column_start":1,"column_end":97}},{"value":"/ file.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":155468,"byte_end":155477,"line_start":116,"line_end":116,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":155478,"byte_end":155481,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":155482,"byte_end":155496,"line_start":118,"line_end":118,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":155497,"byte_end":155500,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ Parse a single interval from a log.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":155501,"byte_end":155540,"line_start":120,"line_end":120,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":155541,"byte_end":155544,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":155545,"byte_end":155552,"line_start":122,"line_end":122,"column_start":1,"column_end":8}},{"value":"/ use std::time;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":155553,"byte_end":155571,"line_start":123,"line_end":123,"column_start":1,"column_end":19}},{"value":"/ use hdrhistogram::serialization::interval_log;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":155572,"byte_end":155622,"line_start":124,"line_end":124,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":155623,"byte_end":155626,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ // two newline-separated log lines: a comment, then an interval","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":155627,"byte_end":155694,"line_start":126,"line_end":126,"column_start":1,"column_end":68}},{"value":"/ let log = b\"#I'm a comment\\nTag=t,0.127,1.007,2.769,base64EncodedHisto\\n\";","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":155695,"byte_end":155773,"line_start":127,"line_end":127,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":155774,"byte_end":155777,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ let mut iter = interval_log::IntervalLogIterator::new(&log[..]);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":155778,"byte_end":155846,"line_start":129,"line_end":129,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":155847,"byte_end":155850,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ // the comment is consumed and ignored by the parser, so the first event is an Interval","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":155851,"byte_end":155942,"line_start":131,"line_end":131,"column_start":1,"column_end":92}},{"value":"/ match iter.next().unwrap() {","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":155943,"byte_end":155975,"line_start":132,"line_end":132,"column_start":1,"column_end":33}},{"value":"/     Ok(interval_log::LogEntry::Interval(h)) => {","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":155976,"byte_end":156028,"line_start":133,"line_end":133,"column_start":1,"column_end":53}},{"value":"/         assert_eq!(time::Duration::new(0, 127_000_000), h.start_timestamp());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156029,"byte_end":156110,"line_start":134,"line_end":134,"column_start":1,"column_end":82}},{"value":"/     }","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156111,"byte_end":156120,"line_start":135,"line_end":135,"column_start":1,"column_end":10}},{"value":"/     _ => panic!()","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156121,"byte_end":156142,"line_start":136,"line_end":136,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156143,"byte_end":156148,"line_start":137,"line_end":137,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156149,"byte_end":156152,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ // there are no more lines in the log; iteration complete","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156153,"byte_end":156214,"line_start":139,"line_end":139,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(None, iter.next());","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156215,"byte_end":156249,"line_start":140,"line_end":140,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156250,"byte_end":156257,"line_start":141,"line_end":141,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156258,"byte_end":156261,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ Skip logs that started before 3 seconds.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156262,"byte_end":156306,"line_start":143,"line_end":143,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156307,"byte_end":156310,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156311,"byte_end":156318,"line_start":145,"line_end":145,"column_start":1,"column_end":8}},{"value":"/ use hdrhistogram::serialization::interval_log;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156319,"byte_end":156369,"line_start":146,"line_end":146,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156370,"byte_end":156373,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ let log = \"\\","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156374,"byte_end":156390,"line_start":148,"line_end":148,"column_start":1,"column_end":17}},{"value":"/     #I'm a comment\\n\\","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156391,"byte_end":156416,"line_start":149,"line_end":149,"column_start":1,"column_end":26}},{"value":"/     Tag=a,0.123,1.007,2.769,base64EncodedHisto\\n\\","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156417,"byte_end":156470,"line_start":150,"line_end":150,"column_start":1,"column_end":54}},{"value":"/     1.456,1.007,2.769,base64EncodedHisto\\n\\","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156471,"byte_end":156518,"line_start":151,"line_end":151,"column_start":1,"column_end":48}},{"value":"/     3.789,1.007,2.769,base64EncodedHisto\\n\\","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156519,"byte_end":156566,"line_start":152,"line_end":152,"column_start":1,"column_end":48}},{"value":"/     Tag=b,4.123,1.007,2.769,base64EncodedHisto\\n\\","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156567,"byte_end":156620,"line_start":153,"line_end":153,"column_start":1,"column_end":54}},{"value":"/     5.456,1.007,2.769,base64EncodedHisto\\n\\","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156621,"byte_end":156668,"line_start":154,"line_end":154,"column_start":1,"column_end":48}},{"value":"/     #Another comment\\n\"","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156669,"byte_end":156696,"line_start":155,"line_end":155,"column_start":1,"column_end":28}},{"value":"/ .as_bytes();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156697,"byte_end":156713,"line_start":156,"line_end":156,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156714,"byte_end":156717,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ let iter = interval_log::IntervalLogIterator::new(&log);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156718,"byte_end":156778,"line_start":158,"line_end":158,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156779,"byte_end":156782,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ let count = iter","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156783,"byte_end":156803,"line_start":160,"line_end":160,"column_start":1,"column_end":21}},{"value":"/     // only look at intervals (which are the only non-comment lines in this log)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156804,"byte_end":156888,"line_start":161,"line_end":161,"column_start":1,"column_end":85}},{"value":"/     .filter_map(|e| match e {","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156889,"byte_end":156922,"line_start":162,"line_end":162,"column_start":1,"column_end":34}},{"value":"/         Ok(interval_log::LogEntry::Interval(ilh)) => Some(ilh),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156923,"byte_end":156990,"line_start":163,"line_end":163,"column_start":1,"column_end":68}},{"value":"/          _ => None","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":156991,"byte_end":157013,"line_start":164,"line_end":164,"column_start":1,"column_end":23}},{"value":"/     })","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157014,"byte_end":157024,"line_start":165,"line_end":165,"column_start":1,"column_end":11}},{"value":"/     // do any filtering you want","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157025,"byte_end":157061,"line_start":166,"line_end":166,"column_start":1,"column_end":37}},{"value":"/     .filter(|ilh| ilh.start_timestamp().as_secs() >= 3)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157062,"byte_end":157121,"line_start":167,"line_end":167,"column_start":1,"column_end":60}},{"value":"/     .count();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157122,"byte_end":157139,"line_start":168,"line_end":168,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157140,"byte_end":157143,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(3, count);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157144,"byte_end":157169,"line_start":170,"line_end":170,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157170,"byte_end":157177,"line_start":171,"line_end":171,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157178,"byte_end":157181,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ Write a log.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157182,"byte_end":157198,"line_start":173,"line_end":173,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157199,"byte_end":157202,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157203,"byte_end":157210,"line_start":175,"line_end":175,"column_start":1,"column_end":8}},{"value":"/ use std::{str, time};","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157211,"byte_end":157236,"line_start":176,"line_end":176,"column_start":1,"column_end":26}},{"value":"/ use hdrhistogram;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157237,"byte_end":157258,"line_start":177,"line_end":177,"column_start":1,"column_end":22}},{"value":"/ use hdrhistogram::serialization;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157259,"byte_end":157295,"line_start":178,"line_end":178,"column_start":1,"column_end":37}},{"value":"/ use hdrhistogram::serialization::interval_log;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157296,"byte_end":157346,"line_start":179,"line_end":179,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157347,"byte_end":157350,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ let mut buf = Vec::new();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157351,"byte_end":157380,"line_start":181,"line_end":181,"column_start":1,"column_end":30}},{"value":"/ let mut serializer = serialization::V2Serializer::new();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157381,"byte_end":157441,"line_start":182,"line_end":182,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157442,"byte_end":157445,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ let mut h = hdrhistogram::Histogram::<u64>::new_with_bounds(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157446,"byte_end":157510,"line_start":184,"line_end":184,"column_start":1,"column_end":65}},{"value":"/     1, u64::max_value(), 3).unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157511,"byte_end":157552,"line_start":185,"line_end":185,"column_start":1,"column_end":42}},{"value":"/ h.record(12345).unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157553,"byte_end":157582,"line_start":186,"line_end":186,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157583,"byte_end":157586,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ // limit scope of mutable borrow of `buf`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157587,"byte_end":157632,"line_start":188,"line_end":188,"column_start":1,"column_end":46}},{"value":"/ {","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157633,"byte_end":157638,"line_start":189,"line_end":189,"column_start":1,"column_end":6}},{"value":"/     let now = time::SystemTime::now();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157639,"byte_end":157681,"line_start":190,"line_end":190,"column_start":1,"column_end":43}},{"value":"/     let mut log_writer = interval_log::IntervalLogWriterBuilder::new()","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157682,"byte_end":157756,"line_start":191,"line_end":191,"column_start":1,"column_end":75}},{"value":"/         .add_comment(\"Comments are great\")","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157757,"byte_end":157803,"line_start":192,"line_end":192,"column_start":1,"column_end":47}},{"value":"/         .with_start_time(now)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157804,"byte_end":157837,"line_start":193,"line_end":193,"column_start":1,"column_end":34}},{"value":"/         .begin_log_with(&mut buf, &mut serializer)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157838,"byte_end":157892,"line_start":194,"line_end":194,"column_start":1,"column_end":55}},{"value":"/         .unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157893,"byte_end":157915,"line_start":195,"line_end":195,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157916,"byte_end":157919,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/     log_writer.write_comment(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157920,"byte_end":157953,"line_start":197,"line_end":197,"column_start":1,"column_end":34}},{"value":"/         \"You can have comments anywhere in the log\").unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":157954,"byte_end":158020,"line_start":198,"line_end":198,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":158021,"byte_end":158024,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/     log_writer","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":158025,"byte_end":158043,"line_start":200,"line_end":200,"column_start":1,"column_end":19}},{"value":"/         .write_histogram(","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":158044,"byte_end":158073,"line_start":201,"line_end":201,"column_start":1,"column_end":30}},{"value":"/             &h,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":158074,"byte_end":158093,"line_start":202,"line_end":202,"column_start":1,"column_end":20}},{"value":"/             now.elapsed().unwrap(),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":158094,"byte_end":158133,"line_start":203,"line_end":203,"column_start":1,"column_end":40}},{"value":"/             time::Duration::new(12, 345_678_901),","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":158134,"byte_end":158187,"line_start":204,"line_end":204,"column_start":1,"column_end":54}},{"value":"/             interval_log::Tag::new(\"im-a-tag\")","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":158188,"byte_end":158238,"line_start":205,"line_end":205,"column_start":1,"column_end":51}},{"value":"/         )","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":158239,"byte_end":158252,"line_start":206,"line_end":206,"column_start":1,"column_end":14}},{"value":"/         .unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":158253,"byte_end":158275,"line_start":207,"line_end":207,"column_start":1,"column_end":23}},{"value":"/ }","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":158276,"byte_end":158281,"line_start":208,"line_end":208,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":158282,"byte_end":158285,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ // `buf` is now full of stuff; we check for the first line","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":158286,"byte_end":158348,"line_start":210,"line_end":210,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(\"#Comments are great\\n\", &str::from_utf8(&buf).unwrap()[0..20]);","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":158349,"byte_end":158428,"line_start":211,"line_end":211,"column_start":1,"column_end":80}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":158429,"byte_end":158436,"line_start":212,"line_end":212,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":673},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":158834,"byte_end":158858,"line_start":226,"line_end":226,"column_start":12,"column_end":36},"name":"IntervalLogWriterBuilder","qualname":"::serialization::interval_log::IntervalLogWriterBuilder","value":"IntervalLogWriterBuilder {  }","parent":null,"children":[{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677}],"decl_id":null,"docs":" Prepare an `IntervalLogWriter`.","sig":null,"attributes":[{"value":"/ Prepare an `IntervalLogWriter`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":158615,"byte_end":158650,"line_start":222,"line_end":222,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":158651,"byte_end":158654,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ This type only allows writing comments and headers. Once you're done writing those things, use","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":158655,"byte_end":158753,"line_start":224,"line_end":224,"column_start":1,"column_end":99}},{"value":"/ `into_log_writer()` to convert this into an `IntervalLogWriter`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":158754,"byte_end":158822,"line_start":225,"line_end":225,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":159027,"byte_end":159034,"line_start":234,"line_end":234,"column_start":8,"column_end":15},"name":"default","qualname":"<IntervalLogWriterBuilder as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":159220,"byte_end":159223,"line_start":241,"line_end":241,"column_start":12,"column_end":15},"name":"new","qualname":"<IntervalLogWriterBuilder>::new","value":"fn new() -> IntervalLogWriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new log writer that writes to `writer` and serializes histograms with `serializer`.\n","sig":null,"attributes":[{"value":"/ Create a new log writer that writes to `writer` and serializes histograms with `serializer`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":159112,"byte_end":159208,"line_start":240,"line_end":240,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":159609,"byte_end":159620,"line_start":253,"line_end":253,"column_start":12,"column_end":23},"name":"add_comment","qualname":"<IntervalLogWriterBuilder>::add_comment","value":"fn add_comment<'_, '_>(&'_ mut Self, &'_ str) -> &'_ mut Self","parent":null,"children":[],"decl_id":null,"docs":" Add a comment line to be written when the writer is built.","sig":null,"attributes":[{"value":"/ Add a comment line to be written when the writer is built.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":159441,"byte_end":159503,"line_start":250,"line_end":250,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":159508,"byte_end":159511,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ Comments containing '\\n' will be transformed into multiple lines of comments.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":159516,"byte_end":159597,"line_start":252,"line_end":252,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":683},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":159930,"byte_end":159945,"line_start":262,"line_end":262,"column_start":12,"column_end":27},"name":"with_start_time","qualname":"<IntervalLogWriterBuilder>::with_start_time","value":"fn with_start_time<'_>(&'_ mut Self, time::SystemTime) -> &'_ mut Self","parent":null,"children":[],"decl_id":null,"docs":" Set a StartTime. See the module-level documentation for more info.","sig":null,"attributes":[{"value":"/ Set a StartTime. See the module-level documentation for more info.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":159722,"byte_end":159792,"line_start":258,"line_end":258,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":159797,"byte_end":159800,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ This can be called multiple times, but only the value for the most recent invocation will","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":159805,"byte_end":159898,"line_start":260,"line_end":260,"column_start":5,"column_end":98}},{"value":"/ be written.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":159903,"byte_end":159918,"line_start":261,"line_end":261,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":160292,"byte_end":160306,"line_start":271,"line_end":271,"column_start":12,"column_end":26},"name":"with_base_time","qualname":"<IntervalLogWriterBuilder>::with_base_time","value":"fn with_base_time<'_>(&'_ mut Self, time::SystemTime) -> &'_ mut Self","parent":null,"children":[],"decl_id":null,"docs":" Set a BaseTime. See the module-level documentation for more info.","sig":null,"attributes":[{"value":"/ Set a BaseTime. See the module-level documentation for more info.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":160085,"byte_end":160154,"line_start":267,"line_end":267,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":160159,"byte_end":160162,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ This can be called multiple times, but only the value for the most recent invocation will","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":160167,"byte_end":160260,"line_start":269,"line_end":269,"column_start":5,"column_end":98}},{"value":"/ be written.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":160265,"byte_end":160280,"line_start":270,"line_end":270,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":160979,"byte_end":161001,"line_start":287,"line_end":287,"column_start":12,"column_end":34},"name":"with_max_value_divisor","qualname":"<IntervalLogWriterBuilder>::with_max_value_divisor","value":"fn with_max_value_divisor<'_>(&'_ mut Self, f64) -> &'_ mut Self","parent":null,"children":[],"decl_id":null,"docs":" Set a max value divisor.","sig":null,"attributes":[{"value":"/ Set a max value divisor.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":160445,"byte_end":160473,"line_start":276,"line_end":276,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":160478,"byte_end":160481,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ This is used to scale down the max value part of an interval log to something that may be","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":160486,"byte_end":160579,"line_start":278,"line_end":278,"column_start":5,"column_end":98}},{"value":"/ more human readable. The max value in the log is only for human consumption, so you might","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":160584,"byte_end":160677,"line_start":279,"line_end":279,"column_start":5,"column_end":98}},{"value":"/ prefer to divide by 10<sup>9</sup> to turn nanoseconds into fractional seconds, for","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":160682,"byte_end":160769,"line_start":280,"line_end":280,"column_start":5,"column_end":92}},{"value":"/ instance.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":160774,"byte_end":160787,"line_start":281,"line_end":281,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":160792,"byte_end":160795,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ If this is not set, 1.0 will be used.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":160800,"byte_end":160841,"line_start":283,"line_end":283,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":160846,"byte_end":160849,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ This can be called multiple times, but only the value for the most recent invocation will","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":160854,"byte_end":160947,"line_start":285,"line_end":285,"column_start":5,"column_end":98}},{"value":"/ be written.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":160952,"byte_end":160967,"line_start":286,"line_end":286,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":161227,"byte_end":161241,"line_start":294,"line_end":294,"column_start":12,"column_end":26},"name":"begin_log_with","qualname":"<IntervalLogWriterBuilder>::begin_log_with","value":"fn begin_log_with<'a, 'b, W, S, '_>(&'_ Self, &'a mut W, &'b mut S)\n-> Result<IntervalLogWriter, io::Error> where W: 'a + io::Write, S: 'b +\nSerializer","parent":null,"children":[],"decl_id":null,"docs":" Build a LogWriter and apply any configured headers.\n","sig":null,"attributes":[{"value":"/ Build a LogWriter and apply any configured headers.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":161128,"byte_end":161183,"line_start":292,"line_end":292,"column_start":5,"column_end":60}},{"value":"allow(clippy :: float_cmp)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":161188,"byte_end":161215,"line_start":293,"line_end":293,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":691},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":163364,"byte_end":163381,"line_start":360,"line_end":360,"column_start":12,"column_end":29},"name":"IntervalLogWriter","qualname":"::serialization::interval_log::IntervalLogWriter","value":"IntervalLogWriter {  }","parent":null,"children":[{"krate":0,"index":696}],"decl_id":null,"docs":" Writes interval histograms in an interval log.","sig":null,"attributes":[{"value":"/ Writes interval histograms in an interval log.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":162586,"byte_end":162636,"line_start":338,"line_end":338,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":162637,"byte_end":162640,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ This isn't created directly; start with an `IntervalLogWriterBuilder`. Once you've written the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":162641,"byte_end":162739,"line_start":340,"line_end":340,"column_start":1,"column_end":99}},{"value":"/ headers and ended up with an `IntervalLogWriter`, typical usage would be to write a histogram","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":162740,"byte_end":162837,"line_start":341,"line_end":341,"column_start":1,"column_end":98}},{"value":"/ at regular intervals (e.g. once a second).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":162838,"byte_end":162884,"line_start":342,"line_end":342,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":162885,"byte_end":162888,"line_start":343,"line_end":343,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":162889,"byte_end":162896,"line_start":344,"line_end":344,"column_start":1,"column_end":8}},{"value":"/ use hdrhistogram::serialization;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":162897,"byte_end":162933,"line_start":345,"line_end":345,"column_start":1,"column_end":37}},{"value":"/ use hdrhistogram::serialization::interval_log;","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":162934,"byte_end":162984,"line_start":346,"line_end":346,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":162985,"byte_end":162988,"line_start":347,"line_end":347,"column_start":1,"column_end":4}},{"value":"/ let mut buf = Vec::new();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":162989,"byte_end":163018,"line_start":348,"line_end":348,"column_start":1,"column_end":30}},{"value":"/ let mut serializer = serialization::V2Serializer::new();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":163019,"byte_end":163079,"line_start":349,"line_end":349,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":163080,"byte_end":163083,"line_start":350,"line_end":350,"column_start":1,"column_end":4}},{"value":"/ // create a writer via a builder","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":163084,"byte_end":163120,"line_start":351,"line_end":351,"column_start":1,"column_end":37}},{"value":"/ let mut writer = interval_log::IntervalLogWriterBuilder::new()","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":163121,"byte_end":163187,"line_start":352,"line_end":352,"column_start":1,"column_end":67}},{"value":"/     .begin_log_with(&mut buf, &mut serializer)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":163188,"byte_end":163238,"line_start":353,"line_end":353,"column_start":1,"column_end":51}},{"value":"/     .unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":163239,"byte_end":163257,"line_start":354,"line_end":354,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":163258,"byte_end":163261,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ writer.write_comment(\"Comment 2\").unwrap();","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":163262,"byte_end":163309,"line_start":356,"line_end":356,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":163310,"byte_end":163313,"line_start":357,"line_end":357,"column_start":1,"column_end":4}},{"value":"/ // .. write some intervals","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":163314,"byte_end":163344,"line_start":358,"line_end":358,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":163345,"byte_end":163352,"line_start":359,"line_end":359,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":163709,"byte_end":163722,"line_start":368,"line_end":368,"column_start":12,"column_end":25},"name":"write_comment","qualname":"<IntervalLogWriter>::write_comment","value":"fn write_comment<'_, '_>(&'_ mut Self, &'_ str) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a comment line.","sig":null,"attributes":[{"value":"/ Write a comment line.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":163578,"byte_end":163603,"line_start":365,"line_end":365,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":163608,"byte_end":163611,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ Comments containing '\\n' will be transformed into multiple lines of comments.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":163616,"byte_end":163697,"line_start":367,"line_end":367,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":164319,"byte_end":164334,"line_start":382,"line_end":382,"column_start":12,"column_end":27},"name":"write_histogram","qualname":"<IntervalLogWriter>::write_histogram","value":"fn write_histogram<T, '_, '_,\n'_>(&'_ mut Self, &'_ Histogram<T>, time::Duration, time::Duration,\nOption<Tag>) -> Result<(), IntervalLogWriterError<S::SerializeError>> where\nT: Counter","parent":null,"children":[],"decl_id":null,"docs":" Write an interval histogram.","sig":null,"attributes":[{"value":"/ Write an interval histogram.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":163820,"byte_end":163852,"line_start":372,"line_end":372,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":163857,"byte_end":163860,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ `start_timestamp` is the time since the epoch in seconds that measurements started being","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":163865,"byte_end":163957,"line_start":374,"line_end":374,"column_start":5,"column_end":97}},{"value":"/ recorded in this interval. If you're using a StartTime or BaseTime offset, you should","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":163962,"byte_end":164051,"line_start":375,"line_end":375,"column_start":5,"column_end":94}},{"value":"/ instead use a delta since that time. See the discussion about timestamps in the module-level","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":164056,"byte_end":164152,"line_start":376,"line_end":376,"column_start":5,"column_end":101}},{"value":"/ documentation.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":164157,"byte_end":164175,"line_start":377,"line_end":377,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":164180,"byte_end":164183,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ `duration` is the duration of the interval in seconds.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":164188,"byte_end":164246,"line_start":379,"line_end":379,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":164251,"byte_end":164254,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ `tag` is an optional tag for this histogram.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":164259,"byte_end":164307,"line_start":381,"line_end":381,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1066},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":164806,"byte_end":164820,"line_start":398,"line_end":398,"column_start":5,"column_end":19},"name":"SerializeError","qualname":"::serialization::interval_log::IntervalLogWriterError::SerializeError","value":"IntervalLogWriterError::SerializeError(E)","parent":{"krate":0,"index":1064},"children":[],"decl_id":null,"docs":" Histogram serialization failed.\n","sig":null,"attributes":[{"value":"/ Histogram serialization failed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":164766,"byte_end":164801,"line_start":397,"line_end":397,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1068},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":164821,"byte_end":164822,"line_start":398,"line_end":398,"column_start":20,"column_end":21},"name":"0","qualname":"::serialization::interval_log::IntervalLogWriterError::SerializeError::0","value":"E","parent":{"krate":0,"index":1066},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1069},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":164860,"byte_end":164867,"line_start":400,"line_end":400,"column_start":5,"column_end":12},"name":"IoError","qualname":"::serialization::interval_log::IntervalLogWriterError::IoError","value":"IntervalLogWriterError::IoError(io::ErrorKind)","parent":{"krate":0,"index":1064},"children":[],"decl_id":null,"docs":" An i/o error occurred.\n","sig":null,"attributes":[{"value":"/ An i/o error occurred.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":164829,"byte_end":164855,"line_start":399,"line_end":399,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":1071},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":164868,"byte_end":164881,"line_start":400,"line_end":400,"column_start":13,"column_end":26},"name":"0","qualname":"::serialization::interval_log::IntervalLogWriterError::IoError::0","value":"std::io::ErrorKind","parent":{"krate":0,"index":1069},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1064},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":164734,"byte_end":164756,"line_start":396,"line_end":396,"column_start":10,"column_end":32},"name":"IntervalLogWriterError","qualname":"::serialization::interval_log::IntervalLogWriterError","value":"enum IntervalLogWriterError<E> { SerializeError(E), IoError(io::ErrorKind), }","parent":null,"children":[{"krate":0,"index":1066},{"krate":0,"index":1069}],"decl_id":null,"docs":" Errors that can occur while writing a log.\n","sig":null,"attributes":[{"value":"/ Errors that can occur while writing a log.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":164661,"byte_end":164707,"line_start":394,"line_end":394,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":164950,"byte_end":164954,"line_start":404,"line_end":404,"column_start":8,"column_end":12},"name":"from","qualname":"<IntervalLogWriterError<E> as std::convert::From>::from","value":"fn from(io::Error) -> Self","parent":{"krate":2,"index":3169},"children":[],"decl_id":{"krate":2,"index":3171},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1075},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":167117,"byte_end":167120,"line_start":475,"line_end":475,"column_start":12,"column_end":15},"name":"Tag","qualname":"::serialization::interval_log::Tag","value":"","parent":null,"children":[],"decl_id":null,"docs":" A tag for an interval histogram.","sig":null,"attributes":[{"value":"/ A tag for an interval histogram.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":166812,"byte_end":166848,"line_start":468,"line_end":468,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":166849,"byte_end":166852,"line_start":469,"line_end":469,"column_start":1,"column_end":4}},{"value":"/ Tags are just `str`s that do not contain a few disallowed characters: ',', '\\r', '\\n', and ' '.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":166853,"byte_end":166952,"line_start":470,"line_end":470,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":166953,"byte_end":166956,"line_start":471,"line_end":471,"column_start":1,"column_end":4}},{"value":"/ To get the wrapped `str` back out, use `as_str()` or the `Deref<str>` implementation","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":166957,"byte_end":167045,"line_start":472,"line_end":472,"column_start":1,"column_end":89}},{"value":"/ (`&some_tag`).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":167046,"byte_end":167064,"line_start":473,"line_end":473,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":167271,"byte_end":167274,"line_start":481,"line_end":481,"column_start":12,"column_end":15},"name":"new","qualname":"<Tag>::new","value":"fn new(&'a str) -> Option<Tag>","parent":null,"children":[],"decl_id":null,"docs":" Create a new Tag.","sig":null,"attributes":[{"value":"/ Create a new Tag.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":167159,"byte_end":167180,"line_start":478,"line_end":478,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":167185,"byte_end":167188,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ If a disallowed character is present, this will return `None`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":167193,"byte_end":167259,"line_start":480,"line_end":480,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":167538,"byte_end":167544,"line_start":492,"line_end":492,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Tag>::as_str","value":"fn as_str<'_>(&'_ Self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":" Returns the tag contents as a str.\n","sig":null,"attributes":[{"value":"/ Returns the tag contents as a str.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":167488,"byte_end":167526,"line_start":491,"line_end":491,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":167654,"byte_end":167659,"line_start":500,"line_end":500,"column_start":8,"column_end":13},"name":"deref","qualname":"<Tag as std::ops::Deref>::deref","value":"fn deref<'_>(&'_ Self) -> &'_ Self::Target","parent":{"krate":2,"index":3486},"children":[],"decl_id":{"krate":2,"index":3488},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1093},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":167822,"byte_end":167842,"line_start":507,"line_end":507,"column_start":12,"column_end":32},"name":"IntervalLogHistogram","qualname":"::serialization::interval_log::IntervalLogHistogram","value":"IntervalLogHistogram {  }","parent":null,"children":[{"krate":0,"index":1095},{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1099}],"decl_id":null,"docs":" An individual interval histogram parsed from an interval log.\n","sig":null,"attributes":[{"value":"/ An individual interval histogram parsed from an interval log.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":167717,"byte_end":167782,"line_start":505,"line_end":505,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":168070,"byte_end":168073,"line_start":517,"line_end":517,"column_start":12,"column_end":15},"name":"tag","qualname":"<IntervalLogHistogram>::tag","value":"fn tag<'_>(&'_ Self) -> Option<Tag>","parent":null,"children":[],"decl_id":null,"docs":" Tag, if any is present.\n","sig":null,"attributes":[{"value":"/ Tag, if any is present.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":168031,"byte_end":168058,"line_start":516,"line_end":516,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":168529,"byte_end":168544,"line_start":527,"line_end":527,"column_start":12,"column_end":27},"name":"start_timestamp","qualname":"<IntervalLogHistogram>::start_timestamp","value":"fn start_timestamp<'_>(&'_ Self) -> time::Duration","parent":null,"children":[],"decl_id":null,"docs":" Timestamp of the start of the interval in seconds, expressed as a `Duration` relative to\n some start point.","sig":null,"attributes":[{"value":"/ Timestamp of the start of the interval in seconds, expressed as a `Duration` relative to","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":168130,"byte_end":168222,"line_start":521,"line_end":521,"column_start":5,"column_end":97}},{"value":"/ some start point.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":168227,"byte_end":168248,"line_start":522,"line_end":522,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":168253,"byte_end":168256,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ The timestamp may be absolute vs the epoch, or there may be a `StartTime` or `BaseTime` for","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":168261,"byte_end":168356,"line_start":524,"line_end":524,"column_start":5,"column_end":100}},{"value":"/ the log, in which case you may wish to consider this number as a delta vs those timestamps.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":168361,"byte_end":168456,"line_start":525,"line_end":525,"column_start":5,"column_end":100}},{"value":"/ See the module-level documentation about timestamps.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":168461,"byte_end":168517,"line_start":526,"line_end":526,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":168664,"byte_end":168672,"line_start":532,"line_end":532,"column_start":12,"column_end":20},"name":"duration","qualname":"<IntervalLogHistogram>::duration","value":"fn duration<'_>(&'_ Self) -> time::Duration","parent":null,"children":[],"decl_id":null,"docs":" Duration of the interval in seconds.\n","sig":null,"attributes":[{"value":"/ Duration of the interval in seconds.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":168612,"byte_end":168652,"line_start":531,"line_end":531,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":741},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":168901,"byte_end":168904,"line_start":540,"line_end":540,"column_start":12,"column_end":15},"name":"max","qualname":"<IntervalLogHistogram>::max","value":"fn max<'_>(&'_ Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Max value in the encoded histogram","sig":null,"attributes":[{"value":"/ Max value in the encoded histogram","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":168733,"byte_end":168771,"line_start":536,"line_end":536,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":168776,"byte_end":168779,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ This max value is the max of the histogram divided by some scaling factor (which may be","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":168784,"byte_end":168875,"line_start":538,"line_end":538,"column_start":5,"column_end":96}},{"value":"/ 1.0).","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":168880,"byte_end":168889,"line_start":539,"line_end":539,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":169128,"byte_end":169145,"line_start":548,"line_end":548,"column_start":12,"column_end":29},"name":"encoded_histogram","qualname":"<IntervalLogHistogram>::encoded_histogram","value":"fn encoded_histogram<'_>(&'_ Self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":" Base64-encoded serialized histogram.","sig":null,"attributes":[{"value":"/ Base64-encoded serialized histogram.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":168949,"byte_end":168989,"line_start":544,"line_end":544,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":168994,"byte_end":168997,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ If you need the deserialized histogram, base64-decode and use a `Deserializer` on the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":169002,"byte_end":169091,"line_start":546,"line_end":546,"column_start":5,"column_end":94}},{"value":"/ resulting bytes.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":169096,"byte_end":169116,"line_start":547,"line_end":547,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1111},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":169875,"byte_end":169884,"line_start":564,"line_end":564,"column_start":5,"column_end":14},"name":"StartTime","qualname":"::serialization::interval_log::LogEntry::StartTime","value":"LogEntry::StartTime(time::Duration)","parent":{"krate":0,"index":1109},"children":[],"decl_id":null,"docs":" Logs may include a StartTime. If present, it represents seconds since the epoch.\n","sig":null,"attributes":[{"value":"/ Logs may include a StartTime. If present, it represents seconds since the epoch.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":169786,"byte_end":169870,"line_start":563,"line_end":563,"column_start":5,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":1113},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":169885,"byte_end":169899,"line_start":564,"line_end":564,"column_start":15,"column_end":29},"name":"0","qualname":"::serialization::interval_log::LogEntry::StartTime::0","value":"std::time::Duration","parent":{"krate":0,"index":1111},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1114},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":169994,"byte_end":170002,"line_start":566,"line_end":566,"column_start":5,"column_end":13},"name":"BaseTime","qualname":"::serialization::interval_log::LogEntry::BaseTime","value":"LogEntry::BaseTime(time::Duration)","parent":{"krate":0,"index":1109},"children":[],"decl_id":null,"docs":" Logs may include a BaseTime. If present, it represents seconds since the epoch.\n","sig":null,"attributes":[{"value":"/ Logs may include a BaseTime. If present, it represents seconds since the epoch.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":169906,"byte_end":169989,"line_start":565,"line_end":565,"column_start":5,"column_end":88}}]},{"kind":"Field","id":{"krate":0,"index":1116},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":170003,"byte_end":170017,"line_start":566,"line_end":566,"column_start":14,"column_end":28},"name":"0","qualname":"::serialization::interval_log::LogEntry::BaseTime::0","value":"std::time::Duration","parent":{"krate":0,"index":1114},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1117},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":170066,"byte_end":170074,"line_start":568,"line_end":568,"column_start":5,"column_end":13},"name":"Interval","qualname":"::serialization::interval_log::LogEntry::Interval","value":"LogEntry::Interval(IntervalLogHistogram)","parent":{"krate":0,"index":1109},"children":[],"decl_id":null,"docs":" An individual interval histogram.\n","sig":null,"attributes":[{"value":"/ An individual interval histogram.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":170024,"byte_end":170061,"line_start":567,"line_end":567,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":1119},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":170075,"byte_end":170099,"line_start":568,"line_end":568,"column_start":14,"column_end":38},"name":"0","qualname":"::serialization::interval_log::LogEntry::Interval::0","value":"serialization::interval_log::IntervalLogHistogram<'a>","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1109},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":169767,"byte_end":169775,"line_start":562,"line_end":562,"column_start":10,"column_end":18},"name":"LogEntry","qualname":"::serialization::interval_log::LogEntry","value":"enum LogEntry<'a> {\n    StartTime(time::Duration),\n    BaseTime(time::Duration),\n    Interval(IntervalLogHistogram),\n}","parent":null,"children":[{"krate":0,"index":1111},{"krate":0,"index":1114},{"krate":0,"index":1117}],"decl_id":null,"docs":" Represents one non-comment line in an interval log.","sig":null,"attributes":[{"value":"/ Represents one non-comment line in an interval log.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":169234,"byte_end":169289,"line_start":554,"line_end":554,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":169290,"byte_end":169293,"line_start":555,"line_end":555,"column_start":1,"column_end":4}},{"value":"/ One thing to note is that the way your interval timestamps work can vary. If your log was","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":169294,"byte_end":169387,"line_start":556,"line_end":556,"column_start":1,"column_end":94}},{"value":"/ written with a StartTime or BaseTime, that metadata will appear in header comments, and that","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":169388,"byte_end":169484,"line_start":557,"line_end":557,"column_start":1,"column_end":97}},{"value":"/ will be represented by the iterator providing the corresponding variants here. The presence","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":169485,"byte_end":169580,"line_start":558,"line_end":558,"column_start":1,"column_end":96}},{"value":"/ of those timestamps will affect how you should interpret the timestamps for individual","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":169581,"byte_end":169671,"line_start":559,"line_end":559,"column_start":1,"column_end":91}},{"value":"/ intervals. See the module-level documentation.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":169672,"byte_end":169722,"line_start":560,"line_end":560,"column_start":1,"column_end":51}},{"value":"allow(variant_size_differences)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":169723,"byte_end":169757,"line_start":561,"line_end":561,"column_start":1,"column_end":35}}]},{"kind":"StructVariant","id":{"krate":0,"index":1130},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":170240,"byte_end":170250,"line_start":575,"line_end":575,"column_start":5,"column_end":15},"name":"ParseError","qualname":"::serialization::interval_log::LogIteratorError::ParseError","value":"LogIteratorError::ParseError { offset }","parent":{"krate":0,"index":1129},"children":[],"decl_id":null,"docs":" Parsing failed\n","sig":null,"attributes":[{"value":"/ Parsing failed","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":170217,"byte_end":170235,"line_start":574,"line_end":574,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":1131},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":170324,"byte_end":170330,"line_start":577,"line_end":577,"column_start":9,"column_end":15},"name":"offset","qualname":"::serialization::interval_log::LogIteratorError::ParseError::offset","value":"usize","parent":{"krate":0,"index":1130},"children":[],"decl_id":null,"docs":" Offset in the input where the failed parse started\n","sig":null,"attributes":[{"value":"/ Offset in the input where the failed parse started","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":170261,"byte_end":170315,"line_start":576,"line_end":576,"column_start":9,"column_end":63}}]},{"kind":"Enum","id":{"krate":0,"index":1129},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":170194,"byte_end":170210,"line_start":573,"line_end":573,"column_start":10,"column_end":26},"name":"LogIteratorError","qualname":"::serialization::interval_log::LogIteratorError","value":"enum LogIteratorError {\n    ParseError {\n            offset: usize,\n        },\n}","parent":null,"children":[{"krate":0,"index":1130}],"decl_id":null,"docs":" Errors that occur when parsing an interval log.\n","sig":null,"attributes":[{"value":"/ Errors that occur when parsing an interval log.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":170105,"byte_end":170156,"line_start":571,"line_end":571,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":743},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":172286,"byte_end":172305,"line_start":609,"line_end":609,"column_start":12,"column_end":31},"name":"IntervalLogIterator","qualname":"::serialization::interval_log::IntervalLogIterator","value":"IntervalLogIterator {  }","parent":null,"children":[{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747}],"decl_id":null,"docs":" Parse interval logs.","sig":null,"attributes":[{"value":"/ Parse interval logs.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":170349,"byte_end":170373,"line_start":581,"line_end":581,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":170374,"byte_end":170377,"line_start":582,"line_end":582,"column_start":1,"column_end":4}},{"value":"/ This iterator exposes each item (excluding comments and other information-free lines). See","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":170378,"byte_end":170472,"line_start":583,"line_end":583,"column_start":1,"column_end":95}},{"value":"/ `LogEntry`.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":170473,"byte_end":170488,"line_start":584,"line_end":584,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":170489,"byte_end":170492,"line_start":585,"line_end":585,"column_start":1,"column_end":4}},{"value":"/ Because histogram deserialization is deferred, parsing logs is fast. See the `interval_log`","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":170493,"byte_end":170588,"line_start":586,"line_end":586,"column_start":1,"column_end":96}},{"value":"/ benchmark if you wish to see how it does on your hardware. As a baseline, parsing a log of 1000","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":170589,"byte_end":170688,"line_start":587,"line_end":587,"column_start":1,"column_end":100}},{"value":"/ random histograms of 10,000 values each takes 2ms total on an E5-1650v3.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":170689,"byte_end":170765,"line_start":588,"line_end":588,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":170766,"byte_end":170769,"line_start":589,"line_end":589,"column_start":1,"column_end":4}},{"value":"/ Deferring deserialization is handy because it allows you to cheaply navigate the log to find","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":170770,"byte_end":170866,"line_start":590,"line_end":590,"column_start":1,"column_end":97}},{"value":"/ the records you care about (e.g. ones in a certain time range, or with a certain tag) without","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":170867,"byte_end":170964,"line_start":591,"line_end":591,"column_start":1,"column_end":98}},{"value":"/ doing all the allocation, etc, of deserialization.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":170965,"byte_end":171019,"line_start":592,"line_end":592,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":171020,"byte_end":171023,"line_start":593,"line_end":593,"column_start":1,"column_end":4}},{"value":"/ If you're looking for a direct port of the Java impl's `HistogramLogReader`, this isn't one: it","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":171024,"byte_end":171123,"line_start":594,"line_end":594,"column_start":1,"column_end":100}},{"value":"/ won't deserialize for you, and it pushes the burden of figuring out what to do with StartTime,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":171124,"byte_end":171222,"line_start":595,"line_end":595,"column_start":1,"column_end":99}},{"value":"/ BaseTime, etc to you, and there aren't built in functions to filter by timestamp. On the other","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":171223,"byte_end":171321,"line_start":596,"line_end":596,"column_start":1,"column_end":99}},{"value":"/ hand, because it doesn't do those things, it is much more flexible: you can easily build any","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":171322,"byte_end":171418,"line_start":597,"line_end":597,"column_start":1,"column_end":97}},{"value":"/ sort of filtering you want, not just timestamp ranges, because you have cheap access to all the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":171419,"byte_end":171518,"line_start":598,"line_end":598,"column_start":1,"column_end":100}},{"value":"/ metadata before incurring the cost of deserialization. If you're not using any timestamp","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":171519,"byte_end":171611,"line_start":599,"line_end":599,"column_start":1,"column_end":93}},{"value":"/ headers, or at least using them in straightforward ways, it is easy to accumulate the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":171612,"byte_end":171701,"line_start":600,"line_end":600,"column_start":1,"column_end":90}},{"value":"/ timestamp state you need. Since all the parsing is taken care of already, writing your own","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":171702,"byte_end":171796,"line_start":601,"line_end":601,"column_start":1,"column_end":95}},{"value":"/ `HistogramLogReader` equivalent that fits the way your logs are assembled is just a couple of","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":171797,"byte_end":171894,"line_start":602,"line_end":602,"column_start":1,"column_end":98}},{"value":"/ lines. (And if you're doing complex stuff, we probably wouldn't have built something that fits","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":171895,"byte_end":171993,"line_start":603,"line_end":603,"column_start":1,"column_end":99}},{"value":"/ your quirky logs anyway!)","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":171994,"byte_end":172023,"line_start":604,"line_end":604,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":172024,"byte_end":172027,"line_start":605,"line_end":605,"column_start":1,"column_end":4}},{"value":"/ This parses from a slice representing the complete file because it made implementation easier","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":172028,"byte_end":172125,"line_start":606,"line_end":606,"column_start":1,"column_end":98}},{"value":"/ (and also supports mmap'd files for maximum parsing speed). If parsing from a `Read` is","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":172126,"byte_end":172217,"line_start":607,"line_end":607,"column_start":1,"column_end":92}},{"value":"/ important for your use case, open an issue about it.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":172218,"byte_end":172274,"line_start":608,"line_end":608,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":172491,"byte_end":172494,"line_start":617,"line_end":617,"column_start":12,"column_end":15},"name":"new","qualname":"<IntervalLogIterator>::new","value":"fn new(&'a [u8]) -> IntervalLogIterator","parent":null,"children":[],"decl_id":null,"docs":" Create a new iterator from the UTF-8 bytes of an interval log.\n","sig":null,"attributes":[{"value":"/ Create a new iterator from the UTF-8 bytes of an interval log.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":172413,"byte_end":172479,"line_start":616,"line_end":616,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":172782,"byte_end":172786,"line_start":629,"line_end":629,"column_start":8,"column_end":12},"name":"next","qualname":"<IntervalLogIterator as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":765},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":122275,"byte_end":122285,"line_start":213,"line_end":213,"column_start":11,"column_end":21},"name":"Serializer","qualname":"::serialization::Serializer","value":"Serializer","parent":null,"children":[{"krate":0,"index":766},{"krate":0,"index":767}],"decl_id":null,"docs":" Histogram serializer.","sig":null,"attributes":[{"value":"/ Histogram serializer.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":122173,"byte_end":122198,"line_start":210,"line_end":210,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":122199,"byte_end":122202,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ Different implementations serialize to different formats.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":122203,"byte_end":122264,"line_start":212,"line_end":212,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":766},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":122351,"byte_end":122365,"line_start":215,"line_end":215,"column_start":10,"column_end":24},"name":"SerializeError","qualname":"::serialization::Serializer::SerializeError","value":"type SerializeError: fmt::Debug;","parent":{"krate":0,"index":765},"children":[],"decl_id":null,"docs":" Error type returned when serialization fails.\n","sig":null,"attributes":[{"value":"/ Error type returned when serialization fails.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":122292,"byte_end":122341,"line_start":214,"line_end":214,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":767},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":122596,"byte_end":122605,"line_start":221,"line_end":221,"column_start":8,"column_end":17},"name":"serialize","qualname":"::serialization::Serializer::serialize","value":"fn serialize<T, W, '_, '_, '_>(&'_ mut Self, &'_ Histogram<T>, &'_ mut W)\n-> Result<usize, Self::SerializeError> where T: Counter, W: io::Write","parent":{"krate":0,"index":765},"children":[],"decl_id":null,"docs":" Serialize the histogram into the provided writer.\n Returns the number of bytes written, or an error.","sig":null,"attributes":[{"value":"/ Serialize the histogram into the provided writer.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":122384,"byte_end":122437,"line_start":217,"line_end":217,"column_start":5,"column_end":58}},{"value":"/ Returns the number of bytes written, or an error.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":122442,"byte_end":122495,"line_start":218,"line_end":218,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":122500,"byte_end":122503,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Note that `Vec<u8>` is a reasonable `Write` implementation for simple usage.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":122508,"byte_end":122588,"line_start":220,"line_end":220,"column_start":5,"column_end":85}}]},{"kind":"Mod","id":{"krate":0,"index":772},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sync","qualname":"::sync","value":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","parent":null,"children":[{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":778},{"krate":0,"index":781},{"krate":0,"index":784},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":794},{"krate":0,"index":797},{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":804},{"krate":0,"index":807},{"krate":0,"index":810},{"krate":0,"index":1774},{"krate":0,"index":1779},{"krate":0,"index":813},{"krate":0,"index":816},{"krate":0,"index":819},{"krate":0,"index":1782},{"krate":0,"index":1784},{"krate":0,"index":1786},{"krate":0,"index":1791},{"krate":0,"index":822},{"krate":0,"index":1794},{"krate":0,"index":1799},{"krate":0,"index":825},{"krate":0,"index":829},{"krate":0,"index":833},{"krate":0,"index":837},{"krate":0,"index":1803},{"krate":0,"index":1808},{"krate":0,"index":868},{"krate":0,"index":875},{"krate":0,"index":878},{"krate":0,"index":882}],"decl_id":null,"docs":" Synchronized types that allow access to a `Histogram` from multiple threads.\n","sig":null,"attributes":[{"value":"cfg(feature = \"sync\")","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":81169,"byte_end":81193,"line_start":1854,"line_end":1854,"column_start":1,"column_end":25}},{"value":"/ Synchronized types that allow access to a `Histogram` from multiple threads.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":177804,"byte_end":177884,"line_start":1,"line_end":1,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":1774},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":179215,"byte_end":179223,"line_start":30,"line_end":30,"column_start":12,"column_end":20},"name":"Recorder","qualname":"::sync::Recorder","value":"Recorder {  }","parent":null,"children":[{"krate":0,"index":1776},{"krate":0,"index":1777},{"krate":0,"index":1778}],"decl_id":null,"docs":" A write-only handle to a [`SyncHistogram`].","sig":null,"attributes":[{"value":"/ A write-only handle to a [`SyncHistogram`].","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":178121,"byte_end":178168,"line_start":12,"line_end":12,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":178169,"byte_end":178172,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This handle allows you to record samples from multiple threads, each with its own `Recorder`,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":178173,"byte_end":178270,"line_start":14,"line_end":14,"column_start":1,"column_end":98}},{"value":"/ concurrently. Writes to a `Recorder` are wait-free and scalable except for when the","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":178271,"byte_end":178358,"line_start":15,"line_end":15,"column_start":1,"column_end":88}},{"value":"/ [`SyncHistogram`] initiates a _phase shift_. During a phase shift, the next write on each","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":178359,"byte_end":178452,"line_start":16,"line_end":16,"column_start":1,"column_end":94}},{"value":"/ associated `Recorder` merges its results into a shared [`Histogram`] that is then made","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":178453,"byte_end":178543,"line_start":17,"line_end":17,"column_start":1,"column_end":91}},{"value":"/ available to the [`SyncHistogram`] once the phase shift completes. Phase shifts should also be","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":178544,"byte_end":178642,"line_start":18,"line_end":18,"column_start":1,"column_end":99}},{"value":"/ relatively cheap for writers, as they mainly need to perform a channel send on an unbounded,","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":178643,"byte_end":178739,"line_start":19,"line_end":19,"column_start":1,"column_end":97}},{"value":"/ lock-free channel.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":178740,"byte_end":178762,"line_start":20,"line_end":20,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":178763,"byte_end":178766,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ An idle `Recorder` will hold up a phase shift indefinitely, or until it times out (is using","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":178767,"byte_end":178862,"line_start":22,"line_end":22,"column_start":1,"column_end":96}},{"value":"/ [`SyncHistogram::refresh_timeout`]. If a `Recorder` will remain idle for extended periods of","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":178863,"byte_end":178959,"line_start":23,"line_end":23,"column_start":1,"column_end":97}},{"value":"/ time, it should call [`Recorder::idle`], which will tell the reader not to wait for this","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":178960,"byte_end":179052,"line_start":24,"line_end":24,"column_start":1,"column_end":93}},{"value":"/ particular writer.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":179053,"byte_end":179075,"line_start":25,"line_end":25,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":179076,"byte_end":179079,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ When a `Recorder` is dropped, all samples are made visible to the next","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":179080,"byte_end":179154,"line_start":27,"line_end":27,"column_start":1,"column_end":75}},{"value":"/ [`SyncHistogram::refresh`].","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":179155,"byte_end":179186,"line_start":28,"line_end":28,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":815},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":179418,"byte_end":179428,"line_start":38,"line_end":38,"column_start":8,"column_end":18},"name":"add_assign","qualname":"<Recorder<C> as std::ops::AddAssign>::add_assign","value":"fn add_assign<'_>(&'_ mut Self, u64)","parent":{"krate":2,"index":3362},"children":[],"decl_id":{"krate":2,"index":3364},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":179548,"byte_end":179553,"line_start":44,"line_end":44,"column_start":8,"column_end":13},"name":"clone","qualname":"<Recorder<C> as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2883},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":821},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":180049,"byte_end":180053,"line_start":61,"line_end":61,"column_start":8,"column_end":12},"name":"drop","qualname":"<Recorder<C> as std::ops::Drop>::drop","value":"fn drop<'_>(&'_ mut Self)","parent":{"krate":2,"index":3510},"children":[],"decl_id":{"krate":2,"index":3511},"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":822},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":181337,"byte_end":181354,"line_start":94,"line_end":94,"column_start":10,"column_end":27},"name":"IdleRecorderGuard","qualname":"::sync::IdleRecorderGuard","value":"IdleRecorder<&'a mut Recorder<C>, C>","parent":null,"children":[],"decl_id":null,"docs":" See [`IdleRecorder`]. This guard borrows the idle [`Recorder`].\n","sig":null,"attributes":[{"value":"/ See [`IdleRecorder`]. This guard borrows the idle [`Recorder`].","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":181260,"byte_end":181327,"line_start":93,"line_end":93,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":1794},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":181561,"byte_end":181573,"line_start":99,"line_end":99,"column_start":12,"column_end":24},"name":"IdleRecorder","qualname":"::sync::IdleRecorder","value":"IdleRecorder {  }","parent":null,"children":[{"krate":0,"index":1797},{"krate":0,"index":1798}],"decl_id":null,"docs":" This guard denotes that a [`Recorder`] is currently idle, and should not be waited on by a\n [`SyncHistogram`] phase-shift.\n","sig":null,"attributes":[{"value":"/ This guard denotes that a [`Recorder`] is currently idle, and should not be waited on by a","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":181403,"byte_end":181497,"line_start":96,"line_end":96,"column_start":1,"column_end":95}},{"value":"/ [`SyncHistogram`] phase-shift.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":181498,"byte_end":181532,"line_start":97,"line_end":97,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":831},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":183100,"byte_end":183108,"line_start":143,"line_end":143,"column_start":12,"column_end":20},"name":"activate","qualname":"<IdleRecorder<Recorder<C>, C>>::activate","value":"fn activate(Self) -> Recorder<C>","parent":null,"children":[],"decl_id":null,"docs":" Mark the wrapped [`Recorder`] as active again and return it.\n","sig":null,"attributes":[{"value":"/ Mark the wrapped [`Recorder`] as active again and return it.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":183024,"byte_end":183088,"line_start":142,"line_end":142,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":832},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":183259,"byte_end":183267,"line_start":149,"line_end":149,"column_start":12,"column_end":20},"name":"recorder","qualname":"<IdleRecorder<Recorder<C>, C>>::recorder","value":"fn recorder<'_>(&'_ Self) -> Recorder<C>","parent":null,"children":[],"decl_id":null,"docs":" Clone the wrapped [`Recorder`].\n","sig":null,"attributes":[{"value":"/ Clone the wrapped [`Recorder`].","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":183212,"byte_end":183247,"line_start":148,"line_end":148,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":183443,"byte_end":183447,"line_start":158,"line_end":158,"column_start":8,"column_end":12},"name":"drop","qualname":"<IdleRecorder<T, C> as std::ops::Drop>::drop","value":"fn drop<'_>(&'_ mut Self)","parent":{"krate":2,"index":3510},"children":[],"decl_id":{"krate":2,"index":3511},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":185243,"byte_end":185247,"line_start":211,"line_end":211,"column_start":12,"column_end":16},"name":"idle","qualname":"<Recorder<C>>::idle","value":"fn idle<'_>(&'_ mut Self) -> IdleRecorderGuard","parent":null,"children":[],"decl_id":null,"docs":" Call this method if the Recorder will be idle for a while.","sig":null,"attributes":[{"value":"/ Call this method if the Recorder will be idle for a while.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":185025,"byte_end":185087,"line_start":207,"line_end":207,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":185092,"byte_end":185095,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ Until the returned guard is dropped, the associated [`SyncHistogram`] will not wait for","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":185100,"byte_end":185191,"line_start":209,"line_end":209,"column_start":5,"column_end":96}},{"value":"/ this recorder on a phase shift.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":185196,"byte_end":185231,"line_start":210,"line_end":210,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":185684,"byte_end":185693,"line_start":224,"line_end":224,"column_start":12,"column_end":21},"name":"into_idle","qualname":"<Recorder<C>>::into_idle","value":"fn into_idle(Self) -> IdleRecorder<Self, C>","parent":null,"children":[],"decl_id":null,"docs":" Mark this `Recorder` as inactive.","sig":null,"attributes":[{"value":"/ Mark this `Recorder` as inactive.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":185418,"byte_end":185455,"line_start":219,"line_end":219,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":185460,"byte_end":185463,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Until the returned guard is consumed, either by calling [`IdleRecorder::activate`] or by","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":185468,"byte_end":185560,"line_start":221,"line_end":221,"column_start":5,"column_end":97}},{"value":"/ dropping it, the associated [`SyncHistogram`] will not wait for this recorder on a phase","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":185565,"byte_end":185657,"line_start":222,"line_end":222,"column_start":5,"column_end":97}},{"value":"/ shift.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":185662,"byte_end":185672,"line_start":223,"line_end":223,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":185903,"byte_end":185906,"line_start":233,"line_end":233,"column_start":12,"column_end":15},"name":"add","qualname":"<Recorder<C>>::add","value":"fn add<B, '_>(&'_ mut Self, B) -> Result<(), AdditionError> where\nB: Borrow<Histogram<C>>","parent":null,"children":[],"decl_id":null,"docs":" See [`Histogram::add`].\n","sig":null,"attributes":[{"value":"/ See [`Histogram::add`].","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":185864,"byte_end":185891,"line_start":232,"line_end":232,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":186090,"byte_end":186101,"line_start":238,"line_end":238,"column_start":12,"column_end":23},"name":"add_correct","qualname":"<Recorder<C>>::add_correct","value":"fn add_correct<B, '_>(&'_ mut Self, B, u64) -> Result<(), RecordError> where\nB: Borrow<Histogram<C>>","parent":null,"children":[],"decl_id":null,"docs":" See [`Histogram::add_correct`].\n","sig":null,"attributes":[{"value":"/ See [`Histogram::add_correct`].","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":186043,"byte_end":186078,"line_start":237,"line_end":237,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":853},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":186344,"byte_end":186352,"line_start":247,"line_end":247,"column_start":12,"column_end":20},"name":"subtract","qualname":"<Recorder<C>>::subtract","value":"fn subtract<B, '_>(&'_ mut Self, B) -> Result<(), SubtractionError> where\nB: Borrow<Histogram<C>>","parent":null,"children":[],"decl_id":null,"docs":" See [`Histogram::subtract`].\n","sig":null,"attributes":[{"value":"/ See [`Histogram::subtract`].","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":186300,"byte_end":186332,"line_start":246,"line_end":246,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":856},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":186570,"byte_end":186576,"line_start":255,"line_end":255,"column_start":12,"column_end":18},"name":"record","qualname":"<Recorder<C>>::record","value":"fn record<'_>(&'_ mut Self, u64) -> Result<(), RecordError>","parent":null,"children":[],"decl_id":null,"docs":" See [`Histogram::record`].\n","sig":null,"attributes":[{"value":"/ See [`Histogram::record`].","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":186528,"byte_end":186558,"line_start":254,"line_end":254,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":186742,"byte_end":186759,"line_start":260,"line_end":260,"column_start":12,"column_end":29},"name":"saturating_record","qualname":"<Recorder<C>>::saturating_record","value":"fn saturating_record<'_>(&'_ mut Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" See [`Histogram::saturating_record`].\n","sig":null,"attributes":[{"value":"/ See [`Histogram::saturating_record`].","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":186689,"byte_end":186730,"line_start":259,"line_end":259,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":186900,"byte_end":186908,"line_start":265,"line_end":265,"column_start":12,"column_end":20},"name":"record_n","qualname":"<Recorder<C>>::record_n","value":"fn record_n<'_>(&'_ mut Self, u64, C) -> Result<(), RecordError>","parent":null,"children":[],"decl_id":null,"docs":" See [`Histogram::record_n`].\n","sig":null,"attributes":[{"value":"/ See [`Histogram::record_n`].","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":186856,"byte_end":186888,"line_start":264,"line_end":264,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":187095,"byte_end":187114,"line_start":270,"line_end":270,"column_start":12,"column_end":31},"name":"saturating_record_n","qualname":"<Recorder<C>>::saturating_record_n","value":"fn saturating_record_n<'_>(&'_ mut Self, u64, C)","parent":null,"children":[],"decl_id":null,"docs":" See [`Histogram::saturating_record_n`].\n","sig":null,"attributes":[{"value":"/ See [`Histogram::saturating_record_n`].","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":187040,"byte_end":187083,"line_start":269,"line_end":269,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":187280,"byte_end":187294,"line_start":275,"line_end":275,"column_start":12,"column_end":26},"name":"record_correct","qualname":"<Recorder<C>>::record_correct","value":"fn record_correct<'_>(&'_ mut Self, u64, u64) -> Result<(), RecordError>","parent":null,"children":[],"decl_id":null,"docs":" See [`Histogram::record_correct`].\n","sig":null,"attributes":[{"value":"/ See [`Histogram::record_correct`].","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":187230,"byte_end":187268,"line_start":274,"line_end":274,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":187492,"byte_end":187508,"line_start":280,"line_end":280,"column_start":12,"column_end":28},"name":"record_n_correct","qualname":"<Recorder<C>>::record_n_correct","value":"fn record_n_correct<'_>(&'_ mut Self, u64, C, u64) -> Result<(), RecordError>","parent":null,"children":[],"decl_id":null,"docs":" See [`Histogram::record_n_correct`].\n","sig":null,"attributes":[{"value":"/ See [`Histogram::record_n_correct`].","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":187440,"byte_end":187480,"line_start":279,"line_end":279,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":1803},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":188101,"byte_end":188114,"line_start":296,"line_end":296,"column_start":12,"column_end":25},"name":"SyncHistogram","qualname":"::sync::SyncHistogram","value":"SyncHistogram {  }","parent":null,"children":[{"krate":0,"index":1805},{"krate":0,"index":1806},{"krate":0,"index":1807}],"decl_id":null,"docs":" A `Histogram` that can be written to by multiple threads concurrently.","sig":null,"attributes":[{"value":"/ A `Histogram` that can be written to by multiple threads concurrently.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":187710,"byte_end":187784,"line_start":290,"line_end":290,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":187785,"byte_end":187788,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ Each writer thread should have a [`Recorder`], which allows it to record new samples without","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":187789,"byte_end":187885,"line_start":292,"line_end":292,"column_start":1,"column_end":97}},{"value":"/ synchronization. New recorded samples are made available through this histogram by calling","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":187886,"byte_end":187980,"line_start":293,"line_end":293,"column_start":1,"column_end":95}},{"value":"/ [`SyncHistogram::refresh`], which blocks until it has synchronized with every recorder.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":187981,"byte_end":188072,"line_start":294,"line_end":294,"column_start":1,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":190427,"byte_end":190434,"line_start":359,"line_end":359,"column_start":12,"column_end":19},"name":"refresh","qualname":"<SyncHistogram<C>>::refresh","value":"fn refresh<'_>(&'_ mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Block until writes from all [`Recorder`] instances for this histogram have been\n incorporated.\n","sig":null,"attributes":[{"value":"/ Block until writes from all [`Recorder`] instances for this histogram have been","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":190310,"byte_end":190393,"line_start":357,"line_end":357,"column_start":5,"column_end":88}},{"value":"/ incorporated.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":190398,"byte_end":190415,"line_start":358,"line_end":358,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":190655,"byte_end":190670,"line_start":365,"line_end":365,"column_start":12,"column_end":27},"name":"refresh_timeout","qualname":"<SyncHistogram<C>>::refresh_timeout","value":"fn refresh_timeout<'_>(&'_ mut Self, time::Duration)","parent":null,"children":[],"decl_id":null,"docs":" Block until writes from all [`Recorder`] instances for this histogram have been\n incorporated, or until the given amount of time has passed.\n","sig":null,"attributes":[{"value":"/ Block until writes from all [`Recorder`] instances for this histogram have been","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":190492,"byte_end":190575,"line_start":363,"line_end":363,"column_start":5,"column_end":88}},{"value":"/ incorporated, or until the given amount of time has passed.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":190580,"byte_end":190643,"line_start":364,"line_end":364,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":190969,"byte_end":190977,"line_start":373,"line_end":373,"column_start":12,"column_end":20},"name":"recorder","qualname":"<SyncHistogram<C>>::recorder","value":"fn recorder<'_>(&'_ Self) -> Recorder<C>","parent":null,"children":[],"decl_id":null,"docs":" Obtain another multi-threaded writer for this histogram.","sig":null,"attributes":[{"value":"/ Obtain another multi-threaded writer for this histogram.","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":190762,"byte_end":190822,"line_start":369,"line_end":369,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":190827,"byte_end":190830,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ Note that writes made to the `Recorder` will not be visible until the next call to","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":190835,"byte_end":190921,"line_start":371,"line_end":371,"column_start":5,"column_end":91}},{"value":"/ [`SyncHistogram::refresh`].","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":190926,"byte_end":190957,"line_start":372,"line_end":372,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":191524,"byte_end":191528,"line_start":390,"line_end":390,"column_start":8,"column_end":12},"name":"from","qualname":"<SyncHistogram<C> as std::convert::From>::from","value":"fn from(Histogram<C>) -> Self","parent":{"krate":2,"index":3169},"children":[],"decl_id":{"krate":2,"index":3171},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":881},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":191984,"byte_end":191989,"line_start":406,"line_end":406,"column_start":8,"column_end":13},"name":"deref","qualname":"<SyncHistogram<C> as std::ops::Deref>::deref","value":"fn deref<'_>(&'_ Self) -> &'_ Self::Target","parent":{"krate":2,"index":3486},"children":[],"decl_id":{"krate":2,"index":3488},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":192102,"byte_end":192111,"line_start":412,"line_end":412,"column_start":8,"column_end":17},"name":"deref_mut","qualname":"<SyncHistogram<C> as std::ops::DerefMut>::deref_mut","value":"fn deref_mut<'_>(&'_ mut Self) -> &'_ mut Self::Target","parent":{"krate":2,"index":3499},"children":[],"decl_id":{"krate":2,"index":3500},"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\quantile.rs","byte_start":91562,"byte_end":91566,"line_start":13,"line_end":13,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\quantile.rs","byte_start":92204,"byte_end":92208,"line_start":36,"line_end":36,"column_start":48,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\linear.rs","byte_start":100756,"byte_end":100760,"line_start":15,"line_end":15,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\linear.rs","byte_start":101623,"byte_end":101627,"line_start":40,"line_end":40,"column_start":48,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\log.rs","byte_start":103660,"byte_end":103664,"line_start":18,"line_end":18,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\log.rs","byte_start":104627,"byte_end":104631,"line_start":45,"line_end":45,"column_start":48,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\recorded.rs","byte_start":106390,"byte_end":106394,"line_start":10,"line_end":10,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\recorded.rs","byte_start":106671,"byte_end":106675,"line_start":17,"line_end":17,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\all.rs","byte_start":107280,"byte_end":107284,"line_start":10,"line_end":10,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\all.rs","byte_start":107553,"byte_end":107557,"line_start":17,"line_end":17,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":183},{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":82283,"byte_end":82295,"line_start":31,"line_end":31,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":84600,"byte_end":84614,"line_start":94,"line_end":94,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":86339,"byte_end":86356,"line_start":147,"line_end":147,"column_start":43,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":86890,"byte_end":86907,"line_start":164,"line_end":164,"column_start":33,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":227},{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":15151,"byte_end":15160,"line_start":293,"line_end":293,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":243},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":249},{"krate":0,"index":251},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":265},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":294},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":76851,"byte_end":76862,"line_start":1701,"line_end":1701,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":78179,"byte_end":78188,"line_start":1743,"line_end":1743,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":78419,"byte_end":78428,"line_start":1752,"line_end":1752,"column_start":54,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":78580,"byte_end":78589,"line_start":1758,"line_end":1758,"column_start":46,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":339}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":78739,"byte_end":78748,"line_start":1765,"line_end":1765,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":79183,"byte_end":79192,"line_start":1782,"line_end":1782,"column_start":54,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":79347,"byte_end":79356,"line_start":1788,"line_end":1788,"column_start":46,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":79545,"byte_end":79554,"line_start":1795,"line_end":1795,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":79736,"byte_end":79745,"line_start":1802,"line_end":1802,"column_start":58,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":123418,"byte_end":123434,"line_start":20,"line_end":20,"column_start":45,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":123636,"byte_end":123648,"line_start":31,"line_end":31,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":123711,"byte_end":123723,"line_start":36,"line_end":36,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":445}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":123864,"byte_end":123876,"line_start":43,"line_end":43,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":447},{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":132277,"byte_end":132300,"line_start":20,"line_end":20,"column_start":45,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":132768,"byte_end":132787,"line_start":36,"line_end":36,"column_start":18,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":132851,"byte_end":132870,"line_start":42,"line_end":42,"column_start":6,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":133147,"byte_end":133166,"line_start":53,"line_end":53,"column_start":21,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":137330,"byte_end":137346,"line_start":31,"line_end":31,"column_start":45,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":137741,"byte_end":137753,"line_start":45,"line_end":45,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":137817,"byte_end":137829,"line_start":51,"line_end":51,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":598},{"krate":0,"index":601}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":145357,"byte_end":145372,"line_start":288,"line_end":288,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":617},{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":158993,"byte_end":159017,"line_start":233,"line_end":233,"column_start":18,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":679}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":159081,"byte_end":159105,"line_start":239,"line_end":239,"column_start":6,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":163540,"byte_end":163557,"line_start":364,"line_end":364,"column_start":53,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":702},{"krate":0,"index":703}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":164915,"byte_end":164937,"line_start":403,"line_end":403,"column_start":29,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":707}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":165320,"byte_end":165337,"line_start":418,"line_end":418,"column_start":53,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":167145,"byte_end":167148,"line_start":477,"line_end":477,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":729},{"krate":0,"index":731}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":167613,"byte_end":167616,"line_start":497,"line_end":497,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":734},{"krate":0,"index":735}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":168000,"byte_end":168020,"line_start":515,"line_end":515,"column_start":10,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":172383,"byte_end":172402,"line_start":615,"line_end":615,"column_start":10,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":750}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":172692,"byte_end":172711,"line_start":626,"line_end":626,"column_start":23,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":753},{"krate":0,"index":754}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":179397,"byte_end":179405,"line_start":37,"line_end":37,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":179527,"byte_end":179535,"line_start":43,"line_end":43,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":180028,"byte_end":180036,"line_start":60,"line_end":60,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":821}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":181699,"byte_end":181711,"line_start":107,"line_end":107,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":828}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":182989,"byte_end":183001,"line_start":141,"line_end":141,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":831},{"krate":0,"index":832}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":183378,"byte_end":183390,"line_start":154,"line_end":154,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":836}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":183513,"byte_end":183521,"line_start":163,"line_end":163,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":839},{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847},{"krate":0,"index":850},{"krate":0,"index":853},{"krate":0,"index":856},{"krate":0,"index":858},{"krate":0,"index":860},{"krate":0,"index":862},{"krate":0,"index":864},{"krate":0,"index":866}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":188260,"byte_end":188273,"line_start":302,"line_end":302,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":870},{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":191498,"byte_end":191511,"line_start":389,"line_end":389,"column_start":41,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":877}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":191926,"byte_end":191939,"line_start":404,"line_end":404,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":880},{"krate":0,"index":881}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":192076,"byte_end":192089,"line_start":411,"line_end":411,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":15122,"byte_end":15131,"line_start":291,"line_end":291,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":25}},{"kind":"Mod","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":81385,"byte_end":81393,"line_start":5,"line_end":5,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":32}},{"kind":"Mod","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":81466,"byte_end":81472,"line_start":8,"line_end":8,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":65}},{"kind":"Mod","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":81552,"byte_end":81555,"line_start":11,"line_end":11,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":98}},{"kind":"Mod","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":81628,"byte_end":81636,"line_start":14,"line_end":14,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":132}},{"kind":"Mod","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":81700,"byte_end":81703,"line_start":17,"line_end":17,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":159}},{"kind":"Mod","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":81053,"byte_end":81059,"line_start":1849,"line_end":1849,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":385}},{"kind":"Mod","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":81103,"byte_end":81116,"line_start":1851,"line_end":1851,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":388}},{"kind":"Mod","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\mod.rs","byte_start":121914,"byte_end":121926,"line_start":200,"line_end":200,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":627}},{"kind":"Mod","span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":81202,"byte_end":81206,"line_start":1855,"line_end":1855,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":772}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\quantile.rs","byte_start":91562,"byte_end":91566,"line_start":13,"line_end":13,"column_start":27,"column_end":31},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":49},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\quantile.rs","byte_start":92204,"byte_end":92208,"line_start":36,"line_end":36,"column_start":48,"column_end":52},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":49},"to":{"krate":0,"index":191}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\linear.rs","byte_start":100756,"byte_end":100760,"line_start":15,"line_end":15,"column_start":27,"column_end":31},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":82},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\linear.rs","byte_start":101623,"byte_end":101627,"line_start":40,"line_end":40,"column_start":48,"column_end":52},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":82},"to":{"krate":0,"index":191}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\log.rs","byte_start":103660,"byte_end":103664,"line_start":18,"line_end":18,"column_start":27,"column_end":31},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":115},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\log.rs","byte_start":104627,"byte_end":104631,"line_start":45,"line_end":45,"column_start":48,"column_end":52},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":115},"to":{"krate":0,"index":191}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\recorded.rs","byte_start":106390,"byte_end":106394,"line_start":10,"line_end":10,"column_start":6,"column_end":10},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":149},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\recorded.rs","byte_start":106671,"byte_end":106675,"line_start":17,"line_end":17,"column_start":39,"column_end":43},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":149},"to":{"krate":0,"index":191}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\all.rs","byte_start":107280,"byte_end":107284,"line_start":10,"line_end":10,"column_start":6,"column_end":10},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":176},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\all.rs","byte_start":107553,"byte_end":107557,"line_start":17,"line_end":17,"column_start":39,"column_end":43},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":176},"to":{"krate":0,"index":191}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":82283,"byte_end":82295,"line_start":31,"line_end":31,"column_start":6,"column_end":18},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":186},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":84600,"byte_end":84614,"line_start":94,"line_end":94,"column_start":18,"column_end":32},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":909},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":86339,"byte_end":86356,"line_start":147,"line_end":147,"column_start":43,"column_end":60},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":195},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\iterators\\mod.rs","byte_start":86890,"byte_end":86907,"line_start":164,"line_end":164,"column_start":33,"column_end":50},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":195},"to":{"krate":2,"index":8603}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":15151,"byte_end":15160,"line_start":293,"line_end":293,"column_start":18,"column_end":27},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":888},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":76851,"byte_end":76862,"line_start":1701,"line_end":1701,"column_start":18,"column_end":29},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":319},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":78179,"byte_end":78188,"line_start":1743,"line_end":1743,"column_start":28,"column_end":37},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":888},"to":{"krate":2,"index":2882}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":78419,"byte_end":78428,"line_start":1752,"line_end":1752,"column_start":54,"column_end":63},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":888},"to":{"krate":2,"index":3362}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":78580,"byte_end":78589,"line_start":1758,"line_end":1758,"column_start":46,"column_end":55},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":888},"to":{"krate":2,"index":3362}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":78739,"byte_end":78748,"line_start":1765,"line_end":1765,"column_start":32,"column_end":41},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":888},"to":{"krate":2,"index":8364}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":79183,"byte_end":79192,"line_start":1782,"line_end":1782,"column_start":54,"column_end":63},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":888},"to":{"krate":2,"index":3366}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":79347,"byte_end":79356,"line_start":1788,"line_end":1788,"column_start":46,"column_end":55},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":888},"to":{"krate":2,"index":3366}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":79545,"byte_end":79554,"line_start":1795,"line_end":1795,"column_start":37,"column_end":46},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":888},"to":{"krate":2,"index":3362}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src/lib.rs","byte_start":79736,"byte_end":79745,"line_start":1802,"line_end":1802,"column_start":58,"column_end":67},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":888},"to":{"krate":2,"index":2915}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":108558,"byte_end":108561,"line_start":9,"line_end":9,"column_start":10,"column_end":13},"kind":"SuperTrait","from":{"krate":18,"index":968},"to":{"krate":0,"index":370}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":108573,"byte_end":108584,"line_start":10,"line_end":10,"column_start":12,"column_end":23},"kind":"SuperTrait","from":{"krate":18,"index":311},"to":{"krate":0,"index":370}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":108596,"byte_end":108609,"line_start":11,"line_end":11,"column_start":12,"column_end":25},"kind":"SuperTrait","from":{"krate":18,"index":337},"to":{"krate":0,"index":370}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":108621,"byte_end":108631,"line_start":12,"line_end":12,"column_start":12,"column_end":22},"kind":"SuperTrait","from":{"krate":18,"index":768},"to":{"krate":0,"index":370}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":108643,"byte_end":108653,"line_start":13,"line_end":13,"column_start":12,"column_end":22},"kind":"SuperTrait","from":{"krate":18,"index":624},"to":{"krate":0,"index":370}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":108665,"byte_end":108675,"line_start":14,"line_end":14,"column_start":12,"column_end":22},"kind":"SuperTrait","from":{"krate":18,"index":621},"to":{"krate":0,"index":370}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":108682,"byte_end":108686,"line_start":15,"line_end":15,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":2,"index":3273},"to":{"krate":0,"index":370}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":108693,"byte_end":108703,"line_start":16,"line_end":16,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":2961},"to":{"krate":0,"index":370}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\core\\counter.rs","byte_start":108721,"byte_end":108726,"line_start":17,"line_end":17,"column_start":12,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":10293},"to":{"krate":0,"index":370}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":123418,"byte_end":123434,"line_start":20,"line_end":20,"column_start":45,"column_end":61},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":997},"to":{"krate":2,"index":3169}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":123636,"byte_end":123648,"line_start":31,"line_end":31,"column_start":18,"column_end":30},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":440},"to":{"krate":2,"index":3241}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":123711,"byte_end":123723,"line_start":36,"line_end":36,"column_start":6,"column_end":18},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":440},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_serializer.rs","byte_start":123864,"byte_end":123876,"line_start":43,"line_end":43,"column_start":21,"column_end":33},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":440},"to":{"krate":0,"index":765}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":132277,"byte_end":132300,"line_start":20,"line_end":20,"column_start":45,"column_end":68},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1017},"to":{"krate":2,"index":3169}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":132768,"byte_end":132787,"line_start":36,"line_end":36,"column_start":18,"column_end":37},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":517},"to":{"krate":2,"index":3241}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":132851,"byte_end":132870,"line_start":42,"line_end":42,"column_start":6,"column_end":25},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":517},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\v2_deflate_serializer.rs","byte_start":133147,"byte_end":133166,"line_start":53,"line_end":53,"column_start":21,"column_end":40},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":517},"to":{"krate":0,"index":765}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":137330,"byte_end":137346,"line_start":31,"line_end":31,"column_start":45,"column_end":61},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1036},"to":{"krate":2,"index":3169}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":137741,"byte_end":137753,"line_start":45,"line_end":45,"column_start":18,"column_end":30},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":589},"to":{"krate":2,"index":3241}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":137817,"byte_end":137829,"line_start":51,"line_end":51,"column_start":6,"column_end":18},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":589},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\deserializer.rs","byte_start":145357,"byte_end":145372,"line_start":288,"line_end":288,"column_start":18,"column_end":33},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":611},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":158993,"byte_end":159017,"line_start":233,"line_end":233,"column_start":18,"column_end":42},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":673},"to":{"krate":2,"index":3241}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":159081,"byte_end":159105,"line_start":239,"line_end":239,"column_start":6,"column_end":30},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":673},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":163540,"byte_end":163557,"line_start":364,"line_end":364,"column_start":53,"column_end":70},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":691},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":164915,"byte_end":164937,"line_start":403,"line_end":403,"column_start":29,"column_end":51},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1064},"to":{"krate":2,"index":3169}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":165320,"byte_end":165337,"line_start":418,"line_end":418,"column_start":53,"column_end":70},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":708},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":167145,"byte_end":167148,"line_start":477,"line_end":477,"column_start":10,"column_end":13},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1075},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":167613,"byte_end":167616,"line_start":497,"line_end":497,"column_start":25,"column_end":28},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1075},"to":{"krate":2,"index":3486}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":168000,"byte_end":168020,"line_start":515,"line_end":515,"column_start":10,"column_end":30},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1093},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":172383,"byte_end":172402,"line_start":615,"line_end":615,"column_start":10,"column_end":29},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":743},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\serialization\\interval_log\\mod.rs","byte_start":172692,"byte_end":172711,"line_start":626,"line_end":626,"column_start":23,"column_end":42},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":743},"to":{"krate":2,"index":8603}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":179397,"byte_end":179405,"line_start":37,"line_end":37,"column_start":37,"column_end":45},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1774},"to":{"krate":2,"index":3362}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":179527,"byte_end":179535,"line_start":43,"line_end":43,"column_start":28,"column_end":36},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1774},"to":{"krate":2,"index":2882}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":180028,"byte_end":180036,"line_start":60,"line_end":60,"column_start":27,"column_end":35},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1774},"to":{"krate":2,"index":3510}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":181699,"byte_end":181711,"line_start":107,"line_end":107,"column_start":21,"column_end":33},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1794},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":182989,"byte_end":183001,"line_start":141,"line_end":141,"column_start":18,"column_end":30},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1794},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":183378,"byte_end":183390,"line_start":154,"line_end":154,"column_start":30,"column_end":42},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1794},"to":{"krate":2,"index":3510}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":183513,"byte_end":183521,"line_start":163,"line_end":163,"column_start":18,"column_end":26},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1774},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":188260,"byte_end":188273,"line_start":302,"line_end":302,"column_start":18,"column_end":31},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1803},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":191498,"byte_end":191511,"line_start":389,"line_end":389,"column_start":41,"column_end":54},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1803},"to":{"krate":2,"index":3169}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":191926,"byte_end":191939,"line_start":404,"line_end":404,"column_start":28,"column_end":41},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1803},"to":{"krate":2,"index":3486}},{"span":{"file_name":"C:\\Users\\cax68\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hdrhistogram-6.3.4\\src\\sync\\mod.rs","byte_start":192076,"byte_end":192089,"line_start":411,"line_end":411,"column_start":31,"column_end":44},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1803},"to":{"krate":2,"index":3499}}]}